(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push(["static/chunks/node_modules_mathjs_lib_esm_expression_9640bc36._.js", {

"[project]/node_modules/mathjs/lib/esm/expression/keywords.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Reserved keywords not allowed to use in the parser
__turbopack_context__.s({
    "keywords": (()=>keywords)
});
var keywords = new Set([
    'end'
]);
}}),
"[project]/node_modules/mathjs/lib/esm/expression/node/Node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNode": (()=>createNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$keywords$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/keywords.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/object.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/map.js [app-client] (ecmascript)");
;
;
;
;
;
var name = 'Node';
var dependencies = [
    'mathWithTransform'
];
var createNode = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { mathWithTransform } = _ref;
    /**
   * Validate the symbol names of a scope.
   * Throws an error when the scope contains an illegal symbol.
   * @param {Object} scope
   */ function _validateScope(scope) {
        for (var symbol of [
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$keywords$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["keywords"]
        ]){
            if (scope.has(symbol)) {
                throw new Error('Scope contains an illegal symbol, "' + symbol + '" is a reserved keyword');
            }
        }
    }
    class Node {
        get type() {
            return 'Node';
        }
        get isNode() {
            return true;
        }
        /**
     * Evaluate the node
     * @param {Object} [scope]  Scope to read/write variables
     * @return {*}              Returns the result
     */ evaluate(scope) {
            return this.compile().evaluate(scope);
        }
        /**
     * Compile the node into an optimized, evauatable JavaScript function
     * @return {{evaluate: function([Object])}} object
     *                Returns an object with a function 'evaluate',
     *                which can be invoked as expr.evaluate([scope: Object]),
     *                where scope is an optional object with
     *                variables.
     */ compile() {
            var expr = this._compile(mathWithTransform, {});
            var args = {};
            var context = null;
            function evaluate(scope) {
                var s = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMap"])(scope);
                _validateScope(s);
                return expr(s, args, context);
            }
            return {
                evaluate
            };
        }
        /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */ _compile(math, argNames) {
            throw new Error('Method _compile must be implemented by type ' + this.type);
        }
        /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */ forEach(callback) {
            // must be implemented by each of the Node implementations
            throw new Error('Cannot run forEach on a Node interface');
        }
        /**
     * Create a new Node whose children are the results of calling the
     * provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {OperatorNode} Returns a transformed copy of the node
     */ map(callback) {
            // must be implemented by each of the Node implementations
            throw new Error('Cannot run map on a Node interface');
        }
        /**
     * Validate whether an object is a Node, for use with map
     * @param {Node} node
     * @returns {Node} Returns the input if it's a node, else throws an Error
     * @protected
     */ _ifNode(node) {
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNode"])(node)) {
                throw new TypeError('Callback function must return a Node');
            }
            return node;
        }
        /**
     * Recursively traverse all nodes in a node tree. Executes given callback for
     * this node and each of its child nodes.
     * @param {function(node: Node, path: string, parent: Node)} callback
     *          A callback called for every node in the node tree.
     */ traverse(callback) {
            // execute callback for itself
            // eslint-disable-next-line
            callback(this, null, null);
            // recursively traverse over all children of a node
            function _traverse(node, callback) {
                node.forEach(function(child, path, parent) {
                    callback(child, path, parent);
                    _traverse(child, callback);
                });
            }
            _traverse(this, callback);
        }
        /**
     * Recursively transform a node tree via a transform function.
     *
     * For example, to replace all nodes of type SymbolNode having name 'x' with
     * a ConstantNode with value 2:
     *
     *     const res = Node.transform(function (node, path, parent) {
     *       if (node && node.isSymbolNode) && (node.name === 'x')) {
     *         return new ConstantNode(2)
     *       }
     *       else {
     *         return node
     *       }
     *     })
     *
     * @param {function(node: Node, path: string, parent: Node) : Node} callback
     *          A mapping function accepting a node, and returning
     *          a replacement for the node or the original node. The "signature"
     *          of the callback must be:
     *          callback(node: Node, index: string, parent: Node) : Node
     * @return {Node} Returns the original node or its replacement
     */ transform(callback) {
            function _transform(child, path, parent) {
                var replacement = callback(child, path, parent);
                if (replacement !== child) {
                    // stop iterating when the node is replaced
                    return replacement;
                }
                return child.map(_transform);
            }
            return _transform(this, null, null);
        }
        /**
     * Find any node in the node tree matching given filter function. For
     * example, to find all nodes of type SymbolNode having name 'x':
     *
     *     const results = Node.filter(function (node) {
     *       return (node && node.isSymbolNode) && (node.name === 'x')
     *     })
     *
     * @param {function(node: Node, path: string, parent: Node) : Node} callback
     *            A test function returning true when a node matches, and false
     *            otherwise. Function signature:
     *            callback(node: Node, index: string, parent: Node) : boolean
     * @return {Node[]} nodes
     *            An array with nodes matching given filter criteria
     */ filter(callback) {
            var nodes = [];
            this.traverse(function(node, path, parent) {
                if (callback(node, path, parent)) {
                    nodes.push(node);
                }
            });
            return nodes;
        }
        /**
     * Create a shallow clone of this node
     * @return {Node}
     */ clone() {
            // must be implemented by each of the Node implementations
            throw new Error('Cannot clone a Node interface');
        }
        /**
     * Create a deep clone of this node
     * @return {Node}
     */ cloneDeep() {
            return this.map(function(node) {
                return node.cloneDeep();
            });
        }
        /**
     * Deep compare this node with another node.
     * @param {Node} other
     * @return {boolean} Returns true when both nodes are of the same type and
     *                   contain the same values (as do their childs)
     */ equals(other) {
            return other ? this.type === other.type && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["deepStrictEqual"])(this, other) : false;
        }
        /**
     * Get string representation. (wrapper function)
     *
     * This function can get an object of the following form:
     * {
     *    handler: //This can be a callback function of the form
     *             // "function callback(node, options)"or
     *             // a map that maps function names (used in FunctionNodes)
     *             // to callbacks
     *    parenthesis: "keep" //the parenthesis option (This is optional)
     * }
     *
     * @param {Object} [options]
     * @return {string}
     */ toString(options) {
            var customString = this._getCustomString(options);
            if (typeof customString !== 'undefined') {
                return customString;
            }
            return this._toString(options);
        }
        /**
     * Internal function to generate the string output.
     * This has to be implemented by every Node
     *
     * @throws {Error}
     */ _toString() {
            // must be implemented by each of the Node implementations
            throw new Error('_toString not implemented for ' + this.type);
        }
        /**
     * Get a JSON representation of the node
     * Both .toJSON() and the static .fromJSON(json) should be implemented by all
     * implementations of Node
     * @returns {Object}
     */ toJSON() {
            throw new Error('Cannot serialize object: toJSON not implemented by ' + this.type);
        }
        /**
     * Get HTML representation. (wrapper function)
     *
     * This function can get an object of the following form:
     * {
     *    handler: //This can be a callback function of the form
     *             // "function callback(node, options)" or
     *             // a map that maps function names (used in FunctionNodes)
     *             // to callbacks
     *    parenthesis: "keep" //the parenthesis option (This is optional)
     * }
     *
     * @param {Object} [options]
     * @return {string}
     */ toHTML(options) {
            var customString = this._getCustomString(options);
            if (typeof customString !== 'undefined') {
                return customString;
            }
            return this._toHTML(options);
        }
        /**
     * Internal function to generate the HTML output.
     * This has to be implemented by every Node
     *
     * @throws {Error}
     */ _toHTML() {
            // must be implemented by each of the Node implementations
            throw new Error('_toHTML not implemented for ' + this.type);
        }
        /**
     * Get LaTeX representation. (wrapper function)
     *
     * This function can get an object of the following form:
     * {
     *    handler: //This can be a callback function of the form
     *             // "function callback(node, options)"or
     *             // a map that maps function names (used in FunctionNodes)
     *             // to callbacks
     *    parenthesis: "keep" //the parenthesis option (This is optional)
     * }
     *
     * @param {Object} [options]
     * @return {string}
     */ toTex(options) {
            var customString = this._getCustomString(options);
            if (typeof customString !== 'undefined') {
                return customString;
            }
            return this._toTex(options);
        }
        /**
     * Internal function to generate the LaTeX output.
     * This has to be implemented by every Node
     *
     * @param {Object} [options]
     * @throws {Error}
     */ _toTex(options) {
            // must be implemented by each of the Node implementations
            throw new Error('_toTex not implemented for ' + this.type);
        }
        /**
     * Helper used by `to...` functions.
     */ _getCustomString(options) {
            if (options && typeof options === 'object') {
                switch(typeof options.handler){
                    case 'object':
                    case 'undefined':
                        return;
                    case 'function':
                        return options.handler(this, options);
                    default:
                        throw new TypeError('Object or function expected as callback');
                }
            }
        }
        /**
     * Get identifier.
     * @return {string}
     */ getIdentifier() {
            return this.type;
        }
        /**
     * Get the content of the current Node.
     * @return {Node} node
     **/ getContent() {
            return this;
        }
    }
    return Node;
}, {
    isClass: true,
    isNode: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "errorTransform": (()=>errorTransform)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$error$2f$IndexError$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/error/IndexError.js [app-client] (ecmascript)");
;
function errorTransform(err) {
    if (err && err.isIndexError) {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$error$2f$IndexError$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["IndexError"](err.index + 1, err.min + 1, err.max !== undefined ? err.max + 1 : undefined);
    }
    return err;
}
}}),
"[project]/node_modules/mathjs/lib/esm/expression/node/utils/access.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "accessFactory": (()=>accessFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$errorTransform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$customs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/customs.js [app-client] (ecmascript)");
;
;
function accessFactory(_ref) {
    var { subset } = _ref;
    /**
   * Retrieve part of an object:
   *
   * - Retrieve a property from an object
   * - Retrieve a part of a string
   * - Retrieve a matrix subset
   *
   * @param {Object | Array | Matrix | string} object
   * @param {Index} index
   * @return {Object | Array | Matrix | string} Returns the subset
   */ return function access(object, index) {
        try {
            if (Array.isArray(object)) {
                return subset(object, index);
            } else if (object && typeof object.subset === 'function') {
                // Matrix
                return object.subset(index);
            } else if (typeof object === 'string') {
                // TODO: move getStringSubset into a separate util file, use that
                return subset(object, index);
            } else if (typeof object === 'object') {
                if (!index.isObjectProperty()) {
                    throw new TypeError('Cannot apply a numeric index as object property');
                }
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$customs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getSafeProperty"])(object, index.getObjectProperty());
            } else {
                throw new TypeError('Cannot apply index: unsupported type of object');
            }
        } catch (err) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$errorTransform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["errorTransform"])(err);
        }
    };
}
}}),
"[project]/node_modules/mathjs/lib/esm/expression/node/AccessorNode.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAccessorNode": (()=>createAccessorNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/defineProperty.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$customs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/customs.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$node$2f$utils$2f$access$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/node/utils/access.js [app-client] (ecmascript)");
;
;
;
;
;
var name = 'AccessorNode';
var dependencies = [
    'subset',
    'Node'
];
var createAccessorNode = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { subset, Node } = _ref;
    var access = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$node$2f$utils$2f$access$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["accessFactory"])({
        subset
    });
    /**
   * Are parenthesis needed?
   * @private
   */ function needParenthesis(node) {
        // TODO: maybe make a method on the nodes which tells whether they need parenthesis?
        return !((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAccessorNode"])(node) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isArrayNode"])(node) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isConstantNode"])(node) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFunctionNode"])(node) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObjectNode"])(node) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isParenthesisNode"])(node) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSymbolNode"])(node));
    }
    class AccessorNode extends Node {
        /**
     * @constructor AccessorNode
     * @extends {Node}
     * Access an object property or get a matrix subset
     *
     * @param {Node} object                 The object from which to retrieve
     *                                      a property or subset.
     * @param {IndexNode} index             IndexNode containing ranges
     */ constructor(object, index){
            super();
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNode"])(object)) {
                throw new TypeError('Node expected for parameter "object"');
            }
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isIndexNode"])(index)) {
                throw new TypeError('IndexNode expected for parameter "index"');
            }
            this.object = object;
            this.index = index;
        }
        // readonly property name
        get name() {
            if (this.index) {
                return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';
            } else {
                return this.object.name || '';
            }
        }
        get type() {
            return name;
        }
        get isAccessorNode() {
            return true;
        }
        /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */ _compile(math, argNames) {
            var evalObject = this.object._compile(math, argNames);
            var evalIndex = this.index._compile(math, argNames);
            if (this.index.isObjectProperty()) {
                var prop = this.index.getObjectProperty();
                return function evalAccessorNode(scope, args, context) {
                    // get a property from an object evaluated using the scope.
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$customs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getSafeProperty"])(evalObject(scope, args, context), prop);
                };
            } else {
                return function evalAccessorNode(scope, args, context) {
                    var object = evalObject(scope, args, context);
                    // we pass just object here instead of context:
                    var index = evalIndex(scope, args, object);
                    return access(object, index);
                };
            }
        }
        /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */ forEach(callback) {
            callback(this.object, 'object', this);
            callback(this.index, 'index', this);
        }
        /**
     * Create a new AccessorNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {AccessorNode} Returns a transformed copy of the node
     */ map(callback) {
            return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));
        }
        /**
     * Create a clone of this node, a shallow copy
     * @return {AccessorNode}
     */ clone() {
            return new AccessorNode(this.object, this.index);
        }
        /**
     * Get string representation
     * @param {Object} options
     * @return {string}
     */ _toString(options) {
            var object = this.object.toString(options);
            if (needParenthesis(this.object)) {
                object = '(' + object + ')';
            }
            return object + this.index.toString(options);
        }
        /**
     * Get HTML representation
     * @param {Object} options
     * @return {string}
     */ _toHTML(options) {
            var object = this.object.toHTML(options);
            if (needParenthesis(this.object)) {
                object = '<span class="math-parenthesis math-round-parenthesis">(</span>' + object + '<span class="math-parenthesis math-round-parenthesis">)</span>';
            }
            return object + this.index.toHTML(options);
        }
        /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string}
     */ _toTex(options) {
            var object = this.object.toTex(options);
            if (needParenthesis(this.object)) {
                object = '\\left(\' + object + \'\\right)';
            }
            return object + this.index.toTex(options);
        }
        /**
     * Get a JSON representation of the node
     * @returns {Object}
     */ toJSON() {
            return {
                mathjs: name,
                object: this.object,
                index: this.index
            };
        }
        /**
     * Instantiate an AccessorNode from its JSON representation
     * @param {Object} json
     *     An object structured like
     *     `{"mathjs": "AccessorNode", object: ..., index: ...}`,
     *     where mathjs is optional
     * @returns {AccessorNode}
     */ static fromJSON(json) {
            return new AccessorNode(json.object, json.index);
        }
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(AccessorNode, "name", name);
    return AccessorNode;
}, {
    isClass: true,
    isNode: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/node/ArrayNode.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createArrayNode": (()=>createArrayNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/defineProperty.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/array.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
;
;
;
;
var name = 'ArrayNode';
var dependencies = [
    'Node'
];
var createArrayNode = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { Node } = _ref;
    class ArrayNode extends Node {
        /**
     * @constructor ArrayNode
     * @extends {Node}
     * Holds an 1-dimensional array with items
     * @param {Node[]} [items]   1 dimensional array with items
     */ constructor(items){
            super();
            this.items = items || [];
            // validate input
            if (!Array.isArray(this.items) || !this.items.every(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNode"])) {
                throw new TypeError('Array containing Nodes expected');
            }
        }
        get type() {
            return name;
        }
        get isArrayNode() {
            return true;
        }
        /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */ _compile(math, argNames) {
            var evalItems = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["map"])(this.items, function(item) {
                return item._compile(math, argNames);
            });
            var asMatrix = math.config.matrix !== 'Array';
            if (asMatrix) {
                var matrix = math.matrix;
                return function evalArrayNode(scope, args, context) {
                    return matrix((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["map"])(evalItems, function(evalItem) {
                        return evalItem(scope, args, context);
                    }));
                };
            } else {
                return function evalArrayNode(scope, args, context) {
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["map"])(evalItems, function(evalItem) {
                        return evalItem(scope, args, context);
                    });
                };
            }
        }
        /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */ forEach(callback) {
            for(var i = 0; i < this.items.length; i++){
                var node = this.items[i];
                callback(node, 'items[' + i + ']', this);
            }
        }
        /**
     * Create a new ArrayNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {ArrayNode} Returns a transformed copy of the node
     */ map(callback) {
            var items = [];
            for(var i = 0; i < this.items.length; i++){
                items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));
            }
            return new ArrayNode(items);
        }
        /**
     * Create a clone of this node, a shallow copy
     * @return {ArrayNode}
     */ clone() {
            return new ArrayNode(this.items.slice(0));
        }
        /**
     * Get string representation
     * @param {Object} options
     * @return {string} str
     * @override
     */ _toString(options) {
            var items = this.items.map(function(node) {
                return node.toString(options);
            });
            return '[' + items.join(', ') + ']';
        }
        /**
     * Get a JSON representation of the node
     * @returns {Object}
     */ toJSON() {
            return {
                mathjs: name,
                items: this.items
            };
        }
        /**
     * Instantiate an ArrayNode from its JSON representation
     * @param {Object} json  An object structured like
     *                       `{"mathjs": "ArrayNode", items: [...]}`,
     *                       where mathjs is optional
     * @returns {ArrayNode}
     */ static fromJSON(json) {
            return new ArrayNode(json.items);
        }
        /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     * @override
     */ _toHTML(options) {
            var items = this.items.map(function(node) {
                return node.toHTML(options);
            });
            return '<span class="math-parenthesis math-square-parenthesis">[</span>' + items.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
        }
        /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     */ _toTex(options) {
            function itemsToTex(items, nested) {
                var mixedItems = items.some(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isArrayNode"]) && !items.every(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isArrayNode"]);
                var itemsFormRow = nested || mixedItems;
                var itemSep = itemsFormRow ? '&' : '\\\\';
                var itemsTex = items.map(function(node) {
                    if (node.items) {
                        return itemsToTex(node.items, !nested);
                    } else {
                        return node.toTex(options);
                    }
                }).join(itemSep);
                return mixedItems || !itemsFormRow || itemsFormRow && !nested ? '\\begin{bmatrix}' + itemsTex + '\\end{bmatrix}' : itemsTex;
            }
            return itemsToTex(this.items, false);
        }
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(ArrayNode, "name", name);
    return ArrayNode;
}, {
    isClass: true,
    isNode: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/node/utils/assign.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "assignFactory": (()=>assignFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$errorTransform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$customs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/customs.js [app-client] (ecmascript)");
;
;
function assignFactory(_ref) {
    var { subset, matrix } = _ref;
    /**
   * Replace part of an object:
   *
   * - Assign a property to an object
   * - Replace a part of a string
   * - Replace a matrix subset
   *
   * @param {Object | Array | Matrix | string} object
   * @param {Index} index
   * @param {*} value
   * @return {Object | Array | Matrix | string} Returns the original object
   *                                            except in case of a string
   */ // TODO: change assign to return the value instead of the object
    return function assign(object, index, value) {
        try {
            if (Array.isArray(object)) {
                var result = matrix(object).subset(index, value).valueOf();
                // shallow copy all (updated) items into the original array
                result.forEach((item, index)=>{
                    object[index] = item;
                });
                return object;
            } else if (object && typeof object.subset === 'function') {
                // Matrix
                return object.subset(index, value);
            } else if (typeof object === 'string') {
                // TODO: move setStringSubset into a separate util file, use that
                return subset(object, index, value);
            } else if (typeof object === 'object') {
                if (!index.isObjectProperty()) {
                    throw TypeError('Cannot apply a numeric index as object property');
                }
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$customs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setSafeProperty"])(object, index.getObjectProperty(), value);
                return object;
            } else {
                throw new TypeError('Cannot apply index: unsupported type of object');
            }
        } catch (err) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$errorTransform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["errorTransform"])(err);
        }
    };
}
}}),
"[project]/node_modules/mathjs/lib/esm/expression/operators.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// list of identifiers of nodes in order of their precedence
// also contains information about left/right associativity
// and which other operator the operator is associative with
// Example:
// addition is associative with addition and subtraction, because:
// (a+b)+c=a+(b+c)
// (a+b)-c=a+(b-c)
//
// postfix operators are left associative, prefix operators
// are right associative
//
// It's also possible to set the following properties:
// latexParens: if set to false, this node doesn't need to be enclosed
//              in parentheses when using LaTeX
// latexLeftParens: if set to false, this !OperatorNode's!
//                  left argument doesn't need to be enclosed
//                  in parentheses
// latexRightParens: the same for the right argument
__turbopack_context__.s({
    "getAssociativity": (()=>getAssociativity),
    "getOperator": (()=>getOperator),
    "getPrecedence": (()=>getPrecedence),
    "isAssociativeWith": (()=>isAssociativeWith),
    "properties": (()=>properties)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/object.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
;
;
var properties = [
    {
        // assignment
        AssignmentNode: {},
        FunctionAssignmentNode: {}
    },
    {
        // conditional expression
        ConditionalNode: {
            latexLeftParens: false,
            latexRightParens: false,
            latexParens: false
        }
    },
    {
        // logical or
        'OperatorNode:or': {
            op: 'or',
            associativity: 'left',
            associativeWith: []
        }
    },
    {
        // logical xor
        'OperatorNode:xor': {
            op: 'xor',
            associativity: 'left',
            associativeWith: []
        }
    },
    {
        // logical and
        'OperatorNode:and': {
            op: 'and',
            associativity: 'left',
            associativeWith: []
        }
    },
    {
        // bitwise or
        'OperatorNode:bitOr': {
            op: '|',
            associativity: 'left',
            associativeWith: []
        }
    },
    {
        // bitwise xor
        'OperatorNode:bitXor': {
            op: '^|',
            associativity: 'left',
            associativeWith: []
        }
    },
    {
        // bitwise and
        'OperatorNode:bitAnd': {
            op: '&',
            associativity: 'left',
            associativeWith: []
        }
    },
    {
        // relational operators
        'OperatorNode:equal': {
            op: '==',
            associativity: 'left',
            associativeWith: []
        },
        'OperatorNode:unequal': {
            op: '!=',
            associativity: 'left',
            associativeWith: []
        },
        'OperatorNode:smaller': {
            op: '<',
            associativity: 'left',
            associativeWith: []
        },
        'OperatorNode:larger': {
            op: '>',
            associativity: 'left',
            associativeWith: []
        },
        'OperatorNode:smallerEq': {
            op: '<=',
            associativity: 'left',
            associativeWith: []
        },
        'OperatorNode:largerEq': {
            op: '>=',
            associativity: 'left',
            associativeWith: []
        },
        RelationalNode: {
            associativity: 'left',
            associativeWith: []
        }
    },
    {
        // bitshift operators
        'OperatorNode:leftShift': {
            op: '<<',
            associativity: 'left',
            associativeWith: []
        },
        'OperatorNode:rightArithShift': {
            op: '>>',
            associativity: 'left',
            associativeWith: []
        },
        'OperatorNode:rightLogShift': {
            op: '>>>',
            associativity: 'left',
            associativeWith: []
        }
    },
    {
        // unit conversion
        'OperatorNode:to': {
            op: 'to',
            associativity: 'left',
            associativeWith: []
        }
    },
    {
        // range
        RangeNode: {}
    },
    {
        // addition, subtraction
        'OperatorNode:add': {
            op: '+',
            associativity: 'left',
            associativeWith: [
                'OperatorNode:add',
                'OperatorNode:subtract'
            ]
        },
        'OperatorNode:subtract': {
            op: '-',
            associativity: 'left',
            associativeWith: []
        }
    },
    {
        // multiply, divide, modulus
        'OperatorNode:multiply': {
            op: '*',
            associativity: 'left',
            associativeWith: [
                'OperatorNode:multiply',
                'OperatorNode:divide',
                'Operator:dotMultiply',
                'Operator:dotDivide'
            ]
        },
        'OperatorNode:divide': {
            op: '/',
            associativity: 'left',
            associativeWith: [],
            latexLeftParens: false,
            latexRightParens: false,
            latexParens: false
        },
        'OperatorNode:dotMultiply': {
            op: '.*',
            associativity: 'left',
            associativeWith: [
                'OperatorNode:multiply',
                'OperatorNode:divide',
                'OperatorNode:dotMultiply',
                'OperatorNode:doDivide'
            ]
        },
        'OperatorNode:dotDivide': {
            op: './',
            associativity: 'left',
            associativeWith: []
        },
        'OperatorNode:mod': {
            op: 'mod',
            associativity: 'left',
            associativeWith: []
        }
    },
    {
        // Repeat multiplication for implicit multiplication
        'OperatorNode:multiply': {
            associativity: 'left',
            associativeWith: [
                'OperatorNode:multiply',
                'OperatorNode:divide',
                'Operator:dotMultiply',
                'Operator:dotDivide'
            ]
        }
    },
    {
        // unary prefix operators
        'OperatorNode:unaryPlus': {
            op: '+',
            associativity: 'right'
        },
        'OperatorNode:unaryMinus': {
            op: '-',
            associativity: 'right'
        },
        'OperatorNode:bitNot': {
            op: '~',
            associativity: 'right'
        },
        'OperatorNode:not': {
            op: 'not',
            associativity: 'right'
        }
    },
    {
        // exponentiation
        'OperatorNode:pow': {
            op: '^',
            associativity: 'right',
            associativeWith: [],
            latexRightParens: false
        },
        'OperatorNode:dotPow': {
            op: '.^',
            associativity: 'right',
            associativeWith: []
        }
    },
    {
        // factorial
        'OperatorNode:factorial': {
            op: '!',
            associativity: 'left'
        }
    },
    {
        // matrix transpose
        'OperatorNode:ctranspose': {
            op: "'",
            associativity: 'left'
        }
    }
];
/**
 * Returns the first non-parenthesis internal node, but only
 * when the 'parenthesis' option is unset or auto.
 * @param {Node} _node
 * @param {string} parenthesis
 * @return {Node}
 */ function unwrapParen(_node, parenthesis) {
    if (!parenthesis || parenthesis !== 'auto') return _node;
    var node = _node;
    while((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isParenthesisNode"])(node))node = node.content;
    return node;
}
function getPrecedence(_node, parenthesis, implicit, parent) {
    var node = _node;
    if (parenthesis !== 'keep') {
        // ParenthesisNodes are only ignored when not in 'keep' mode
        node = _node.getContent();
    }
    var identifier = node.getIdentifier();
    var precedence = null;
    for(var i = 0; i < properties.length; i++){
        if (identifier in properties[i]) {
            precedence = i;
            break;
        }
    }
    // Bump up precedence of implicit multiplication, except when preceded
    // by a "Rule 2" fraction ( [unaryOp]constant / constant )
    if (identifier === 'OperatorNode:multiply' && node.implicit && implicit !== 'show') {
        var leftArg = unwrapParen(node.args[0], parenthesis);
        if (!((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isConstantNode"])(leftArg) && parent && parent.getIdentifier() === 'OperatorNode:divide' && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rule2Node"])(unwrapParen(parent.args[0], parenthesis))) && !(leftArg.getIdentifier() === 'OperatorNode:divide' && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rule2Node"])(unwrapParen(leftArg.args[0], parenthesis)) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isConstantNode"])(unwrapParen(leftArg.args[1])))) {
            precedence += 1;
        }
    }
    return precedence;
}
function getAssociativity(_node, parenthesis) {
    var node = _node;
    if (parenthesis !== 'keep') {
        // ParenthesisNodes are only ignored when not in 'keep' mode
        node = _node.getContent();
    }
    var identifier = node.getIdentifier();
    var index = getPrecedence(node, parenthesis);
    if (index === null) {
        // node isn't in the list
        return null;
    }
    var property = properties[index][identifier];
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasOwnProperty"])(property, 'associativity')) {
        if (property.associativity === 'left') {
            return 'left';
        }
        if (property.associativity === 'right') {
            return 'right';
        }
        // associativity is invalid
        throw Error('\'' + identifier + '\' has the invalid associativity \'' + property.associativity + '\'.');
    }
    // associativity is undefined
    return null;
}
function isAssociativeWith(nodeA, nodeB, parenthesis) {
    // ParenthesisNodes are only ignored when not in 'keep' mode
    var a = parenthesis !== 'keep' ? nodeA.getContent() : nodeA;
    var b = parenthesis !== 'keep' ? nodeA.getContent() : nodeB;
    var identifierA = a.getIdentifier();
    var identifierB = b.getIdentifier();
    var index = getPrecedence(a, parenthesis);
    if (index === null) {
        // node isn't in the list
        return null;
    }
    var property = properties[index][identifierA];
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasOwnProperty"])(property, 'associativeWith') && property.associativeWith instanceof Array) {
        for(var i = 0; i < property.associativeWith.length; i++){
            if (property.associativeWith[i] === identifierB) {
                return true;
            }
        }
        return false;
    }
    // associativeWith is not defined
    return null;
}
function getOperator(fn) {
    var identifier = 'OperatorNode:' + fn;
    for (var group of properties){
        if (identifier in group) {
            return group[identifier].op;
        }
    }
    return null;
}
}}),
"[project]/node_modules/mathjs/lib/esm/expression/node/AssignmentNode.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAssignmentNode": (()=>createAssignmentNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/defineProperty.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$customs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/customs.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$node$2f$utils$2f$access$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/node/utils/access.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$node$2f$utils$2f$assign$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/node/utils/assign.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/operators.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
var name = 'AssignmentNode';
var dependencies = [
    'subset',
    '?matrix',
    // FIXME: should not be needed at all, should be handled by subset
    'Node'
];
var createAssignmentNode = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { subset, matrix, Node } = _ref;
    var access = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$node$2f$utils$2f$access$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["accessFactory"])({
        subset
    });
    var assign = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$node$2f$utils$2f$assign$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignFactory"])({
        subset,
        matrix
    });
    /*
   * Is parenthesis needed?
   * @param {node} node
   * @param {string} [parenthesis='keep']
   * @param {string} implicit
   * @private
   */ function needParenthesis(node, parenthesis, implicit) {
        if (!parenthesis) {
            parenthesis = 'keep';
        }
        var precedence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPrecedence"])(node, parenthesis, implicit);
        var exprPrecedence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPrecedence"])(node.value, parenthesis, implicit);
        return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;
    }
    class AssignmentNode extends Node {
        /**
     * @constructor AssignmentNode
     * @extends {Node}
     *
     * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or
     * replace a subset of a matrix like `A[2,2]=42`.
     *
     * Syntax:
     *
     *     new AssignmentNode(symbol, value)
     *     new AssignmentNode(object, index, value)
     *
     * Usage:
     *
     *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))  // a=2
     *    new AssignmentNode(new SymbolNode('a'),
     *                       new IndexNode('b'),
     *                       new ConstantNode(2))   // a.b=2
     *    new AssignmentNode(new SymbolNode('a'),
     *                       new IndexNode(1, 2),
     *                       new ConstantNode(3))  // a[1,2]=3
     *
     * @param {SymbolNode | AccessorNode} object
     *     Object on which to assign a value
     * @param {IndexNode} [index=null]
     *     Index, property name or matrix index. Optional. If not provided
     *     and `object` is a SymbolNode, the property is assigned to the
     *     global scope.
     * @param {Node} value
     *     The value to be assigned
     */ constructor(object, index, value){
            super();
            this.object = object;
            this.index = value ? index : null;
            this.value = value || index;
            // validate input
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSymbolNode"])(object) && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAccessorNode"])(object)) {
                throw new TypeError('SymbolNode or AccessorNode expected as "object"');
            }
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSymbolNode"])(object) && object.name === 'end') {
                throw new Error('Cannot assign to symbol "end"');
            }
            if (this.index && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isIndexNode"])(this.index)) {
                // index is optional
                throw new TypeError('IndexNode expected as "index"');
            }
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNode"])(this.value)) {
                throw new TypeError('Node expected as "value"');
            }
        }
        // class name for typing purposes:
        // readonly property name
        get name() {
            if (this.index) {
                return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';
            } else {
                return this.object.name || '';
            }
        }
        get type() {
            return name;
        }
        get isAssignmentNode() {
            return true;
        }
        /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */ _compile(math, argNames) {
            var evalObject = this.object._compile(math, argNames);
            var evalIndex = this.index ? this.index._compile(math, argNames) : null;
            var evalValue = this.value._compile(math, argNames);
            var name = this.object.name;
            if (!this.index) {
                // apply a variable to the scope, for example `a=2`
                if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSymbolNode"])(this.object)) {
                    throw new TypeError('SymbolNode expected as object');
                }
                return function evalAssignmentNode(scope, args, context) {
                    var value = evalValue(scope, args, context);
                    scope.set(name, value);
                    return value;
                };
            } else if (this.index.isObjectProperty()) {
                // apply an object property for example `a.b=2`
                var prop = this.index.getObjectProperty();
                return function evalAssignmentNode(scope, args, context) {
                    var object = evalObject(scope, args, context);
                    var value = evalValue(scope, args, context);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$customs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setSafeProperty"])(object, prop, value);
                    return value;
                };
            } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSymbolNode"])(this.object)) {
                // update a matrix subset, for example `a[2]=3`
                return function evalAssignmentNode(scope, args, context) {
                    var childObject = evalObject(scope, args, context);
                    var value = evalValue(scope, args, context);
                    // Important:  we pass childObject instead of context:
                    var index = evalIndex(scope, args, childObject);
                    scope.set(name, assign(childObject, index, value));
                    return value;
                };
            } else {
                // isAccessorNode(node.object) === true
                // update a matrix subset, for example `a.b[2]=3`
                // we will not use the compile function of the AccessorNode, but
                // compile it ourselves here as we need the parent object of the
                // AccessorNode:
                // wee need to apply the updated object to parent object
                var evalParentObject = this.object.object._compile(math, argNames);
                if (this.object.index.isObjectProperty()) {
                    var parentProp = this.object.index.getObjectProperty();
                    return function evalAssignmentNode(scope, args, context) {
                        var parent = evalParentObject(scope, args, context);
                        var childObject = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$customs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getSafeProperty"])(parent, parentProp);
                        // Important: we pass childObject instead of context:
                        var index = evalIndex(scope, args, childObject);
                        var value = evalValue(scope, args, context);
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$customs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setSafeProperty"])(parent, parentProp, assign(childObject, index, value));
                        return value;
                    };
                } else {
                    // if some parameters use the 'end' parameter, we need to calculate
                    // the size
                    var evalParentIndex = this.object.index._compile(math, argNames);
                    return function evalAssignmentNode(scope, args, context) {
                        var parent = evalParentObject(scope, args, context);
                        // Important: we pass parent instead of context:
                        var parentIndex = evalParentIndex(scope, args, parent);
                        var childObject = access(parent, parentIndex);
                        // Important:  we pass childObject instead of context
                        var index = evalIndex(scope, args, childObject);
                        var value = evalValue(scope, args, context);
                        assign(parent, parentIndex, assign(childObject, index, value));
                        return value;
                    };
                }
            }
        }
        /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */ forEach(callback) {
            callback(this.object, 'object', this);
            if (this.index) {
                callback(this.index, 'index', this);
            }
            callback(this.value, 'value', this);
        }
        /**
     * Create a new AssignmentNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {AssignmentNode} Returns a transformed copy of the node
     */ map(callback) {
            var object = this._ifNode(callback(this.object, 'object', this));
            var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;
            var value = this._ifNode(callback(this.value, 'value', this));
            return new AssignmentNode(object, index, value);
        }
        /**
     * Create a clone of this node, a shallow copy
     * @return {AssignmentNode}
     */ clone() {
            return new AssignmentNode(this.object, this.index, this.value);
        }
        /**
     * Get string representation
     * @param {Object} options
     * @return {string}
     */ _toString(options) {
            var object = this.object.toString(options);
            var index = this.index ? this.index.toString(options) : '';
            var value = this.value.toString(options);
            if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {
                value = '(' + value + ')';
            }
            return object + index + ' = ' + value;
        }
        /**
     * Get a JSON representation of the node
     * @returns {Object}
     */ toJSON() {
            return {
                mathjs: name,
                object: this.object,
                index: this.index,
                value: this.value
            };
        }
        /**
     * Instantiate an AssignmentNode from its JSON representation
     * @param {Object} json
     *     An object structured like
     *     `{"mathjs": "AssignmentNode", object: ..., index: ..., value: ...}`,
     *     where mathjs is optional
     * @returns {AssignmentNode}
     */ static fromJSON(json) {
            return new AssignmentNode(json.object, json.index, json.value);
        }
        /**
     * Get HTML representation
     * @param {Object} options
     * @return {string}
     */ _toHTML(options) {
            var object = this.object.toHTML(options);
            var index = this.index ? this.index.toHTML(options) : '';
            var value = this.value.toHTML(options);
            if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {
                value = '<span class="math-paranthesis math-round-parenthesis">(</span>' + value + '<span class="math-paranthesis math-round-parenthesis">)</span>';
            }
            return object + index + '<span class="math-operator math-assignment-operator ' + 'math-variable-assignment-operator math-binary-operator">=</span>' + value;
        }
        /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string}
     */ _toTex(options) {
            var object = this.object.toTex(options);
            var index = this.index ? this.index.toTex(options) : '';
            var value = this.value.toTex(options);
            if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {
                value = "\\left(".concat(value, "\\right)");
            }
            return object + index + '=' + value;
        }
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(AssignmentNode, "name", name);
    return AssignmentNode;
}, {
    isClass: true,
    isNode: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/node/BlockNode.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createBlockNode": (()=>createBlockNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/defineProperty.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/array.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
;
;
;
;
var name = 'BlockNode';
var dependencies = [
    'ResultSet',
    'Node'
];
var createBlockNode = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { ResultSet, Node } = _ref;
    class BlockNode extends Node {
        /**
     * @constructor BlockNode
     * @extends {Node}
     * Holds a set with blocks
     * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks
     *            An array with blocks, where a block is constructed as an
     *            Object with properties block, which is a Node, and visible,
     *            which is a boolean. The property visible is optional and
     *            is true by default
     */ constructor(blocks){
            super();
            // validate input, copy blocks
            if (!Array.isArray(blocks)) throw new Error('Array expected');
            this.blocks = blocks.map(function(block) {
                var node = block && block.node;
                var visible = block && block.visible !== undefined ? block.visible : true;
                if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNode"])(node)) throw new TypeError('Property "node" must be a Node');
                if (typeof visible !== 'boolean') {
                    throw new TypeError('Property "visible" must be a boolean');
                }
                return {
                    node,
                    visible
                };
            });
        }
        get type() {
            return name;
        }
        get isBlockNode() {
            return true;
        }
        /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */ _compile(math, argNames) {
            var evalBlocks = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["map"])(this.blocks, function(block) {
                return {
                    evaluate: block.node._compile(math, argNames),
                    visible: block.visible
                };
            });
            return function evalBlockNodes(scope, args, context) {
                var results = [];
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forEach"])(evalBlocks, function evalBlockNode(block) {
                    var result = block.evaluate(scope, args, context);
                    if (block.visible) {
                        results.push(result);
                    }
                });
                return new ResultSet(results);
            };
        }
        /**
     * Execute a callback for each of the child blocks of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */ forEach(callback) {
            for(var i = 0; i < this.blocks.length; i++){
                callback(this.blocks[i].node, 'blocks[' + i + '].node', this);
            }
        }
        /**
     * Create a new BlockNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {BlockNode} Returns a transformed copy of the node
     */ map(callback) {
            var blocks = [];
            for(var i = 0; i < this.blocks.length; i++){
                var block = this.blocks[i];
                var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));
                blocks[i] = {
                    node,
                    visible: block.visible
                };
            }
            return new BlockNode(blocks);
        }
        /**
     * Create a clone of this node, a shallow copy
     * @return {BlockNode}
     */ clone() {
            var blocks = this.blocks.map(function(block) {
                return {
                    node: block.node,
                    visible: block.visible
                };
            });
            return new BlockNode(blocks);
        }
        /**
     * Get string representation
     * @param {Object} options
     * @return {string} str
     * @override
     */ _toString(options) {
            return this.blocks.map(function(param) {
                return param.node.toString(options) + (param.visible ? '' : ';');
            }).join('\n');
        }
        /**
     * Get a JSON representation of the node
     * @returns {Object}
     */ toJSON() {
            return {
                mathjs: name,
                blocks: this.blocks
            };
        }
        /**
     * Instantiate an BlockNode from its JSON representation
     * @param {Object} json
     *     An object structured like
     *     `{"mathjs": "BlockNode", blocks: [{node: ..., visible: false}, ...]}`,
     *     where mathjs is optional
     * @returns {BlockNode}
     */ static fromJSON(json) {
            return new BlockNode(json.blocks);
        }
        /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     * @override
     */ _toHTML(options) {
            return this.blocks.map(function(param) {
                return param.node.toHTML(options) + (param.visible ? '' : '<span class="math-separator">;</span>');
            }).join('<span class="math-separator"><br /></span>');
        }
        /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     */ _toTex(options) {
            return this.blocks.map(function(param) {
                return param.node.toTex(options) + (param.visible ? '' : ';');
            }).join('\\;\\;\n');
        }
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(BlockNode, "name", name);
    return BlockNode;
}, {
    isClass: true,
    isNode: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/node/ConditionalNode.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createConditionalNode": (()=>createConditionalNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/defineProperty.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/operators.js [app-client] (ecmascript)");
;
;
;
;
var name = 'ConditionalNode';
var dependencies = [
    'Node'
];
var createConditionalNode = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { Node } = _ref;
    /**
   * Test whether a condition is met
   * @param {*} condition
   * @returns {boolean} true if condition is true or non-zero, else false
   */ function testCondition(condition) {
        if (typeof condition === 'number' || typeof condition === 'boolean' || typeof condition === 'string') {
            return !!condition;
        }
        if (condition) {
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isBigNumber"])(condition)) {
                return !condition.isZero();
            }
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isComplex"])(condition)) {
                return !!(condition.re || condition.im);
            }
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isUnit"])(condition)) {
                return !!condition.value;
            }
        }
        if (condition === null || condition === undefined) {
            return false;
        }
        throw new TypeError('Unsupported type of condition "' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["typeOf"])(condition) + '"');
    }
    class ConditionalNode extends Node {
        /**
     * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'
     *
     * @param {Node} condition   Condition, must result in a boolean
     * @param {Node} trueExpr    Expression evaluated when condition is true
     * @param {Node} falseExpr   Expression evaluated when condition is true
     *
     * @constructor ConditionalNode
     * @extends {Node}
     */ constructor(condition, trueExpr, falseExpr){
            super();
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNode"])(condition)) {
                throw new TypeError('Parameter condition must be a Node');
            }
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNode"])(trueExpr)) {
                throw new TypeError('Parameter trueExpr must be a Node');
            }
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNode"])(falseExpr)) {
                throw new TypeError('Parameter falseExpr must be a Node');
            }
            this.condition = condition;
            this.trueExpr = trueExpr;
            this.falseExpr = falseExpr;
        }
        get type() {
            return name;
        }
        get isConditionalNode() {
            return true;
        }
        /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */ _compile(math, argNames) {
            var evalCondition = this.condition._compile(math, argNames);
            var evalTrueExpr = this.trueExpr._compile(math, argNames);
            var evalFalseExpr = this.falseExpr._compile(math, argNames);
            return function evalConditionalNode(scope, args, context) {
                return testCondition(evalCondition(scope, args, context)) ? evalTrueExpr(scope, args, context) : evalFalseExpr(scope, args, context);
            };
        }
        /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */ forEach(callback) {
            callback(this.condition, 'condition', this);
            callback(this.trueExpr, 'trueExpr', this);
            callback(this.falseExpr, 'falseExpr', this);
        }
        /**
     * Create a new ConditionalNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {ConditionalNode} Returns a transformed copy of the node
     */ map(callback) {
            return new ConditionalNode(this._ifNode(callback(this.condition, 'condition', this)), this._ifNode(callback(this.trueExpr, 'trueExpr', this)), this._ifNode(callback(this.falseExpr, 'falseExpr', this)));
        }
        /**
     * Create a clone of this node, a shallow copy
     * @return {ConditionalNode}
     */ clone() {
            return new ConditionalNode(this.condition, this.trueExpr, this.falseExpr);
        }
        /**
     * Get string representation
     * @param {Object} options
     * @return {string} str
     */ _toString(options) {
            var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
            var precedence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPrecedence"])(this, parenthesis, options && options.implicit);
            // Enclose Arguments in parentheses if they are an OperatorNode
            // or have lower or equal precedence
            // NOTE: enclosing all OperatorNodes in parentheses is a decision
            // purely based on aesthetics and readability
            var condition = this.condition.toString(options);
            var conditionPrecedence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPrecedence"])(this.condition, parenthesis, options && options.implicit);
            if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {
                condition = '(' + condition + ')';
            }
            var trueExpr = this.trueExpr.toString(options);
            var truePrecedence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPrecedence"])(this.trueExpr, parenthesis, options && options.implicit);
            if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {
                trueExpr = '(' + trueExpr + ')';
            }
            var falseExpr = this.falseExpr.toString(options);
            var falsePrecedence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPrecedence"])(this.falseExpr, parenthesis, options && options.implicit);
            if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {
                falseExpr = '(' + falseExpr + ')';
            }
            return condition + ' ? ' + trueExpr + ' : ' + falseExpr;
        }
        /**
     * Get a JSON representation of the node
     * @returns {Object}
     */ toJSON() {
            return {
                mathjs: name,
                condition: this.condition,
                trueExpr: this.trueExpr,
                falseExpr: this.falseExpr
            };
        }
        /**
     * Instantiate an ConditionalNode from its JSON representation
     * @param {Object} json
     *     An object structured like
     *     ```
     *     {"mathjs": "ConditionalNode",
     *      "condition": ...,
     *      "trueExpr": ...,
     *      "falseExpr": ...}
     *     ```
     *     where mathjs is optional
     * @returns {ConditionalNode}
     */ static fromJSON(json) {
            return new ConditionalNode(json.condition, json.trueExpr, json.falseExpr);
        }
        /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     */ _toHTML(options) {
            var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
            var precedence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPrecedence"])(this, parenthesis, options && options.implicit);
            // Enclose Arguments in parentheses if they are an OperatorNode
            // or have lower or equal precedence
            // NOTE: enclosing all OperatorNodes in parentheses is a decision
            // purely based on aesthetics and readability
            var condition = this.condition.toHTML(options);
            var conditionPrecedence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPrecedence"])(this.condition, parenthesis, options && options.implicit);
            if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {
                condition = '<span class="math-parenthesis math-round-parenthesis">(</span>' + condition + '<span class="math-parenthesis math-round-parenthesis">)</span>';
            }
            var trueExpr = this.trueExpr.toHTML(options);
            var truePrecedence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPrecedence"])(this.trueExpr, parenthesis, options && options.implicit);
            if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {
                trueExpr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + trueExpr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
            }
            var falseExpr = this.falseExpr.toHTML(options);
            var falsePrecedence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPrecedence"])(this.falseExpr, parenthesis, options && options.implicit);
            if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {
                falseExpr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + falseExpr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
            }
            return condition + '<span class="math-operator math-conditional-operator">?</span>' + trueExpr + '<span class="math-operator math-conditional-operator">:</span>' + falseExpr;
        }
        /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     */ _toTex(options) {
            return '\\begin{cases} {' + this.trueExpr.toTex(options) + '}, &\\quad{\\text{if }\\;' + this.condition.toTex(options) + '}\\\\{' + this.falseExpr.toTex(options) + '}, &\\quad{\\text{otherwise}}\\end{cases}';
        }
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(ConditionalNode, "name", name);
    return ConditionalNode;
}, {
    isClass: true,
    isNode: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/node/ConstantNode.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createConstantNode": (()=>createConstantNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/defineProperty.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/string.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$latex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/latex.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
;
;
;
;
;
var name = 'ConstantNode';
var dependencies = [
    'Node'
];
var createConstantNode = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { Node } = _ref;
    class ConstantNode extends Node {
        /**
     * A ConstantNode holds a constant value like a number or string.
     *
     * Usage:
     *
     *     new ConstantNode(2.3)
     *     new ConstantNode('hello')
     *
     * @param {*} value    Value can be any type (number, BigNumber, bigint, string, ...)
     * @constructor ConstantNode
     * @extends {Node}
     */ constructor(value){
            super();
            this.value = value;
        }
        get type() {
            return name;
        }
        get isConstantNode() {
            return true;
        }
        /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */ _compile(math, argNames) {
            var value = this.value;
            return function evalConstantNode() {
                return value;
            };
        }
        /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */ forEach(callback) {
        // nothing to do, we don't have any children
        }
        /**
     * Create a new ConstantNode with children produced by the given callback.
     * Trivial because there are no children.
     * @param {function(child: Node, path: string, parent: Node) : Node} callback
     * @returns {ConstantNode} Returns a clone of the node
     */ map(callback) {
            return this.clone();
        }
        /**
     * Create a clone of this node, a shallow copy
     * @return {ConstantNode}
     */ clone() {
            return new ConstantNode(this.value);
        }
        /**
     * Get string representation
     * @param {Object} options
     * @return {string} str
     */ _toString(options) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["format"])(this.value, options);
        }
        /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     */ _toHTML(options) {
            var value = this._toString(options);
            switch((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["typeOf"])(this.value)){
                case 'number':
                case 'bigint':
                case 'BigNumber':
                case 'Fraction':
                    return '<span class="math-number">' + value + '</span>';
                case 'string':
                    return '<span class="math-string">' + value + '</span>';
                case 'boolean':
                    return '<span class="math-boolean">' + value + '</span>';
                case 'null':
                    return '<span class="math-null-symbol">' + value + '</span>';
                case 'undefined':
                    return '<span class="math-undefined">' + value + '</span>';
                default:
                    return '<span class="math-symbol">' + value + '</span>';
            }
        }
        /**
     * Get a JSON representation of the node
     * @returns {Object}
     */ toJSON() {
            return {
                mathjs: name,
                value: this.value
            };
        }
        /**
     * Instantiate a ConstantNode from its JSON representation
     * @param {Object} json  An object structured like
     *                       `{"mathjs": "SymbolNode", value: 2.3}`,
     *                       where mathjs is optional
     * @returns {ConstantNode}
     */ static fromJSON(json) {
            return new ConstantNode(json.value);
        }
        /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     */ _toTex(options) {
            var value = this._toString(options);
            var type = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["typeOf"])(this.value);
            switch(type){
                case 'string':
                    return '\\mathtt{' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$latex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escapeLatex"])(value) + '}';
                case 'number':
                case 'BigNumber':
                    {
                        var finite = type === 'BigNumber' ? this.value.isFinite() : isFinite(this.value);
                        if (!finite) {
                            return this.value.valueOf() < 0 ? '-\\infty' : '\\infty';
                        }
                        var index = value.toLowerCase().indexOf('e');
                        if (index !== -1) {
                            return value.substring(0, index) + '\\cdot10^{' + value.substring(index + 1) + '}';
                        }
                        return value;
                    }
                case 'bigint':
                    {
                        return value.toString();
                    }
                case 'Fraction':
                    return this.value.toLatex();
                default:
                    return value;
            }
        }
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(ConstantNode, "name", name);
    return ConstantNode;
}, {
    isClass: true,
    isNode: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/node/FunctionAssignmentNode.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createFunctionAssignmentNode": (()=>createFunctionAssignmentNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/defineProperty.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$keywords$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/keywords.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/string.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/array.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$latex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/latex.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/operators.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
var name = 'FunctionAssignmentNode';
var dependencies = [
    'typed',
    'Node'
];
var createFunctionAssignmentNode = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, Node } = _ref;
    /**
   * Is parenthesis needed?
   * @param {Node} node
   * @param {Object} parenthesis
   * @param {string} implicit
   * @private
   */ function needParenthesis(node, parenthesis, implicit) {
        var precedence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPrecedence"])(node, parenthesis, implicit);
        var exprPrecedence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPrecedence"])(node.expr, parenthesis, implicit);
        return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;
    }
    class FunctionAssignmentNode extends Node {
        /**
     * @constructor FunctionAssignmentNode
     * @extends {Node}
     * Function assignment
     *
     * @param {string} name           Function name
     * @param {string[] | Array.<{name: string, type: string}>} params
     *                                Array with function parameter names, or an
     *                                array with objects containing the name
     *                                and type of the parameter
     * @param {Node} expr             The function expression
     */ constructor(name, params, expr){
            super();
            // validate input
            if (typeof name !== 'string') {
                throw new TypeError('String expected for parameter "name"');
            }
            if (!Array.isArray(params)) {
                throw new TypeError('Array containing strings or objects expected for parameter "params"');
            }
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNode"])(expr)) {
                throw new TypeError('Node expected for parameter "expr"');
            }
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$keywords$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["keywords"].has(name)) {
                throw new Error('Illegal function name, "' + name + '" is a reserved keyword');
            }
            var paramNames = new Set();
            for (var param of params){
                var _name = typeof param === 'string' ? param : param.name;
                if (paramNames.has(_name)) {
                    throw new Error("Duplicate parameter name \"".concat(_name, "\""));
                } else {
                    paramNames.add(_name);
                }
            }
            this.name = name;
            this.params = params.map(function(param) {
                return param && param.name || param;
            });
            this.types = params.map(function(param) {
                return param && param.type || 'any';
            });
            this.expr = expr;
        }
        get type() {
            return name;
        }
        get isFunctionAssignmentNode() {
            return true;
        }
        /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */ _compile(math, argNames) {
            var childArgNames = Object.create(argNames);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forEach"])(this.params, function(param) {
                childArgNames[param] = true;
            });
            // compile the function expression with the child args
            var evalExpr = this.expr._compile(math, childArgNames);
            var name = this.name;
            var params = this.params;
            var signature = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["join"])(this.types, ',');
            var syntax = name + '(' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["join"])(this.params, ', ') + ')';
            return function evalFunctionAssignmentNode(scope, args, context) {
                var signatures = {};
                signatures[signature] = function() {
                    var childArgs = Object.create(args);
                    for(var i = 0; i < params.length; i++){
                        childArgs[params[i]] = arguments[i];
                    }
                    return evalExpr(scope, childArgs, context);
                };
                var fn = typed(name, signatures);
                fn.syntax = syntax;
                scope.set(name, fn);
                return fn;
            };
        }
        /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */ forEach(callback) {
            callback(this.expr, 'expr', this);
        }
        /**
     * Create a new FunctionAssignmentNode whose children are the results of
     * calling the provided callback function for each child of the original
     * node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {FunctionAssignmentNode} Returns a transformed copy of the node
     */ map(callback) {
            var expr = this._ifNode(callback(this.expr, 'expr', this));
            return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);
        }
        /**
     * Create a clone of this node, a shallow copy
     * @return {FunctionAssignmentNode}
     */ clone() {
            return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);
        }
        /**
     * get string representation
     * @param {Object} options
     * @return {string} str
     */ _toString(options) {
            var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
            var expr = this.expr.toString(options);
            if (needParenthesis(this, parenthesis, options && options.implicit)) {
                expr = '(' + expr + ')';
            }
            return this.name + '(' + this.params.join(', ') + ') = ' + expr;
        }
        /**
     * Get a JSON representation of the node
     * @returns {Object}
     */ toJSON() {
            var types = this.types;
            return {
                mathjs: name,
                name: this.name,
                params: this.params.map(function(param, index) {
                    return {
                        name: param,
                        type: types[index]
                    };
                }),
                expr: this.expr
            };
        }
        /**
     * Instantiate an FunctionAssignmentNode from its JSON representation
     * @param {Object} json
     *     An object structured like
     *     ```
     *     {"mathjs": "FunctionAssignmentNode",
     *      name: ..., params: ..., expr: ...}
     *     ```
     *     where mathjs is optional
     * @returns {FunctionAssignmentNode}
     */ static fromJSON(json) {
            return new FunctionAssignmentNode(json.name, json.params, json.expr);
        }
        /**
     * get HTML representation
     * @param {Object} options
     * @return {string} str
     */ _toHTML(options) {
            var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
            var params = [];
            for(var i = 0; i < this.params.length; i++){
                params.push('<span class="math-symbol math-parameter">' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escape"])(this.params[i]) + '</span>');
            }
            var expr = this.expr.toHTML(options);
            if (needParenthesis(this, parenthesis, options && options.implicit)) {
                expr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + expr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
            }
            return '<span class="math-function">' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escape"])(this.name) + '</span>' + '<span class="math-parenthesis math-round-parenthesis">(</span>' + params.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-round-parenthesis">)</span>' + '<span class="math-operator math-assignment-operator ' + 'math-variable-assignment-operator math-binary-operator">=</span>' + expr;
        }
        /**
     * get LaTeX representation
     * @param {Object} options
     * @return {string} str
     */ _toTex(options) {
            var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
            var expr = this.expr.toTex(options);
            if (needParenthesis(this, parenthesis, options && options.implicit)) {
                expr = "\\left(".concat(expr, "\\right)");
            }
            return '\\mathrm{' + this.name + '}\\left(' + this.params.map(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$latex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toSymbol"]).join(',') + '\\right)=' + expr;
        }
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(FunctionAssignmentNode, "name", name);
    return FunctionAssignmentNode;
}, {
    isClass: true,
    isNode: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/node/IndexNode.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createIndexNode": (()=>createIndexNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/defineProperty.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/array.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$customs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/customs.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/string.js [app-client] (ecmascript)");
;
;
;
;
;
;
var name = 'IndexNode';
var dependencies = [
    'Node',
    'size'
];
var createIndexNode = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { Node, size } = _ref;
    class IndexNode extends Node {
        /**
     * @constructor IndexNode
     * @extends Node
     *
     * Describes a subset of a matrix or an object property.
     * Cannot be used on its own, needs to be used within an AccessorNode or
     * AssignmentNode.
     *
     * @param {Node[]} dimensions
     * @param {boolean} [dotNotation=false]
     *     Optional property describing whether this index was written using dot
     *     notation like `a.b`, or using bracket notation like `a["b"]`
     *     (which is the default). This property is used for string conversion.
     */ constructor(dimensions, dotNotation){
            super();
            this.dimensions = dimensions;
            this.dotNotation = dotNotation || false;
            // validate input
            if (!Array.isArray(dimensions) || !dimensions.every(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNode"])) {
                throw new TypeError('Array containing Nodes expected for parameter "dimensions"');
            }
            if (this.dotNotation && !this.isObjectProperty()) {
                throw new Error('dotNotation only applicable for object properties');
            }
        }
        get type() {
            return name;
        }
        get isIndexNode() {
            return true;
        }
        /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */ _compile(math, argNames) {
            // TODO: implement support for bignumber (currently bignumbers are silently
            //       reduced to numbers when changing the value to zero-based)
            // TODO: Optimization: when the range values are ConstantNodes,
            //       we can beforehand resolve the zero-based value
            // optimization for a simple object property
            var evalDimensions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["map"])(this.dimensions, function(dimension, i) {
                var needsEnd = dimension.filter((node)=>node.isSymbolNode && node.name === 'end').length > 0;
                if (needsEnd) {
                    // SymbolNode 'end' is used inside the index,
                    // like in `A[end]` or `A[end - 2]`
                    var childArgNames = Object.create(argNames);
                    childArgNames.end = true;
                    var _evalDimension = dimension._compile(math, childArgNames);
                    return function evalDimension(scope, args, context) {
                        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isMatrix"])(context) && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isArray"])(context) && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isString"])(context)) {
                            throw new TypeError('Cannot resolve "end": ' + 'context must be a Matrix, Array, or string but is ' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["typeOf"])(context));
                        }
                        var s = size(context).valueOf();
                        var childArgs = Object.create(args);
                        childArgs.end = s[i];
                        return _evalDimension(scope, childArgs, context);
                    };
                } else {
                    // SymbolNode `end` not used
                    return dimension._compile(math, argNames);
                }
            });
            var index = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$customs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getSafeProperty"])(math, 'index');
            return function evalIndexNode(scope, args, context) {
                var dimensions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["map"])(evalDimensions, function(evalDimension) {
                    return evalDimension(scope, args, context);
                });
                return index(...dimensions);
            };
        }
        /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */ forEach(callback) {
            for(var i = 0; i < this.dimensions.length; i++){
                callback(this.dimensions[i], 'dimensions[' + i + ']', this);
            }
        }
        /**
     * Create a new IndexNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {IndexNode} Returns a transformed copy of the node
     */ map(callback) {
            var dimensions = [];
            for(var i = 0; i < this.dimensions.length; i++){
                dimensions[i] = this._ifNode(callback(this.dimensions[i], 'dimensions[' + i + ']', this));
            }
            return new IndexNode(dimensions, this.dotNotation);
        }
        /**
     * Create a clone of this node, a shallow copy
     * @return {IndexNode}
     */ clone() {
            return new IndexNode(this.dimensions.slice(0), this.dotNotation);
        }
        /**
     * Test whether this IndexNode contains a single property name
     * @return {boolean}
     */ isObjectProperty() {
            return this.dimensions.length === 1 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isConstantNode"])(this.dimensions[0]) && typeof this.dimensions[0].value === 'string';
        }
        /**
     * Returns the property name if IndexNode contains a property.
     * If not, returns null.
     * @return {string | null}
     */ getObjectProperty() {
            return this.isObjectProperty() ? this.dimensions[0].value : null;
        }
        /**
     * Get string representation
     * @param {Object} options
     * @return {string} str
     */ _toString(options) {
            // format the parameters like "[1, 0:5]"
            return this.dotNotation ? '.' + this.getObjectProperty() : '[' + this.dimensions.join(', ') + ']';
        }
        /**
     * Get a JSON representation of the node
     * @returns {Object}
     */ toJSON() {
            return {
                mathjs: name,
                dimensions: this.dimensions,
                dotNotation: this.dotNotation
            };
        }
        /**
     * Instantiate an IndexNode from its JSON representation
     * @param {Object} json
     *     An object structured like
     *     `{"mathjs": "IndexNode", dimensions: [...], dotNotation: false}`,
     *     where mathjs is optional
     * @returns {IndexNode}
     */ static fromJSON(json) {
            return new IndexNode(json.dimensions, json.dotNotation);
        }
        /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     */ _toHTML(options) {
            // format the parameters like "[1, 0:5]"
            var dimensions = [];
            for(var i = 0; i < this.dimensions.length; i++){
                dimensions[i] = this.dimensions[i].toHTML();
            }
            if (this.dotNotation) {
                return '<span class="math-operator math-accessor-operator">.</span>' + '<span class="math-symbol math-property">' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escape"])(this.getObjectProperty()) + '</span>';
            } else {
                return '<span class="math-parenthesis math-square-parenthesis">[</span>' + dimensions.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
            }
        }
        /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     */ _toTex(options) {
            var dimensions = this.dimensions.map(function(range) {
                return range.toTex(options);
            });
            return this.dotNotation ? '.' + this.getObjectProperty() + '' : '_{' + dimensions.join(',') + '}';
        }
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(IndexNode, "name", name);
    return IndexNode;
}, {
    isClass: true,
    isNode: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/node/ObjectNode.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createObjectNode": (()=>createObjectNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/defineProperty.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$customs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/customs.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/object.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/string.js [app-client] (ecmascript)");
;
;
;
;
;
;
var name = 'ObjectNode';
var dependencies = [
    'Node'
];
var createObjectNode = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { Node } = _ref;
    class ObjectNode extends Node {
        /**
     * @constructor ObjectNode
     * @extends {Node}
     * Holds an object with keys/values
     * @param {Object.<string, Node>} [properties]   object with key/value pairs
     */ constructor(properties){
            super();
            this.properties = properties || {};
            // validate input
            if (properties) {
                if (!(typeof properties === 'object') || !Object.keys(properties).every(function(key) {
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNode"])(properties[key]);
                })) {
                    throw new TypeError('Object containing Nodes expected');
                }
            }
        }
        get type() {
            return name;
        }
        get isObjectNode() {
            return true;
        }
        /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */ _compile(math, argNames) {
            var evalEntries = {};
            for(var key in this.properties){
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasOwnProperty"])(this.properties, key)) {
                    // we stringify/parse the key here to resolve unicode characters,
                    // so you cannot create a key like {"co\\u006Estructor": null}
                    var stringifiedKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["stringify"])(key);
                    var parsedKey = JSON.parse(stringifiedKey);
                    var prop = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$customs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getSafeProperty"])(this.properties, key);
                    evalEntries[parsedKey] = prop._compile(math, argNames);
                }
            }
            return function evalObjectNode(scope, args, context) {
                var obj = {};
                for(var _key in evalEntries){
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasOwnProperty"])(evalEntries, _key)) {
                        obj[_key] = evalEntries[_key](scope, args, context);
                    }
                }
                return obj;
            };
        }
        /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */ forEach(callback) {
            for(var key in this.properties){
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasOwnProperty"])(this.properties, key)) {
                    callback(this.properties[key], 'properties[' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["stringify"])(key) + ']', this);
                }
            }
        }
        /**
     * Create a new ObjectNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {ObjectNode} Returns a transformed copy of the node
     */ map(callback) {
            var properties = {};
            for(var key in this.properties){
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasOwnProperty"])(this.properties, key)) {
                    properties[key] = this._ifNode(callback(this.properties[key], 'properties[' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["stringify"])(key) + ']', this));
                }
            }
            return new ObjectNode(properties);
        }
        /**
     * Create a clone of this node, a shallow copy
     * @return {ObjectNode}
     */ clone() {
            var properties = {};
            for(var key in this.properties){
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasOwnProperty"])(this.properties, key)) {
                    properties[key] = this.properties[key];
                }
            }
            return new ObjectNode(properties);
        }
        /**
     * Get string representation
     * @param {Object} options
     * @return {string} str
     * @override
     */ _toString(options) {
            var entries = [];
            for(var key in this.properties){
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasOwnProperty"])(this.properties, key)) {
                    entries.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["stringify"])(key) + ': ' + this.properties[key].toString(options));
                }
            }
            return '{' + entries.join(', ') + '}';
        }
        /**
     * Get a JSON representation of the node
     * @returns {Object}
     */ toJSON() {
            return {
                mathjs: name,
                properties: this.properties
            };
        }
        /**
     * Instantiate an OperatorNode from its JSON representation
     * @param {Object} json  An object structured like
     *                       `{"mathjs": "ObjectNode", "properties": {...}}`,
     *                       where mathjs is optional
     * @returns {ObjectNode}
     */ static fromJSON(json) {
            return new ObjectNode(json.properties);
        }
        /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     * @override
     */ _toHTML(options) {
            var entries = [];
            for(var key in this.properties){
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasOwnProperty"])(this.properties, key)) {
                    entries.push('<span class="math-symbol math-property">' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escape"])(key) + '</span>' + '<span class="math-operator math-assignment-operator ' + 'math-property-assignment-operator math-binary-operator">' + ':</span>' + this.properties[key].toHTML(options));
                }
            }
            return '<span class="math-parenthesis math-curly-parenthesis">{</span>' + entries.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-curly-parenthesis">}</span>';
        }
        /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     */ _toTex(options) {
            var entries = [];
            for(var key in this.properties){
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasOwnProperty"])(this.properties, key)) {
                    entries.push('\\mathbf{' + key + ':} & ' + this.properties[key].toTex(options) + '\\\\');
                }
            }
            var tex = '\\left\\{\\begin{array}{ll}' + entries.join('\n') + '\\end{array}\\right\\}';
            return tex;
        }
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(ObjectNode, "name", name);
    return ObjectNode;
}, {
    isClass: true,
    isNode: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/node/OperatorNode.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createOperatorNode": (()=>createOperatorNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/defineProperty.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/array.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$scope$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/scope.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/string.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$customs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/customs.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/operators.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$latex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/latex.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
var name = 'OperatorNode';
var dependencies = [
    'Node'
];
var createOperatorNode = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { Node } = _ref;
    /**
   * Returns true if the expression starts with a constant, under
   * the current parenthesization:
   * @param {Node} expression
   * @param {string} parenthesis
   * @return {boolean}
   */ function startsWithConstant(expr, parenthesis) {
        var curNode = expr;
        if (parenthesis === 'auto') {
            while((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isParenthesisNode"])(curNode))curNode = curNode.content;
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isConstantNode"])(curNode)) return true;
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isOperatorNode"])(curNode)) {
            return startsWithConstant(curNode.args[0], parenthesis);
        }
        return false;
    }
    /**
   * Calculate which parentheses are necessary. Gets an OperatorNode
   * (which is the root of the tree) and an Array of Nodes
   * (this.args) and returns an array where 'true' means that an argument
   * has to be enclosed in parentheses whereas 'false' means the opposite.
   *
   * @param {OperatorNode} root
   * @param {string} parenthesis
   * @param {Node[]} args
   * @param {boolean} latex
   * @return {boolean[]}
   * @private
   */ function calculateNecessaryParentheses(root, parenthesis, implicit, args, latex) {
        // precedence of the root OperatorNode
        var precedence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPrecedence"])(root, parenthesis, implicit);
        var associativity = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAssociativity"])(root, parenthesis);
        if (parenthesis === 'all' || args.length > 2 && root.getIdentifier() !== 'OperatorNode:add' && root.getIdentifier() !== 'OperatorNode:multiply') {
            return args.map(function(arg) {
                switch(arg.getContent().type){
                    // Nodes that don't need extra parentheses
                    case 'ArrayNode':
                    case 'ConstantNode':
                    case 'SymbolNode':
                    case 'ParenthesisNode':
                        return false;
                    default:
                        return true;
                }
            });
        }
        var result;
        switch(args.length){
            case 0:
                result = [];
                break;
            case 1:
                // unary operators
                {
                    // precedence of the operand
                    var operandPrecedence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPrecedence"])(args[0], parenthesis, implicit, root);
                    // handle special cases for LaTeX, where some of the parentheses aren't needed
                    if (latex && operandPrecedence !== null) {
                        var operandIdentifier;
                        var rootIdentifier;
                        if (parenthesis === 'keep') {
                            operandIdentifier = args[0].getIdentifier();
                            rootIdentifier = root.getIdentifier();
                        } else {
                            // Ignore Parenthesis Nodes when not in 'keep' mode
                            operandIdentifier = args[0].getContent().getIdentifier();
                            rootIdentifier = root.getContent().getIdentifier();
                        }
                        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["properties"][precedence][rootIdentifier].latexLeftParens === false) {
                            result = [
                                false
                            ];
                            break;
                        }
                        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["properties"][operandPrecedence][operandIdentifier].latexParens === false) {
                            result = [
                                false
                            ];
                            break;
                        }
                    }
                    if (operandPrecedence === null) {
                        // if the operand has no defined precedence, no parens are needed
                        result = [
                            false
                        ];
                        break;
                    }
                    if (operandPrecedence <= precedence) {
                        // if the operands precedence is lower, parens are needed
                        result = [
                            true
                        ];
                        break;
                    }
                    // otherwise, no parens needed
                    result = [
                        false
                    ];
                }
                break;
            case 2:
                // binary operators
                {
                    var lhsParens; // left hand side needs parenthesis?
                    // precedence of the left hand side
                    var lhsPrecedence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPrecedence"])(args[0], parenthesis, implicit, root);
                    // is the root node associative with the left hand side
                    var assocWithLhs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAssociativeWith"])(root, args[0], parenthesis);
                    if (lhsPrecedence === null) {
                        // if the left hand side has no defined precedence, no parens are needed
                        // FunctionNode for example
                        lhsParens = false;
                    } else if (lhsPrecedence === precedence && associativity === 'right' && !assocWithLhs) {
                        // In case of equal precedence, if the root node is left associative
                        // parens are **never** necessary for the left hand side.
                        // If it is right associative however, parens are necessary
                        // if the root node isn't associative with the left hand side
                        lhsParens = true;
                    } else if (lhsPrecedence < precedence) {
                        lhsParens = true;
                    } else {
                        lhsParens = false;
                    }
                    var rhsParens; // right hand side needs parenthesis?
                    // precedence of the right hand side
                    var rhsPrecedence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPrecedence"])(args[1], parenthesis, implicit, root);
                    // is the root node associative with the right hand side?
                    var assocWithRhs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAssociativeWith"])(root, args[1], parenthesis);
                    if (rhsPrecedence === null) {
                        // if the right hand side has no defined precedence, no parens are needed
                        // FunctionNode for example
                        rhsParens = false;
                    } else if (rhsPrecedence === precedence && associativity === 'left' && !assocWithRhs) {
                        // In case of equal precedence, if the root node is right associative
                        // parens are **never** necessary for the right hand side.
                        // If it is left associative however, parens are necessary
                        // if the root node isn't associative with the right hand side
                        rhsParens = true;
                    } else if (rhsPrecedence < precedence) {
                        rhsParens = true;
                    } else {
                        rhsParens = false;
                    }
                    // handle special cases for LaTeX, where some of the parentheses aren't needed
                    if (latex) {
                        var _rootIdentifier;
                        var lhsIdentifier;
                        var rhsIdentifier;
                        if (parenthesis === 'keep') {
                            _rootIdentifier = root.getIdentifier();
                            lhsIdentifier = root.args[0].getIdentifier();
                            rhsIdentifier = root.args[1].getIdentifier();
                        } else {
                            // Ignore ParenthesisNodes when not in 'keep' mode
                            _rootIdentifier = root.getContent().getIdentifier();
                            lhsIdentifier = root.args[0].getContent().getIdentifier();
                            rhsIdentifier = root.args[1].getContent().getIdentifier();
                        }
                        if (lhsPrecedence !== null) {
                            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["properties"][precedence][_rootIdentifier].latexLeftParens === false) {
                                lhsParens = false;
                            }
                            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["properties"][lhsPrecedence][lhsIdentifier].latexParens === false) {
                                lhsParens = false;
                            }
                        }
                        if (rhsPrecedence !== null) {
                            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["properties"][precedence][_rootIdentifier].latexRightParens === false) {
                                rhsParens = false;
                            }
                            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["properties"][rhsPrecedence][rhsIdentifier].latexParens === false) {
                                rhsParens = false;
                            }
                        }
                    }
                    result = [
                        lhsParens,
                        rhsParens
                    ];
                }
                break;
            default:
                if (root.getIdentifier() === 'OperatorNode:add' || root.getIdentifier() === 'OperatorNode:multiply') {
                    result = args.map(function(arg) {
                        var argPrecedence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPrecedence"])(arg, parenthesis, implicit, root);
                        var assocWithArg = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAssociativeWith"])(root, arg, parenthesis);
                        var argAssociativity = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAssociativity"])(arg, parenthesis);
                        if (argPrecedence === null) {
                            // if the argument has no defined precedence, no parens are needed
                            return false;
                        } else if (precedence === argPrecedence && associativity === argAssociativity && !assocWithArg) {
                            return true;
                        } else if (argPrecedence < precedence) {
                            return true;
                        }
                        return false;
                    });
                }
                break;
        }
        // Handles an edge case of parentheses with implicit multiplication
        // of ConstantNode.
        // In that case, parenthesize ConstantNodes that follow an unparenthesized
        // expression, even though they normally wouldn't be printed.
        if (args.length >= 2 && root.getIdentifier() === 'OperatorNode:multiply' && root.implicit && parenthesis !== 'all' && implicit === 'hide') {
            for(var i = 1; i < result.length; ++i){
                if (startsWithConstant(args[i], parenthesis) && !result[i - 1] && (parenthesis !== 'keep' || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isParenthesisNode"])(args[i - 1]))) {
                    result[i] = true;
                }
            }
        }
        return result;
    }
    class OperatorNode extends Node {
        /**
     * @constructor OperatorNode
     * @extends {Node}
     * An operator with two arguments, like 2+3
     *
     * @param {string} op           Operator name, for example '+'
     * @param {string} fn           Function name, for example 'add'
     * @param {Node[]} args         Operator arguments
     * @param {boolean} [implicit]  Is this an implicit multiplication?
     * @param {boolean} [isPercentage] Is this an percentage Operation?
     */ constructor(op, fn, args, implicit, isPercentage){
            super();
            // validate input
            if (typeof op !== 'string') {
                throw new TypeError('string expected for parameter "op"');
            }
            if (typeof fn !== 'string') {
                throw new TypeError('string expected for parameter "fn"');
            }
            if (!Array.isArray(args) || !args.every(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNode"])) {
                throw new TypeError('Array containing Nodes expected for parameter "args"');
            }
            this.implicit = implicit === true;
            this.isPercentage = isPercentage === true;
            this.op = op;
            this.fn = fn;
            this.args = args || [];
        }
        get type() {
            return name;
        }
        get isOperatorNode() {
            return true;
        }
        /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */ _compile(math, argNames) {
            // validate fn
            if (typeof this.fn !== 'string' || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$customs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSafeMethod"])(math, this.fn)) {
                if (!math[this.fn]) {
                    throw new Error('Function ' + this.fn + ' missing in provided namespace "math"');
                } else {
                    throw new Error('No access to function "' + this.fn + '"');
                }
            }
            var fn = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$customs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getSafeProperty"])(math, this.fn);
            var evalArgs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["map"])(this.args, function(arg) {
                return arg._compile(math, argNames);
            });
            if (typeof fn === 'function' && fn.rawArgs === true) {
                // pass unevaluated parameters (nodes) to the function
                // "raw" evaluation
                var rawArgs = this.args;
                return function evalOperatorNode(scope, args, context) {
                    return fn(rawArgs, math, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$scope$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSubScope"])(scope, args));
                };
            } else if (evalArgs.length === 1) {
                var evalArg0 = evalArgs[0];
                return function evalOperatorNode(scope, args, context) {
                    return fn(evalArg0(scope, args, context));
                };
            } else if (evalArgs.length === 2) {
                var _evalArg = evalArgs[0];
                var evalArg1 = evalArgs[1];
                return function evalOperatorNode(scope, args, context) {
                    return fn(_evalArg(scope, args, context), evalArg1(scope, args, context));
                };
            } else {
                return function evalOperatorNode(scope, args, context) {
                    return fn.apply(null, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["map"])(evalArgs, function(evalArg) {
                        return evalArg(scope, args, context);
                    }));
                };
            }
        }
        /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */ forEach(callback) {
            for(var i = 0; i < this.args.length; i++){
                callback(this.args[i], 'args[' + i + ']', this);
            }
        }
        /**
     * Create a new OperatorNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {OperatorNode} Returns a transformed copy of the node
     */ map(callback) {
            var args = [];
            for(var i = 0; i < this.args.length; i++){
                args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
            }
            return new OperatorNode(this.op, this.fn, args, this.implicit, this.isPercentage);
        }
        /**
     * Create a clone of this node, a shallow copy
     * @return {OperatorNode}
     */ clone() {
            return new OperatorNode(this.op, this.fn, this.args.slice(0), this.implicit, this.isPercentage);
        }
        /**
     * Check whether this is an unary OperatorNode:
     * has exactly one argument, like `-a`.
     * @return {boolean}
     *     Returns true when an unary operator node, false otherwise.
     */ isUnary() {
            return this.args.length === 1;
        }
        /**
     * Check whether this is a binary OperatorNode:
     * has exactly two arguments, like `a + b`.
     * @return {boolean}
     *     Returns true when a binary operator node, false otherwise.
     */ isBinary() {
            return this.args.length === 2;
        }
        /**
     * Get string representation.
     * @param {Object} options
     * @return {string} str
     */ _toString(options) {
            var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
            var implicit = options && options.implicit ? options.implicit : 'hide';
            var args = this.args;
            var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);
            if (args.length === 1) {
                // unary operators
                var assoc = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAssociativity"])(this, parenthesis);
                var operand = args[0].toString(options);
                if (parens[0]) {
                    operand = '(' + operand + ')';
                }
                // for example for "not", we want a space between operand and argument
                var opIsNamed = /[a-zA-Z]+/.test(this.op);
                if (assoc === 'right') {
                    // prefix operator
                    return this.op + (opIsNamed ? ' ' : '') + operand;
                } else if (assoc === 'left') {
                    // postfix
                    return operand + (opIsNamed ? ' ' : '') + this.op;
                }
                // fall back to postfix
                return operand + this.op;
            } else if (args.length === 2) {
                var lhs = args[0].toString(options); // left hand side
                var rhs = args[1].toString(options); // right hand side
                if (parens[0]) {
                    // left hand side in parenthesis?
                    lhs = '(' + lhs + ')';
                }
                if (parens[1]) {
                    // right hand side in parenthesis?
                    rhs = '(' + rhs + ')';
                }
                if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
                    return lhs + ' ' + rhs;
                }
                return lhs + ' ' + this.op + ' ' + rhs;
            } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
                var stringifiedArgs = args.map(function(arg, index) {
                    arg = arg.toString(options);
                    if (parens[index]) {
                        // put in parenthesis?
                        arg = '(' + arg + ')';
                    }
                    return arg;
                });
                if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
                    return stringifiedArgs.join(' ');
                }
                return stringifiedArgs.join(' ' + this.op + ' ');
            } else {
                // fallback to formatting as a function call
                return this.fn + '(' + this.args.join(', ') + ')';
            }
        }
        /**
     * Get a JSON representation of the node
     * @returns {Object}
     */ toJSON() {
            return {
                mathjs: name,
                op: this.op,
                fn: this.fn,
                args: this.args,
                implicit: this.implicit,
                isPercentage: this.isPercentage
            };
        }
        /**
     * Instantiate an OperatorNode from its JSON representation
     * @param {Object} json
     *     An object structured like
     *     ```
     *     {"mathjs": "OperatorNode",
     *      "op": "+", "fn": "add", "args": [...],
     *      "implicit": false,
     *      "isPercentage":false}
     *     ```
     *     where mathjs is optional
     * @returns {OperatorNode}
     */ static fromJSON(json) {
            return new OperatorNode(json.op, json.fn, json.args, json.implicit, json.isPercentage);
        }
        /**
     * Get HTML representation.
     * @param {Object} options
     * @return {string} str
     */ _toHTML(options) {
            var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
            var implicit = options && options.implicit ? options.implicit : 'hide';
            var args = this.args;
            var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);
            if (args.length === 1) {
                // unary operators
                var assoc = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAssociativity"])(this, parenthesis);
                var operand = args[0].toHTML(options);
                if (parens[0]) {
                    operand = '<span class="math-parenthesis math-round-parenthesis">(</span>' + operand + '<span class="math-parenthesis math-round-parenthesis">)</span>';
                }
                if (assoc === 'right') {
                    // prefix operator
                    return '<span class="math-operator math-unary-operator ' + 'math-lefthand-unary-operator">' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escape"])(this.op) + '</span>' + operand;
                } else {
                    // postfix when assoc === 'left' or undefined
                    return operand + '<span class="math-operator math-unary-operator ' + 'math-righthand-unary-operator">' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escape"])(this.op) + '</span>';
                }
            } else if (args.length === 2) {
                // binary operatoes
                var lhs = args[0].toHTML(options); // left hand side
                var rhs = args[1].toHTML(options); // right hand side
                if (parens[0]) {
                    // left hand side in parenthesis?
                    lhs = '<span class="math-parenthesis math-round-parenthesis">(</span>' + lhs + '<span class="math-parenthesis math-round-parenthesis">)</span>';
                }
                if (parens[1]) {
                    // right hand side in parenthesis?
                    rhs = '<span class="math-parenthesis math-round-parenthesis">(</span>' + rhs + '<span class="math-parenthesis math-round-parenthesis">)</span>';
                }
                if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
                    return lhs + '<span class="math-operator math-binary-operator ' + 'math-implicit-binary-operator"></span>' + rhs;
                }
                return lhs + '<span class="math-operator math-binary-operator ' + 'math-explicit-binary-operator">' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escape"])(this.op) + '</span>' + rhs;
            } else {
                var stringifiedArgs = args.map(function(arg, index) {
                    arg = arg.toHTML(options);
                    if (parens[index]) {
                        // put in parenthesis?
                        arg = '<span class="math-parenthesis math-round-parenthesis">(</span>' + arg + '<span class="math-parenthesis math-round-parenthesis">)</span>';
                    }
                    return arg;
                });
                if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
                    if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
                        return stringifiedArgs.join('<span class="math-operator math-binary-operator ' + 'math-implicit-binary-operator"></span>');
                    }
                    return stringifiedArgs.join('<span class="math-operator math-binary-operator ' + 'math-explicit-binary-operator">' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escape"])(this.op) + '</span>');
                } else {
                    // fallback to formatting as a function call
                    return '<span class="math-function">' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escape"])(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">' + '(</span>' + stringifiedArgs.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
                }
            }
        }
        /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     */ _toTex(options) {
            var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
            var implicit = options && options.implicit ? options.implicit : 'hide';
            var args = this.args;
            var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, true);
            var op = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$latex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["latexOperators"][this.fn];
            op = typeof op === 'undefined' ? this.op : op; // fall back to using this.op
            if (args.length === 1) {
                // unary operators
                var assoc = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAssociativity"])(this, parenthesis);
                var operand = args[0].toTex(options);
                if (parens[0]) {
                    operand = "\\left(".concat(operand, "\\right)");
                }
                if (assoc === 'right') {
                    // prefix operator
                    return op + operand;
                } else if (assoc === 'left') {
                    // postfix operator
                    return operand + op;
                }
                // fall back to postfix
                return operand + op;
            } else if (args.length === 2) {
                // binary operators
                var lhs = args[0]; // left hand side
                var lhsTex = lhs.toTex(options);
                if (parens[0]) {
                    lhsTex = "\\left(".concat(lhsTex, "\\right)");
                }
                var rhs = args[1]; // right hand side
                var rhsTex = rhs.toTex(options);
                if (parens[1]) {
                    rhsTex = "\\left(".concat(rhsTex, "\\right)");
                }
                // handle some exceptions (due to the way LaTeX works)
                var lhsIdentifier;
                if (parenthesis === 'keep') {
                    lhsIdentifier = lhs.getIdentifier();
                } else {
                    // Ignore ParenthesisNodes if in 'keep' mode
                    lhsIdentifier = lhs.getContent().getIdentifier();
                }
                switch(this.getIdentifier()){
                    case 'OperatorNode:divide':
                        // op contains '\\frac' at this point
                        return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';
                    case 'OperatorNode:pow':
                        lhsTex = '{' + lhsTex + '}';
                        rhsTex = '{' + rhsTex + '}';
                        switch(lhsIdentifier){
                            case 'ConditionalNode':
                            case 'OperatorNode:divide':
                                lhsTex = "\\left(".concat(lhsTex, "\\right)");
                        }
                        break;
                    case 'OperatorNode:multiply':
                        if (this.implicit && implicit === 'hide') {
                            return lhsTex + '~' + rhsTex;
                        }
                }
                return lhsTex + op + rhsTex;
            } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
                var texifiedArgs = args.map(function(arg, index) {
                    arg = arg.toTex(options);
                    if (parens[index]) {
                        arg = "\\left(".concat(arg, "\\right)");
                    }
                    return arg;
                });
                if (this.getIdentifier() === 'OperatorNode:multiply' && this.implicit && implicit === 'hide') {
                    return texifiedArgs.join('~');
                }
                return texifiedArgs.join(op);
            } else {
                // fall back to formatting as a function call
                // as this is a fallback, it doesn't use
                // fancy function names
                return '\\mathrm{' + this.fn + '}\\left(' + args.map(function(arg) {
                    return arg.toTex(options);
                }).join(',') + '\\right)';
            }
        }
        /**
     * Get identifier.
     * @return {string}
     */ getIdentifier() {
            return this.type + ':' + this.fn;
        }
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(OperatorNode, "name", name);
    return OperatorNode;
}, {
    isClass: true,
    isNode: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/node/ParenthesisNode.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createParenthesisNode": (()=>createParenthesisNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/defineProperty.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
;
;
;
var name = 'ParenthesisNode';
var dependencies = [
    'Node'
];
var createParenthesisNode = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { Node } = _ref;
    class ParenthesisNode extends Node {
        /**
     * @constructor ParenthesisNode
     * @extends {Node}
     * A parenthesis node describes manual parenthesis from the user input
     * @param {Node} content
     * @extends {Node}
     */ constructor(content){
            super();
            // validate input
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNode"])(content)) {
                throw new TypeError('Node expected for parameter "content"');
            }
            this.content = content;
        }
        get type() {
            return name;
        }
        get isParenthesisNode() {
            return true;
        }
        /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */ _compile(math, argNames) {
            return this.content._compile(math, argNames);
        }
        /**
     * Get the content of the current Node.
     * @return {Node} content
     * @override
     **/ getContent() {
            return this.content.getContent();
        }
        /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */ forEach(callback) {
            callback(this.content, 'content', this);
        }
        /**
     * Create a new ParenthesisNode whose child is the result of calling
     * the provided callback function on the child of this node.
     * @param {function(child: Node, path: string, parent: Node) : Node} callback
     * @returns {ParenthesisNode} Returns a clone of the node
     */ map(callback) {
            var content = callback(this.content, 'content', this);
            return new ParenthesisNode(content);
        }
        /**
     * Create a clone of this node, a shallow copy
     * @return {ParenthesisNode}
     */ clone() {
            return new ParenthesisNode(this.content);
        }
        /**
     * Get string representation
     * @param {Object} options
     * @return {string} str
     * @override
     */ _toString(options) {
            if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
                return '(' + this.content.toString(options) + ')';
            }
            return this.content.toString(options);
        }
        /**
     * Get a JSON representation of the node
     * @returns {Object}
     */ toJSON() {
            return {
                mathjs: name,
                content: this.content
            };
        }
        /**
     * Instantiate an ParenthesisNode from its JSON representation
     * @param {Object} json  An object structured like
     *                       `{"mathjs": "ParenthesisNode", "content": ...}`,
     *                       where mathjs is optional
     * @returns {ParenthesisNode}
     */ static fromJSON(json) {
            return new ParenthesisNode(json.content);
        }
        /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     * @override
     */ _toHTML(options) {
            if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
                return '<span class="math-parenthesis math-round-parenthesis">(</span>' + this.content.toHTML(options) + '<span class="math-parenthesis math-round-parenthesis">)</span>';
            }
            return this.content.toHTML(options);
        }
        /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     * @override
     */ _toTex(options) {
            if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
                return "\\left(".concat(this.content.toTex(options), "\\right)");
            }
            return this.content.toTex(options);
        }
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(ParenthesisNode, "name", name);
    return ParenthesisNode;
}, {
    isClass: true,
    isNode: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/node/RangeNode.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createRangeNode": (()=>createRangeNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/defineProperty.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/operators.js [app-client] (ecmascript)");
;
;
;
;
var name = 'RangeNode';
var dependencies = [
    'Node'
];
var createRangeNode = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { Node } = _ref;
    /**
   * Calculate the necessary parentheses
   * @param {Node} node
   * @param {string} parenthesis
   * @param {string} implicit
   * @return {Object} parentheses
   * @private
   */ function calculateNecessaryParentheses(node, parenthesis, implicit) {
        var precedence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPrecedence"])(node, parenthesis, implicit);
        var parens = {};
        var startPrecedence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPrecedence"])(node.start, parenthesis, implicit);
        parens.start = startPrecedence !== null && startPrecedence <= precedence || parenthesis === 'all';
        if (node.step) {
            var stepPrecedence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPrecedence"])(node.step, parenthesis, implicit);
            parens.step = stepPrecedence !== null && stepPrecedence <= precedence || parenthesis === 'all';
        }
        var endPrecedence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPrecedence"])(node.end, parenthesis, implicit);
        parens.end = endPrecedence !== null && endPrecedence <= precedence || parenthesis === 'all';
        return parens;
    }
    class RangeNode extends Node {
        /**
     * @constructor RangeNode
     * @extends {Node}
     * create a range
     * @param {Node} start  included lower-bound
     * @param {Node} end    included upper-bound
     * @param {Node} [step] optional step
     */ constructor(start, end, step){
            super();
            // validate inputs
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNode"])(start)) throw new TypeError('Node expected');
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNode"])(end)) throw new TypeError('Node expected');
            if (step && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNode"])(step)) throw new TypeError('Node expected');
            if (arguments.length > 3) throw new Error('Too many arguments');
            this.start = start; // included lower-bound
            this.end = end; // included upper-bound
            this.step = step || null; // optional step
        }
        get type() {
            return name;
        }
        get isRangeNode() {
            return true;
        }
        /**
     * Check whether the RangeNode needs the `end` symbol to be defined.
     * This end is the size of the Matrix in current dimension.
     * @return {boolean}
     */ needsEnd() {
            // find all `end` symbols in this RangeNode
            var endSymbols = this.filter(function(node) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSymbolNode"])(node) && node.name === 'end';
            });
            return endSymbols.length > 0;
        }
        /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */ _compile(math, argNames) {
            var range = math.range;
            var evalStart = this.start._compile(math, argNames);
            var evalEnd = this.end._compile(math, argNames);
            if (this.step) {
                var evalStep = this.step._compile(math, argNames);
                return function evalRangeNode(scope, args, context) {
                    return range(evalStart(scope, args, context), evalEnd(scope, args, context), evalStep(scope, args, context));
                };
            } else {
                return function evalRangeNode(scope, args, context) {
                    return range(evalStart(scope, args, context), evalEnd(scope, args, context));
                };
            }
        }
        /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */ forEach(callback) {
            callback(this.start, 'start', this);
            callback(this.end, 'end', this);
            if (this.step) {
                callback(this.step, 'step', this);
            }
        }
        /**
     * Create a new RangeNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {RangeNode} Returns a transformed copy of the node
     */ map(callback) {
            return new RangeNode(this._ifNode(callback(this.start, 'start', this)), this._ifNode(callback(this.end, 'end', this)), this.step && this._ifNode(callback(this.step, 'step', this)));
        }
        /**
     * Create a clone of this node, a shallow copy
     * @return {RangeNode}
     */ clone() {
            return new RangeNode(this.start, this.end, this.step && this.step);
        }
        /**
     * Get string representation
     * @param {Object} options
     * @return {string} str
     */ _toString(options) {
            var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
            var parens = calculateNecessaryParentheses(this, parenthesis, options && options.implicit);
            // format string as start:step:stop
            var str;
            var start = this.start.toString(options);
            if (parens.start) {
                start = '(' + start + ')';
            }
            str = start;
            if (this.step) {
                var step = this.step.toString(options);
                if (parens.step) {
                    step = '(' + step + ')';
                }
                str += ':' + step;
            }
            var end = this.end.toString(options);
            if (parens.end) {
                end = '(' + end + ')';
            }
            str += ':' + end;
            return str;
        }
        /**
     * Get a JSON representation of the node
     * @returns {Object}
     */ toJSON() {
            return {
                mathjs: name,
                start: this.start,
                end: this.end,
                step: this.step
            };
        }
        /**
     * Instantiate an RangeNode from its JSON representation
     * @param {Object} json
     *     An object structured like
     *     `{"mathjs": "RangeNode", "start": ..., "end": ..., "step": ...}`,
     *     where mathjs is optional
     * @returns {RangeNode}
     */ static fromJSON(json) {
            return new RangeNode(json.start, json.end, json.step);
        }
        /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     */ _toHTML(options) {
            var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
            var parens = calculateNecessaryParentheses(this, parenthesis, options && options.implicit);
            // format string as start:step:stop
            var str;
            var start = this.start.toHTML(options);
            if (parens.start) {
                start = '<span class="math-parenthesis math-round-parenthesis">(</span>' + start + '<span class="math-parenthesis math-round-parenthesis">)</span>';
            }
            str = start;
            if (this.step) {
                var step = this.step.toHTML(options);
                if (parens.step) {
                    step = '<span class="math-parenthesis math-round-parenthesis">(</span>' + step + '<span class="math-parenthesis math-round-parenthesis">)</span>';
                }
                str += '<span class="math-operator math-range-operator">:</span>' + step;
            }
            var end = this.end.toHTML(options);
            if (parens.end) {
                end = '<span class="math-parenthesis math-round-parenthesis">(</span>' + end + '<span class="math-parenthesis math-round-parenthesis">)</span>';
            }
            str += '<span class="math-operator math-range-operator">:</span>' + end;
            return str;
        }
        /**
     * Get LaTeX representation
     * @params {Object} options
     * @return {string} str
     */ _toTex(options) {
            var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
            var parens = calculateNecessaryParentheses(this, parenthesis, options && options.implicit);
            var str = this.start.toTex(options);
            if (parens.start) {
                str = "\\left(".concat(str, "\\right)");
            }
            if (this.step) {
                var step = this.step.toTex(options);
                if (parens.step) {
                    step = "\\left(".concat(step, "\\right)");
                }
                str += ':' + step;
            }
            var end = this.end.toTex(options);
            if (parens.end) {
                end = "\\left(".concat(end, "\\right)");
            }
            str += ':' + end;
            return str;
        }
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(RangeNode, "name", name);
    return RangeNode;
}, {
    isClass: true,
    isNode: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/node/RelationalNode.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createRelationalNode": (()=>createRelationalNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/defineProperty.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/operators.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/string.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$customs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/customs.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$latex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/latex.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
;
;
;
;
;
;
var name = 'RelationalNode';
var dependencies = [
    'Node'
];
var createRelationalNode = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { Node } = _ref;
    var operatorMap = {
        equal: '==',
        unequal: '!=',
        smaller: '<',
        larger: '>',
        smallerEq: '<=',
        largerEq: '>='
    };
    class RelationalNode extends Node {
        /**
     * A node representing a chained conditional expression, such as 'x > y > z'
     *
     * @param {String[]} conditionals
     *     An array of conditional operators used to compare the parameters
     * @param {Node[]} params
     *     The parameters that will be compared
     *
     * @constructor RelationalNode
     * @extends {Node}
     */ constructor(conditionals, params){
            super();
            if (!Array.isArray(conditionals)) {
                throw new TypeError('Parameter conditionals must be an array');
            }
            if (!Array.isArray(params)) {
                throw new TypeError('Parameter params must be an array');
            }
            if (conditionals.length !== params.length - 1) {
                throw new TypeError('Parameter params must contain exactly one more element ' + 'than parameter conditionals');
            }
            this.conditionals = conditionals;
            this.params = params;
        }
        get type() {
            return name;
        }
        get isRelationalNode() {
            return true;
        }
        /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */ _compile(math, argNames) {
            var self = this;
            var compiled = this.params.map((p)=>p._compile(math, argNames));
            return function evalRelationalNode(scope, args, context) {
                var evalLhs;
                var evalRhs = compiled[0](scope, args, context);
                for(var i = 0; i < self.conditionals.length; i++){
                    evalLhs = evalRhs;
                    evalRhs = compiled[i + 1](scope, args, context);
                    var condFn = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$customs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getSafeProperty"])(math, self.conditionals[i]);
                    if (!condFn(evalLhs, evalRhs)) {
                        return false;
                    }
                }
                return true;
            };
        }
        /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */ forEach(callback) {
            this.params.forEach((n, i)=>callback(n, 'params[' + i + ']', this), this);
        }
        /**
     * Create a new RelationalNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {RelationalNode} Returns a transformed copy of the node
     */ map(callback) {
            return new RelationalNode(this.conditionals.slice(), this.params.map((n, i)=>this._ifNode(callback(n, 'params[' + i + ']', this)), this));
        }
        /**
     * Create a clone of this node, a shallow copy
     * @return {RelationalNode}
     */ clone() {
            return new RelationalNode(this.conditionals, this.params);
        }
        /**
     * Get string representation.
     * @param {Object} options
     * @return {string} str
     */ _toString(options) {
            var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
            var precedence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPrecedence"])(this, parenthesis, options && options.implicit);
            var paramStrings = this.params.map(function(p, index) {
                var paramPrecedence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPrecedence"])(p, parenthesis, options && options.implicit);
                return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '(' + p.toString(options) + ')' : p.toString(options);
            });
            var ret = paramStrings[0];
            for(var i = 0; i < this.conditionals.length; i++){
                ret += ' ' + operatorMap[this.conditionals[i]];
                ret += ' ' + paramStrings[i + 1];
            }
            return ret;
        }
        /**
     * Get a JSON representation of the node
     * @returns {Object}
     */ toJSON() {
            return {
                mathjs: name,
                conditionals: this.conditionals,
                params: this.params
            };
        }
        /**
     * Instantiate a RelationalNode from its JSON representation
     * @param {Object} json
     *     An object structured like
     *     `{"mathjs": "RelationalNode", "conditionals": ..., "params": ...}`,
     *     where mathjs is optional
     * @returns {RelationalNode}
     */ static fromJSON(json) {
            return new RelationalNode(json.conditionals, json.params);
        }
        /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     */ _toHTML(options) {
            var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
            var precedence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPrecedence"])(this, parenthesis, options && options.implicit);
            var paramStrings = this.params.map(function(p, index) {
                var paramPrecedence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPrecedence"])(p, parenthesis, options && options.implicit);
                return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '<span class="math-parenthesis math-round-parenthesis">(</span>' + p.toHTML(options) + '<span class="math-parenthesis math-round-parenthesis">)</span>' : p.toHTML(options);
            });
            var ret = paramStrings[0];
            for(var i = 0; i < this.conditionals.length; i++){
                ret += '<span class="math-operator math-binary-operator ' + 'math-explicit-binary-operator">' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escape"])(operatorMap[this.conditionals[i]]) + '</span>' + paramStrings[i + 1];
            }
            return ret;
        }
        /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     */ _toTex(options) {
            var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
            var precedence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPrecedence"])(this, parenthesis, options && options.implicit);
            var paramStrings = this.params.map(function(p, index) {
                var paramPrecedence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$operators$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPrecedence"])(p, parenthesis, options && options.implicit);
                return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '\\left(' + p.toTex(options) + '\right)' : p.toTex(options);
            });
            var ret = paramStrings[0];
            for(var i = 0; i < this.conditionals.length; i++){
                ret += __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$latex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["latexOperators"][this.conditionals[i]] + paramStrings[i + 1];
            }
            return ret;
        }
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(RelationalNode, "name", name);
    return RelationalNode;
}, {
    isClass: true,
    isNode: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/node/SymbolNode.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createSymbolNode": (()=>createSymbolNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/string.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$customs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/customs.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$latex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/latex.js [app-client] (ecmascript)");
;
;
;
;
var name = 'SymbolNode';
var dependencies = [
    'math',
    '?Unit',
    'Node'
];
var createSymbolNode = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { math, Unit, Node } = _ref;
    /**
   * Check whether some name is a valueless unit like "inch".
   * @param {string} name
   * @return {boolean}
   */ function isValuelessUnit(name) {
        return Unit ? Unit.isValuelessUnit(name) : false;
    }
    class SymbolNode extends Node {
        /**
     * @constructor SymbolNode
     * @extends {Node}
     * A symbol node can hold and resolve a symbol
     * @param {string} name
     * @extends {Node}
     */ constructor(name){
            super();
            // validate input
            if (typeof name !== 'string') {
                throw new TypeError('String expected for parameter "name"');
            }
            this.name = name;
        }
        get type() {
            return 'SymbolNode';
        }
        get isSymbolNode() {
            return true;
        }
        /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */ _compile(math, argNames) {
            var name = this.name;
            if (argNames[name] === true) {
                // this is a FunctionAssignment argument
                // (like an x when inside the expression of a function
                // assignment `f(x) = ...`)
                return function(scope, args, context) {
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$customs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getSafeProperty"])(args, name);
                };
            } else if (name in math) {
                return function(scope, args, context) {
                    return scope.has(name) ? scope.get(name) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$customs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getSafeProperty"])(math, name);
                };
            } else {
                var isUnit = isValuelessUnit(name);
                return function(scope, args, context) {
                    return scope.has(name) ? scope.get(name) : isUnit ? new Unit(null, name) : SymbolNode.onUndefinedSymbol(name);
                };
            }
        }
        /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */ forEach(callback) {
        // nothing to do, we don't have any children
        }
        /**
     * Create a new SymbolNode with children produced by the given callback.
     * Trivial since a SymbolNode has no children
     * @param {function(child: Node, path: string, parent: Node) : Node} callback
     * @returns {SymbolNode} Returns a clone of the node
     */ map(callback) {
            return this.clone();
        }
        /**
     * Throws an error 'Undefined symbol {name}'
     * @param {string} name
     */ static onUndefinedSymbol(name) {
            throw new Error('Undefined symbol ' + name);
        }
        /**
     * Create a clone of this node, a shallow copy
     * @return {SymbolNode}
     */ clone() {
            return new SymbolNode(this.name);
        }
        /**
     * Get string representation
     * @param {Object} options
     * @return {string} str
     * @override
     */ _toString(options) {
            return this.name;
        }
        /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     * @override
     */ _toHTML(options) {
            var name = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escape"])(this.name);
            if (name === 'true' || name === 'false') {
                return '<span class="math-symbol math-boolean">' + name + '</span>';
            } else if (name === 'i') {
                return '<span class="math-symbol math-imaginary-symbol">' + name + '</span>';
            } else if (name === 'Infinity') {
                return '<span class="math-symbol math-infinity-symbol">' + name + '</span>';
            } else if (name === 'NaN') {
                return '<span class="math-symbol math-nan-symbol">' + name + '</span>';
            } else if (name === 'null') {
                return '<span class="math-symbol math-null-symbol">' + name + '</span>';
            } else if (name === 'undefined') {
                return '<span class="math-symbol math-undefined-symbol">' + name + '</span>';
            }
            return '<span class="math-symbol">' + name + '</span>';
        }
        /**
     * Get a JSON representation of the node
     * @returns {Object}
     */ toJSON() {
            return {
                mathjs: 'SymbolNode',
                name: this.name
            };
        }
        /**
     * Instantiate a SymbolNode from its JSON representation
     * @param {Object} json  An object structured like
     *                       `{"mathjs": "SymbolNode", name: "x"}`,
     *                       where mathjs is optional
     * @returns {SymbolNode}
     */ static fromJSON(json) {
            return new SymbolNode(json.name);
        }
        /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     * @override
     */ _toTex(options) {
            var isUnit = false;
            if (typeof math[this.name] === 'undefined' && isValuelessUnit(this.name)) {
                isUnit = true;
            }
            var symbol = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$latex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toSymbol"])(this.name, isUnit);
            if (symbol[0] === '\\') {
                // no space needed if the symbol starts with '\'
                return symbol;
            }
            // the space prevents symbols from breaking stuff like '\cdot'
            // if it's written right before the symbol
            return ' ' + symbol;
        }
    }
    return SymbolNode;
}, {
    isClass: true,
    isNode: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/node/FunctionNode.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createFunctionNode": (()=>createFunctionNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/defineProperty.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/string.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/object.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$customs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/customs.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$scope$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/scope.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$latex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/latex.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
var name = 'FunctionNode';
var dependencies = [
    'math',
    'Node',
    'SymbolNode'
];
var createFunctionNode = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var _FunctionNode;
    var { math, Node, SymbolNode } = _ref;
    /* format to fixed length */ var strin = (entity)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["format"])(entity, {
            truncate: 78
        });
    /*
   * Expand a LaTeX template
   *
   * @param {string} template
   * @param {Node} node
   * @param {Object} options
   * @private
   **/ function expandTemplate(template, node, options) {
        var latex = '';
        // Match everything of the form ${identifier} or ${identifier[2]} or $$
        // while submatching identifier and 2 (in the second case)
        var regex = /\$(?:\{([a-z_][a-z_0-9]*)(?:\[([0-9]+)\])?\}|\$)/gi;
        var inputPos = 0; // position in the input string
        var match;
        while((match = regex.exec(template)) !== null){
            // go through all matches
            // add everything in front of the match to the LaTeX string
            latex += template.substring(inputPos, match.index);
            inputPos = match.index;
            if (match[0] === '$$') {
                // escaped dollar sign
                latex += '$';
                inputPos++;
            } else {
                // template parameter
                inputPos += match[0].length;
                var property = node[match[1]];
                if (!property) {
                    throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');
                }
                if (match[2] === undefined) {
                    // no square brackets
                    switch(typeof property){
                        case 'string':
                            latex += property;
                            break;
                        case 'object':
                            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNode"])(property)) {
                                latex += property.toTex(options);
                            } else if (Array.isArray(property)) {
                                // make array of Nodes into comma separated list
                                latex += property.map(function(arg, index) {
                                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNode"])(arg)) {
                                        return arg.toTex(options);
                                    }
                                    throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');
                                }).join(',');
                            } else {
                                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
                            }
                            break;
                        default:
                            throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
                    }
                } else {
                    // with square brackets
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNode"])(property[match[2]] && property[match[2]])) {
                        latex += property[match[2]].toTex(options);
                    } else {
                        throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');
                    }
                }
            }
        }
        latex += template.slice(inputPos); // append rest of the template
        return latex;
    }
    class FunctionNode extends Node {
        /**
     * @constructor FunctionNode
     * @extends {./Node}
     * invoke a list with arguments on a node
     * @param {./Node | string} fn
     *     Item resolving to a function on which to invoke
     *     the arguments, typically a SymbolNode or AccessorNode
     * @param {./Node[]} args
     */ constructor(fn, args){
            super();
            if (typeof fn === 'string') {
                fn = new SymbolNode(fn);
            }
            // validate input
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNode"])(fn)) throw new TypeError('Node expected as parameter "fn"');
            if (!Array.isArray(args) || !args.every(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNode"])) {
                throw new TypeError('Array containing Nodes expected for parameter "args"');
            }
            this.fn = fn;
            this.args = args || [];
        }
        // readonly property name
        get name() {
            return this.fn.name || '';
        }
        get type() {
            return name;
        }
        get isFunctionNode() {
            return true;
        }
        /**
     * Compile a node into a JavaScript function.
     * This basically pre-calculates as much as possible and only leaves open
     * calculations which depend on a dynamic scope with variables.
     * @param {Object} math     Math.js namespace with functions and constants.
     * @param {Object} argNames An object with argument names as key and `true`
     *                          as value. Used in the SymbolNode to optimize
     *                          for arguments from user assigned functions
     *                          (see FunctionAssignmentNode) or special symbols
     *                          like `end` (see IndexNode).
     * @return {function} Returns a function which can be called like:
     *                        evalNode(scope: Object, args: Object, context: *)
     */ _compile(math, argNames) {
            // compile arguments
            var evalArgs = this.args.map((arg)=>arg._compile(math, argNames));
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSymbolNode"])(this.fn)) {
                var _name = this.fn.name;
                if (!argNames[_name]) {
                    // we can statically determine whether the function
                    // has the rawArgs property
                    var fn = _name in math ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$customs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getSafeProperty"])(math, _name) : undefined;
                    var isRaw = typeof fn === 'function' && fn.rawArgs === true;
                    var resolveFn = (scope)=>{
                        var value;
                        if (scope.has(_name)) {
                            value = scope.get(_name);
                        } else if (_name in math) {
                            value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$customs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getSafeProperty"])(math, _name);
                        } else {
                            return FunctionNode.onUndefinedFunction(_name);
                        }
                        if (typeof value === 'function') {
                            return value;
                        }
                        throw new TypeError("'".concat(_name, "' is not a function; its value is:\n  ").concat(strin(value)));
                    };
                    if (isRaw) {
                        // pass unevaluated parameters (nodes) to the function
                        // "raw" evaluation
                        var rawArgs = this.args;
                        return function evalFunctionNode(scope, args, context) {
                            var fn = resolveFn(scope);
                            // the original function can be overwritten in the scope with a non-rawArgs function
                            if (fn.rawArgs === true) {
                                return fn(rawArgs, math, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$scope$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSubScope"])(scope, args));
                            } else {
                                // "regular" evaluation
                                var values = evalArgs.map((evalArg)=>evalArg(scope, args, context));
                                return fn(...values);
                            }
                        };
                    } else {
                        // "regular" evaluation
                        switch(evalArgs.length){
                            case 0:
                                return function evalFunctionNode(scope, args, context) {
                                    var fn = resolveFn(scope);
                                    return fn();
                                };
                            case 1:
                                return function evalFunctionNode(scope, args, context) {
                                    var fn = resolveFn(scope);
                                    var evalArg0 = evalArgs[0];
                                    return fn(evalArg0(scope, args, context));
                                };
                            case 2:
                                return function evalFunctionNode(scope, args, context) {
                                    var fn = resolveFn(scope);
                                    var evalArg0 = evalArgs[0];
                                    var evalArg1 = evalArgs[1];
                                    return fn(evalArg0(scope, args, context), evalArg1(scope, args, context));
                                };
                            default:
                                return function evalFunctionNode(scope, args, context) {
                                    var fn = resolveFn(scope);
                                    var values = evalArgs.map((evalArg)=>evalArg(scope, args, context));
                                    return fn(...values);
                                };
                        }
                    }
                } else {
                    // the function symbol is an argName
                    var _rawArgs = this.args;
                    return function evalFunctionNode(scope, args, context) {
                        var fn = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$customs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getSafeProperty"])(args, _name);
                        if (typeof fn !== 'function') {
                            throw new TypeError("Argument '".concat(_name, "' was not a function; received: ").concat(strin(fn)));
                        }
                        if (fn.rawArgs) {
                            // "Raw" evaluation
                            return fn(_rawArgs, math, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$scope$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSubScope"])(scope, args));
                        } else {
                            var values = evalArgs.map((evalArg)=>evalArg(scope, args, context));
                            return fn.apply(fn, values);
                        }
                    };
                }
            } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAccessorNode"])(this.fn) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isIndexNode"])(this.fn.index) && this.fn.index.isObjectProperty()) {
                // execute the function with the right context:
                // the object of the AccessorNode
                var evalObject = this.fn.object._compile(math, argNames);
                var prop = this.fn.index.getObjectProperty();
                var _rawArgs2 = this.args;
                return function evalFunctionNode(scope, args, context) {
                    var object = evalObject(scope, args, context);
                    var fn = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$customs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getSafeMethod"])(object, prop);
                    if (fn !== null && fn !== void 0 && fn.rawArgs) {
                        // "Raw" evaluation
                        return fn(_rawArgs2, math, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$scope$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSubScope"])(scope, args));
                    } else {
                        // "regular" evaluation
                        var values = evalArgs.map((evalArg)=>evalArg(scope, args, context));
                        return fn.apply(object, values);
                    }
                };
            } else {
                // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()
                // we have to dynamically determine whether the function has the
                // rawArgs property
                var fnExpr = this.fn.toString();
                var evalFn = this.fn._compile(math, argNames);
                var _rawArgs3 = this.args;
                return function evalFunctionNode(scope, args, context) {
                    var fn = evalFn(scope, args, context);
                    if (typeof fn !== 'function') {
                        throw new TypeError("Expression '".concat(fnExpr, "' did not evaluate to a function; value is:") + "\n  ".concat(strin(fn)));
                    }
                    if (fn.rawArgs) {
                        // "Raw" evaluation
                        return fn(_rawArgs3, math, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$scope$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSubScope"])(scope, args));
                    } else {
                        // "regular" evaluation
                        var values = evalArgs.map((evalArg)=>evalArg(scope, args, context));
                        return fn.apply(fn, values);
                    }
                };
            }
        }
        /**
     * Execute a callback for each of the child nodes of this node
     * @param {function(child: Node, path: string, parent: Node)} callback
     */ forEach(callback) {
            callback(this.fn, 'fn', this);
            for(var i = 0; i < this.args.length; i++){
                callback(this.args[i], 'args[' + i + ']', this);
            }
        }
        /**
     * Create a new FunctionNode whose children are the results of calling
     * the provided callback function for each child of the original node.
     * @param {function(child: Node, path: string, parent: Node): Node} callback
     * @returns {FunctionNode} Returns a transformed copy of the node
     */ map(callback) {
            var fn = this._ifNode(callback(this.fn, 'fn', this));
            var args = [];
            for(var i = 0; i < this.args.length; i++){
                args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
            }
            return new FunctionNode(fn, args);
        }
        /**
     * Create a clone of this node, a shallow copy
     * @return {FunctionNode}
     */ clone() {
            return new FunctionNode(this.fn, this.args.slice(0));
        }
        /**
     * Throws an error 'Undefined function {name}'
     * @param {string} name
     */ /**
     * Get string representation. (wrapper function)
     * This overrides parts of Node's toString function.
     * If callback is an object containing callbacks, it
     * calls the correct callback for the current node,
     * otherwise it falls back to calling Node's toString
     * function.
     *
     * @param {Object} options
     * @return {string} str
     * @override
     */ toString(options) {
            var customString;
            var name = this.fn.toString(options);
            if (options && typeof options.handler === 'object' && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasOwnProperty"])(options.handler, name)) {
                // callback is a map of callback functions
                customString = options.handler[name](this, options);
            }
            if (typeof customString !== 'undefined') {
                return customString;
            }
            // fall back to Node's toString
            return super.toString(options);
        }
        /**
     * Get string representation
     * @param {Object} options
     * @return {string} str
     */ _toString(options) {
            var args = this.args.map(function(arg) {
                return arg.toString(options);
            });
            var fn = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFunctionAssignmentNode"])(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options);
            // format the arguments like "add(2, 4.2)"
            return fn + '(' + args.join(', ') + ')';
        }
        /**
     * Get a JSON representation of the node
     * @returns {Object}
     */ toJSON() {
            return {
                mathjs: name,
                fn: this.fn,
                args: this.args
            };
        }
        /**
     * Instantiate an AssignmentNode from its JSON representation
     * @param {Object} json  An object structured like
     *                       `{"mathjs": "FunctionNode", fn: ..., args: ...}`,
     *                       where mathjs is optional
     * @returns {FunctionNode}
     */ /**
     * Get HTML representation
     * @param {Object} options
     * @return {string} str
     */ _toHTML(options) {
            var args = this.args.map(function(arg) {
                return arg.toHTML(options);
            });
            // format the arguments like "add(2, 4.2)"
            return '<span class="math-function">' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escape"])(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + args.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
        }
        /**
     * Get LaTeX representation. (wrapper function)
     * This overrides parts of Node's toTex function.
     * If callback is an object containing callbacks, it
     * calls the correct callback for the current node,
     * otherwise it falls back to calling Node's toTex
     * function.
     *
     * @param {Object} options
     * @return {string}
     */ toTex(options) {
            var customTex;
            if (options && typeof options.handler === 'object' && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasOwnProperty"])(options.handler, this.name)) {
                // callback is a map of callback functions
                customTex = options.handler[this.name](this, options);
            }
            if (typeof customTex !== 'undefined') {
                return customTex;
            }
            // fall back to Node's toTex
            return super.toTex(options);
        }
        /**
     * Get LaTeX representation
     * @param {Object} options
     * @return {string} str
     */ _toTex(options) {
            var args = this.args.map(function(arg) {
                // get LaTeX of the arguments
                return arg.toTex(options);
            });
            var latexConverter;
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$latex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["latexFunctions"][this.name]) {
                latexConverter = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$latex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["latexFunctions"][this.name];
            }
            // toTex property on the function itself
            if (math[this.name] && (typeof math[this.name].toTex === 'function' || typeof math[this.name].toTex === 'object' || typeof math[this.name].toTex === 'string')) {
                // .toTex is a callback function
                latexConverter = math[this.name].toTex;
            }
            var customToTex;
            switch(typeof latexConverter){
                case 'function':
                    // a callback function
                    customToTex = latexConverter(this, options);
                    break;
                case 'string':
                    // a template string
                    customToTex = expandTemplate(latexConverter, this, options);
                    break;
                case 'object':
                    // an object with different "converters" for different
                    // numbers of arguments
                    switch(typeof latexConverter[args.length]){
                        case 'function':
                            customToTex = latexConverter[args.length](this, options);
                            break;
                        case 'string':
                            customToTex = expandTemplate(latexConverter[args.length], this, options);
                            break;
                    }
            }
            if (typeof customToTex !== 'undefined') {
                return customToTex;
            }
            return expandTemplate(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$latex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["defaultTemplate"], this, options);
        }
        /**
     * Get identifier.
     * @return {string}
     */ getIdentifier() {
            return this.type + ':' + this.name;
        }
    }
    _FunctionNode = FunctionNode;
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(FunctionNode, "name", name);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(FunctionNode, "onUndefinedFunction", function(name) {
        throw new Error('Undefined function ' + name);
    });
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(FunctionNode, "fromJSON", function(json) {
        return new _FunctionNode(json.fn, json.args);
    });
    return FunctionNode;
}, {
    isClass: true,
    isNode: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/parse.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createParse": (()=>createParse)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/collection.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/number.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/object.js [app-client] (ecmascript)");
;
;
;
;
;
;
var name = 'parse';
var dependencies = [
    'typed',
    'numeric',
    'config',
    'AccessorNode',
    'ArrayNode',
    'AssignmentNode',
    'BlockNode',
    'ConditionalNode',
    'ConstantNode',
    'FunctionAssignmentNode',
    'FunctionNode',
    'IndexNode',
    'ObjectNode',
    'OperatorNode',
    'ParenthesisNode',
    'RangeNode',
    'RelationalNode',
    'SymbolNode'
];
var createParse = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, numeric, config, AccessorNode, ArrayNode, AssignmentNode, BlockNode, ConditionalNode, ConstantNode, FunctionAssignmentNode, FunctionNode, IndexNode, ObjectNode, OperatorNode, ParenthesisNode, RangeNode, RelationalNode, SymbolNode } = _ref;
    /**
   * Parse an expression. Returns a node tree, which can be evaluated by
   * invoking node.evaluate().
   *
   * Note the evaluating arbitrary expressions may involve security risks,
   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.
   *
   * Syntax:
   *
   *     math.parse(expr)
   *     math.parse(expr, options)
   *     math.parse([expr1, expr2, expr3, ...])
   *     math.parse([expr1, expr2, expr3, ...], options)
   *
   * Example:
   *
   *     const node1 = math.parse('sqrt(3^2 + 4^2)')
   *     node1.compile().evaluate() // 5
   *
   *     let scope = {a:3, b:4}
   *     const node2 = math.parse('a * b') // 12
   *     const code2 = node2.compile()
   *     code2.evaluate(scope) // 12
   *     scope.a = 5
   *     code2.evaluate(scope) // 20
   *
   *     const nodes = math.parse(['a = 3', 'b = 4', 'a * b'])
   *     nodes[2].compile().evaluate() // 12
   *
   * See also:
   *
   *     evaluate, compile
   *
   * @param {string | string[] | Matrix} expr          Expression to be parsed
   * @param {{nodes: Object<string, Node>}} [options]  Available options:
   *                                                   - `nodes` a set of custom nodes
   * @return {Node | Node[]} node
   * @throws {Error}
   */ var parse = typed(name, {
        string: function string(expression) {
            return parseStart(expression, {});
        },
        'Array | Matrix': function Array__Matrix(expressions) {
            return parseMultiple(expressions, {});
        },
        'string, Object': function string_Object(expression, options) {
            var extraNodes = options.nodes !== undefined ? options.nodes : {};
            return parseStart(expression, extraNodes);
        },
        'Array | Matrix, Object': parseMultiple
    });
    function parseMultiple(expressions) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var extraNodes = options.nodes !== undefined ? options.nodes : {};
        // parse an array or matrix with expressions
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["deepMap"])(expressions, function(elem) {
            if (typeof elem !== 'string') throw new TypeError('String expected');
            return parseStart(elem, extraNodes);
        });
    }
    // token types enumeration
    var TOKENTYPE = {
        NULL: 0,
        DELIMITER: 1,
        NUMBER: 2,
        SYMBOL: 3,
        UNKNOWN: 4
    };
    // map with all delimiters
    var DELIMITERS = {
        ',': true,
        '(': true,
        ')': true,
        '[': true,
        ']': true,
        '{': true,
        '}': true,
        '"': true,
        '\'': true,
        ';': true,
        '+': true,
        '-': true,
        '*': true,
        '.*': true,
        '/': true,
        './': true,
        '%': true,
        '^': true,
        '.^': true,
        '~': true,
        '!': true,
        '&': true,
        '|': true,
        '^|': true,
        '=': true,
        ':': true,
        '?': true,
        '==': true,
        '!=': true,
        '<': true,
        '>': true,
        '<=': true,
        '>=': true,
        '<<': true,
        '>>': true,
        '>>>': true
    };
    // map with all named delimiters
    var NAMED_DELIMITERS = {
        mod: true,
        to: true,
        in: true,
        and: true,
        xor: true,
        or: true,
        not: true
    };
    var CONSTANTS = {
        true: true,
        false: false,
        null: null,
        undefined
    };
    var NUMERIC_CONSTANTS = [
        'NaN',
        'Infinity'
    ];
    var ESCAPE_CHARACTERS = {
        '"': '"',
        "'": "'",
        '\\': '\\',
        '/': '/',
        b: '\b',
        f: '\f',
        n: '\n',
        r: '\r',
        t: '\t'
    };
    function initialState() {
        return {
            extraNodes: {},
            // current extra nodes, must be careful not to mutate
            expression: '',
            // current expression
            comment: '',
            // last parsed comment
            index: 0,
            // current index in expr
            token: '',
            // current token
            tokenType: TOKENTYPE.NULL,
            // type of the token
            nestingLevel: 0,
            // level of nesting inside parameters, used to ignore newline characters
            conditionalLevel: null // when a conditional is being parsed, the level of the conditional is stored here
        };
    }
    /**
   * View upto `length` characters of the expression starting at the current character.
   *
   * @param {Object} state
   * @param {number} [length=1] Number of characters to view
   * @returns {string}
   * @private
   */ function currentString(state, length) {
        return state.expression.substr(state.index, length);
    }
    /**
   * View the current character. Returns '' if end of expression is reached.
   *
   * @param {Object} state
   * @returns {string}
   * @private
   */ function currentCharacter(state) {
        return currentString(state, 1);
    }
    /**
   * Get the next character from the expression.
   * The character is stored into the char c. If the end of the expression is
   * reached, the function puts an empty string in c.
   * @private
   */ function next(state) {
        state.index++;
    }
    /**
   * Preview the previous character from the expression.
   * @return {string} cNext
   * @private
   */ function prevCharacter(state) {
        return state.expression.charAt(state.index - 1);
    }
    /**
   * Preview the next character from the expression.
   * @return {string} cNext
   * @private
   */ function nextCharacter(state) {
        return state.expression.charAt(state.index + 1);
    }
    /**
   * Get next token in the current string expr.
   * The token and token type are available as token and tokenType
   * @private
   */ function getToken(state) {
        state.tokenType = TOKENTYPE.NULL;
        state.token = '';
        state.comment = '';
        // skip over ignored characters:
        while(true){
            // comments:
            if (currentCharacter(state) === '#') {
                while(currentCharacter(state) !== '\n' && currentCharacter(state) !== ''){
                    state.comment += currentCharacter(state);
                    next(state);
                }
            }
            // whitespace: space, tab, and newline when inside parameters
            if (parse.isWhitespace(currentCharacter(state), state.nestingLevel)) {
                next(state);
            } else {
                break;
            }
        }
        // check for end of expression
        if (currentCharacter(state) === '') {
            // token is still empty
            state.tokenType = TOKENTYPE.DELIMITER;
            return;
        }
        // check for new line character
        if (currentCharacter(state) === '\n' && !state.nestingLevel) {
            state.tokenType = TOKENTYPE.DELIMITER;
            state.token = currentCharacter(state);
            next(state);
            return;
        }
        var c1 = currentCharacter(state);
        var c2 = currentString(state, 2);
        var c3 = currentString(state, 3);
        if (c3.length === 3 && DELIMITERS[c3]) {
            state.tokenType = TOKENTYPE.DELIMITER;
            state.token = c3;
            next(state);
            next(state);
            next(state);
            return;
        }
        // check for delimiters consisting of 2 characters
        if (c2.length === 2 && DELIMITERS[c2]) {
            state.tokenType = TOKENTYPE.DELIMITER;
            state.token = c2;
            next(state);
            next(state);
            return;
        }
        // check for delimiters consisting of 1 character
        if (DELIMITERS[c1]) {
            state.tokenType = TOKENTYPE.DELIMITER;
            state.token = c1;
            next(state);
            return;
        }
        // check for a number
        if (parse.isDigitDot(c1)) {
            state.tokenType = TOKENTYPE.NUMBER;
            // check for binary, octal, or hex
            var _c = currentString(state, 2);
            if (_c === '0b' || _c === '0o' || _c === '0x') {
                state.token += currentCharacter(state);
                next(state);
                state.token += currentCharacter(state);
                next(state);
                while(parse.isHexDigit(currentCharacter(state))){
                    state.token += currentCharacter(state);
                    next(state);
                }
                if (currentCharacter(state) === '.') {
                    // this number has a radix point
                    state.token += '.';
                    next(state);
                    // get the digits after the radix
                    while(parse.isHexDigit(currentCharacter(state))){
                        state.token += currentCharacter(state);
                        next(state);
                    }
                } else if (currentCharacter(state) === 'i') {
                    // this number has a word size suffix
                    state.token += 'i';
                    next(state);
                    // get the word size
                    while(parse.isDigit(currentCharacter(state))){
                        state.token += currentCharacter(state);
                        next(state);
                    }
                }
                return;
            }
            // get number, can have a single dot
            if (currentCharacter(state) === '.') {
                state.token += currentCharacter(state);
                next(state);
                if (!parse.isDigit(currentCharacter(state))) {
                    // this is no number, it is just a dot (can be dot notation)
                    state.tokenType = TOKENTYPE.DELIMITER;
                    return;
                }
            } else {
                while(parse.isDigit(currentCharacter(state))){
                    state.token += currentCharacter(state);
                    next(state);
                }
                if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {
                    state.token += currentCharacter(state);
                    next(state);
                }
            }
            while(parse.isDigit(currentCharacter(state))){
                state.token += currentCharacter(state);
                next(state);
            }
            // check for exponential notation like "2.3e-4", "1.23e50" or "2e+4"
            if (currentCharacter(state) === 'E' || currentCharacter(state) === 'e') {
                if (parse.isDigit(nextCharacter(state)) || nextCharacter(state) === '-' || nextCharacter(state) === '+') {
                    state.token += currentCharacter(state);
                    next(state);
                    if (currentCharacter(state) === '+' || currentCharacter(state) === '-') {
                        state.token += currentCharacter(state);
                        next(state);
                    }
                    // Scientific notation MUST be followed by an exponent
                    if (!parse.isDigit(currentCharacter(state))) {
                        throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
                    }
                    while(parse.isDigit(currentCharacter(state))){
                        state.token += currentCharacter(state);
                        next(state);
                    }
                    if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {
                        throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
                    }
                } else if (nextCharacter(state) === '.') {
                    next(state);
                    throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
                }
            }
            return;
        }
        // check for variables, functions, named operators
        if (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state))) {
            while(parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state)) || parse.isDigit(currentCharacter(state))){
                state.token += currentCharacter(state);
                next(state);
            }
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasOwnProperty"])(NAMED_DELIMITERS, state.token)) {
                state.tokenType = TOKENTYPE.DELIMITER;
            } else {
                state.tokenType = TOKENTYPE.SYMBOL;
            }
            return;
        }
        // something unknown is found, wrong characters -> a syntax error
        state.tokenType = TOKENTYPE.UNKNOWN;
        while(currentCharacter(state) !== ''){
            state.token += currentCharacter(state);
            next(state);
        }
        throw createSyntaxError(state, 'Syntax error in part "' + state.token + '"');
    }
    /**
   * Get next token and skip newline tokens
   */ function getTokenSkipNewline(state) {
        do {
            getToken(state);
        }while (state.token === '\n') // eslint-disable-line no-unmodified-loop-condition
    }
    /**
   * Open parameters.
   * New line characters will be ignored until closeParams(state) is called
   */ function openParams(state) {
        state.nestingLevel++;
    }
    /**
   * Close parameters.
   * New line characters will no longer be ignored
   */ function closeParams(state) {
        state.nestingLevel--;
    }
    /**
   * Checks whether the current character `c` is a valid alpha character:
   *
   * - A latin letter (upper or lower case) Ascii: a-z, A-Z
   * - An underscore                        Ascii: _
   * - A dollar sign                        Ascii: $
   * - A latin letter with accents          Unicode: \u00C0 - \u02AF
   * - A greek letter                       Unicode: \u0370 - \u03FF
   * - A mathematical alphanumeric symbol   Unicode: \u{1D400} - \u{1D7FF} excluding invalid code points
   *
   * The previous and next characters are needed to determine whether
   * this character is part of a unicode surrogate pair.
   *
   * @param {string} c      Current character in the expression
   * @param {string} cPrev  Previous character
   * @param {string} cNext  Next character
   * @return {boolean}
   */ parse.isAlpha = function isAlpha(c, cPrev, cNext) {
        return parse.isValidLatinOrGreek(c) || parse.isValidMathSymbol(c, cNext) || parse.isValidMathSymbol(cPrev, c);
    };
    /**
   * Test whether a character is a valid latin, greek, or letter-like character
   * @param {string} c
   * @return {boolean}
   */ parse.isValidLatinOrGreek = function isValidLatinOrGreek(c) {
        return /^[a-zA-Z_$\u00C0-\u02AF\u0370-\u03FF\u2100-\u214F]$/.test(c);
    };
    /**
   * Test whether two given 16 bit characters form a surrogate pair of a
   * unicode math symbol.
   *
   * https://unicode-table.com/en/
   * https://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode
   *
   * Note: In ES6 will be unicode aware:
   * https://stackoverflow.com/questions/280712/javascript-unicode-regexes
   * https://mathiasbynens.be/notes/es6-unicode-regex
   *
   * @param {string} high
   * @param {string} low
   * @return {boolean}
   */ parse.isValidMathSymbol = function isValidMathSymbol(high, low) {
        return /^[\uD835]$/.test(high) && /^[\uDC00-\uDFFF]$/.test(low) && /^[^\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]$/.test(low);
    };
    /**
   * Check whether given character c is a white space character: space, tab, or enter
   * @param {string} c
   * @param {number} nestingLevel
   * @return {boolean}
   */ parse.isWhitespace = function isWhitespace(c, nestingLevel) {
        // TODO: also take '\r' carriage return as newline? Or does that give problems on mac?
        return c === ' ' || c === '\t' || c === '\n' && nestingLevel > 0;
    };
    /**
   * Test whether the character c is a decimal mark (dot).
   * This is the case when it's not the start of a delimiter '.*', './', or '.^'
   * @param {string} c
   * @param {string} cNext
   * @return {boolean}
   */ parse.isDecimalMark = function isDecimalMark(c, cNext) {
        return c === '.' && cNext !== '/' && cNext !== '*' && cNext !== '^';
    };
    /**
   * checks if the given char c is a digit or dot
   * @param {string} c   a string with one character
   * @return {boolean}
   */ parse.isDigitDot = function isDigitDot(c) {
        return c >= '0' && c <= '9' || c === '.';
    };
    /**
   * checks if the given char c is a digit
   * @param {string} c   a string with one character
   * @return {boolean}
   */ parse.isDigit = function isDigit(c) {
        return c >= '0' && c <= '9';
    };
    /**
   * checks if the given char c is a hex digit
   * @param {string} c   a string with one character
   * @return {boolean}
   */ parse.isHexDigit = function isHexDigit(c) {
        return c >= '0' && c <= '9' || c >= 'a' && c <= 'f' || c >= 'A' && c <= 'F';
    };
    /**
   * Start of the parse levels below, in order of precedence
   * @return {Node} node
   * @private
   */ function parseStart(expression, extraNodes) {
        var state = initialState();
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(state, {
            expression,
            extraNodes
        });
        getToken(state);
        var node = parseBlock(state);
        // check for garbage at the end of the expression
        // an expression ends with a empty character '' and tokenType DELIMITER
        if (state.token !== '') {
            if (state.tokenType === TOKENTYPE.DELIMITER) {
                // user entered a not existing operator like "//"
                // TODO: give hints for aliases, for example with "<>" give as hint " did you mean !== ?"
                throw createError(state, 'Unexpected operator ' + state.token);
            } else {
                throw createSyntaxError(state, 'Unexpected part "' + state.token + '"');
            }
        }
        return node;
    }
    /**
   * Parse a block with expressions. Expressions can be separated by a newline
   * character '\n', or by a semicolon ';'. In case of a semicolon, no output
   * of the preceding line is returned.
   * @return {Node} node
   * @private
   */ function parseBlock(state) {
        var node;
        var blocks = [];
        var visible;
        if (state.token !== '' && state.token !== '\n' && state.token !== ';') {
            node = parseAssignment(state);
            if (state.comment) {
                node.comment = state.comment;
            }
        }
        // TODO: simplify this loop
        while(state.token === '\n' || state.token === ';'){
            // eslint-disable-line no-unmodified-loop-condition
            if (blocks.length === 0 && node) {
                visible = state.token !== ';';
                blocks.push({
                    node,
                    visible
                });
            }
            getToken(state);
            if (state.token !== '\n' && state.token !== ';' && state.token !== '') {
                node = parseAssignment(state);
                if (state.comment) {
                    node.comment = state.comment;
                }
                visible = state.token !== ';';
                blocks.push({
                    node,
                    visible
                });
            }
        }
        if (blocks.length > 0) {
            return new BlockNode(blocks);
        } else {
            if (!node) {
                node = new ConstantNode(undefined);
                if (state.comment) {
                    node.comment = state.comment;
                }
            }
            return node;
        }
    }
    /**
   * Assignment of a function or variable,
   * - can be a variable like 'a=2.3'
   * - or a updating an existing variable like 'matrix(2,3:5)=[6,7,8]'
   * - defining a function like 'f(x) = x^2'
   * @return {Node} node
   * @private
   */ function parseAssignment(state) {
        var name, args, value, valid;
        var node = parseConditional(state);
        if (state.token === '=') {
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSymbolNode"])(node)) {
                // parse a variable assignment like 'a = 2/3'
                name = node.name;
                getTokenSkipNewline(state);
                value = parseAssignment(state);
                return new AssignmentNode(new SymbolNode(name), value);
            } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAccessorNode"])(node)) {
                // parse a matrix subset assignment like 'A[1,2] = 4'
                getTokenSkipNewline(state);
                value = parseAssignment(state);
                return new AssignmentNode(node.object, node.index, value);
            } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFunctionNode"])(node) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSymbolNode"])(node.fn)) {
                // parse function assignment like 'f(x) = x^2'
                valid = true;
                args = [];
                name = node.name;
                node.args.forEach(function(arg, index) {
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSymbolNode"])(arg)) {
                        args[index] = arg.name;
                    } else {
                        valid = false;
                    }
                });
                if (valid) {
                    getTokenSkipNewline(state);
                    value = parseAssignment(state);
                    return new FunctionAssignmentNode(name, args, value);
                }
            }
            throw createSyntaxError(state, 'Invalid left hand side of assignment operator =');
        }
        return node;
    }
    /**
   * conditional operation
   *
   *     condition ? truePart : falsePart
   *
   * Note: conditional operator is right-associative
   *
   * @return {Node} node
   * @private
   */ function parseConditional(state) {
        var node = parseLogicalOr(state);
        while(state.token === '?'){
            // eslint-disable-line no-unmodified-loop-condition
            // set a conditional level, the range operator will be ignored as long
            // as conditionalLevel === state.nestingLevel.
            var prev = state.conditionalLevel;
            state.conditionalLevel = state.nestingLevel;
            getTokenSkipNewline(state);
            var condition = node;
            var trueExpr = parseAssignment(state);
            if (state.token !== ':') throw createSyntaxError(state, 'False part of conditional expression expected');
            state.conditionalLevel = null;
            getTokenSkipNewline(state);
            var falseExpr = parseAssignment(state); // Note: check for conditional operator again, right associativity
            node = new ConditionalNode(condition, trueExpr, falseExpr);
            // restore the previous conditional level
            state.conditionalLevel = prev;
        }
        return node;
    }
    /**
   * logical or, 'x or y'
   * @return {Node} node
   * @private
   */ function parseLogicalOr(state) {
        var node = parseLogicalXor(state);
        while(state.token === 'or'){
            // eslint-disable-line no-unmodified-loop-condition
            getTokenSkipNewline(state);
            node = new OperatorNode('or', 'or', [
                node,
                parseLogicalXor(state)
            ]);
        }
        return node;
    }
    /**
   * logical exclusive or, 'x xor y'
   * @return {Node} node
   * @private
   */ function parseLogicalXor(state) {
        var node = parseLogicalAnd(state);
        while(state.token === 'xor'){
            // eslint-disable-line no-unmodified-loop-condition
            getTokenSkipNewline(state);
            node = new OperatorNode('xor', 'xor', [
                node,
                parseLogicalAnd(state)
            ]);
        }
        return node;
    }
    /**
   * logical and, 'x and y'
   * @return {Node} node
   * @private
   */ function parseLogicalAnd(state) {
        var node = parseBitwiseOr(state);
        while(state.token === 'and'){
            // eslint-disable-line no-unmodified-loop-condition
            getTokenSkipNewline(state);
            node = new OperatorNode('and', 'and', [
                node,
                parseBitwiseOr(state)
            ]);
        }
        return node;
    }
    /**
   * bitwise or, 'x | y'
   * @return {Node} node
   * @private
   */ function parseBitwiseOr(state) {
        var node = parseBitwiseXor(state);
        while(state.token === '|'){
            // eslint-disable-line no-unmodified-loop-condition
            getTokenSkipNewline(state);
            node = new OperatorNode('|', 'bitOr', [
                node,
                parseBitwiseXor(state)
            ]);
        }
        return node;
    }
    /**
   * bitwise exclusive or (xor), 'x ^| y'
   * @return {Node} node
   * @private
   */ function parseBitwiseXor(state) {
        var node = parseBitwiseAnd(state);
        while(state.token === '^|'){
            // eslint-disable-line no-unmodified-loop-condition
            getTokenSkipNewline(state);
            node = new OperatorNode('^|', 'bitXor', [
                node,
                parseBitwiseAnd(state)
            ]);
        }
        return node;
    }
    /**
   * bitwise and, 'x & y'
   * @return {Node} node
   * @private
   */ function parseBitwiseAnd(state) {
        var node = parseRelational(state);
        while(state.token === '&'){
            // eslint-disable-line no-unmodified-loop-condition
            getTokenSkipNewline(state);
            node = new OperatorNode('&', 'bitAnd', [
                node,
                parseRelational(state)
            ]);
        }
        return node;
    }
    /**
   * Parse a chained conditional, like 'a > b >= c'
   * @return {Node} node
   */ function parseRelational(state) {
        var params = [
            parseShift(state)
        ];
        var conditionals = [];
        var operators = {
            '==': 'equal',
            '!=': 'unequal',
            '<': 'smaller',
            '>': 'larger',
            '<=': 'smallerEq',
            '>=': 'largerEq'
        };
        while((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasOwnProperty"])(operators, state.token)){
            // eslint-disable-line no-unmodified-loop-condition
            var cond = {
                name: state.token,
                fn: operators[state.token]
            };
            conditionals.push(cond);
            getTokenSkipNewline(state);
            params.push(parseShift(state));
        }
        if (params.length === 1) {
            return params[0];
        } else if (params.length === 2) {
            return new OperatorNode(conditionals[0].name, conditionals[0].fn, params);
        } else {
            return new RelationalNode(conditionals.map((c)=>c.fn), params);
        }
    }
    /**
   * Bitwise left shift, bitwise right arithmetic shift, bitwise right logical shift
   * @return {Node} node
   * @private
   */ function parseShift(state) {
        var node, name, fn, params;
        node = parseConversion(state);
        var operators = {
            '<<': 'leftShift',
            '>>': 'rightArithShift',
            '>>>': 'rightLogShift'
        };
        while((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasOwnProperty"])(operators, state.token)){
            name = state.token;
            fn = operators[name];
            getTokenSkipNewline(state);
            params = [
                node,
                parseConversion(state)
            ];
            node = new OperatorNode(name, fn, params);
        }
        return node;
    }
    /**
   * conversion operators 'to' and 'in'
   * @return {Node} node
   * @private
   */ function parseConversion(state) {
        var node, name, fn, params;
        node = parseRange(state);
        var operators = {
            to: 'to',
            in: 'to' // alias of 'to'
        };
        while((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasOwnProperty"])(operators, state.token)){
            name = state.token;
            fn = operators[name];
            getTokenSkipNewline(state);
            if (name === 'in' && state.token === '') {
                // end of expression -> this is the unit 'in' ('inch')
                node = new OperatorNode('*', 'multiply', [
                    node,
                    new SymbolNode('in')
                ], true);
            } else {
                // operator 'a to b' or 'a in b'
                params = [
                    node,
                    parseRange(state)
                ];
                node = new OperatorNode(name, fn, params);
            }
        }
        return node;
    }
    /**
   * parse range, "start:end", "start:step:end", ":", "start:", ":end", etc
   * @return {Node} node
   * @private
   */ function parseRange(state) {
        var node;
        var params = [];
        if (state.token === ':') {
            // implicit start=1 (one-based)
            node = new ConstantNode(1);
        } else {
            // explicit start
            node = parseAddSubtract(state);
        }
        if (state.token === ':' && state.conditionalLevel !== state.nestingLevel) {
            // we ignore the range operator when a conditional operator is being processed on the same level
            params.push(node);
            // parse step and end
            while(state.token === ':' && params.length < 3){
                // eslint-disable-line no-unmodified-loop-condition
                getTokenSkipNewline(state);
                if (state.token === ')' || state.token === ']' || state.token === ',' || state.token === '') {
                    // implicit end
                    params.push(new SymbolNode('end'));
                } else {
                    // explicit end
                    params.push(parseAddSubtract(state));
                }
            }
            if (params.length === 3) {
                // params = [start, step, end]
                node = new RangeNode(params[0], params[2], params[1]); // start, end, step
            } else {
                // length === 2
                // params = [start, end]
                node = new RangeNode(params[0], params[1]); // start, end
            }
        }
        return node;
    }
    /**
   * add or subtract
   * @return {Node} node
   * @private
   */ function parseAddSubtract(state) {
        var node, name, fn, params;
        node = parseMultiplyDivide(state);
        var operators = {
            '+': 'add',
            '-': 'subtract'
        };
        while((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasOwnProperty"])(operators, state.token)){
            name = state.token;
            fn = operators[name];
            getTokenSkipNewline(state);
            var rightNode = parseMultiplyDivide(state);
            if (rightNode.isPercentage) {
                params = [
                    node,
                    new OperatorNode('*', 'multiply', [
                        node,
                        rightNode
                    ])
                ];
            } else {
                params = [
                    node,
                    rightNode
                ];
            }
            node = new OperatorNode(name, fn, params);
        }
        return node;
    }
    /**
   * multiply, divide
   * @return {Node} node
   * @private
   */ function parseMultiplyDivide(state) {
        var node, last, name, fn;
        node = parseImplicitMultiplication(state);
        last = node;
        var operators = {
            '*': 'multiply',
            '.*': 'dotMultiply',
            '/': 'divide',
            './': 'dotDivide'
        };
        while(true){
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasOwnProperty"])(operators, state.token)) {
                // explicit operators
                name = state.token;
                fn = operators[name];
                getTokenSkipNewline(state);
                last = parseImplicitMultiplication(state);
                node = new OperatorNode(name, fn, [
                    node,
                    last
                ]);
            } else {
                break;
            }
        }
        return node;
    }
    /**
   * implicit multiplication
   * @return {Node} node
   * @private
   */ function parseImplicitMultiplication(state) {
        var node, last;
        node = parseRule2(state);
        last = node;
        while(true){
            if (state.tokenType === TOKENTYPE.SYMBOL || state.token === 'in' && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isConstantNode"])(node) || state.token === 'in' && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isOperatorNode"])(node) && node.fn === 'unaryMinus' && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isConstantNode"])(node.args[0]) || state.tokenType === TOKENTYPE.NUMBER && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isConstantNode"])(last) && (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isOperatorNode"])(last) || last.op === '!') || state.token === '(') {
                // parse implicit multiplication
                //
                // symbol:      implicit multiplication like '2a', '(2+3)a', 'a b'
                // number:      implicit multiplication like '(2+3)2'
                // parenthesis: implicit multiplication like '2(3+4)', '(3+4)(1+2)'
                last = parseRule2(state);
                node = new OperatorNode('*', 'multiply', [
                    node,
                    last
                ], true);
            } else {
                break;
            }
        }
        return node;
    }
    /**
   * Infamous "rule 2" as described in https://github.com/josdejong/mathjs/issues/792#issuecomment-361065370
   * And as amended in https://github.com/josdejong/mathjs/issues/2370#issuecomment-1054052164
   * Explicit division gets higher precedence than implicit multiplication
   * when the division matches this pattern:
   *   [unaryPrefixOp]?[number] / [number] [symbol]
   * @return {Node} node
   * @private
   */ function parseRule2(state) {
        var node = parseModulusPercentage(state);
        var last = node;
        var tokenStates = [];
        while(true){
            // Match the "number /" part of the pattern "number / number symbol"
            if (state.token === '/' && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rule2Node"])(last)) {
                // Look ahead to see if the next token is a number
                tokenStates.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state));
                getTokenSkipNewline(state);
                // Match the "number / number" part of the pattern
                if (state.tokenType === TOKENTYPE.NUMBER) {
                    // Look ahead again
                    tokenStates.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state));
                    getTokenSkipNewline(state);
                    // Match the "symbol" part of the pattern, or a left parenthesis
                    if (state.tokenType === TOKENTYPE.SYMBOL || state.token === '(' || state.token === 'in') {
                        // We've matched the pattern "number / number symbol".
                        // Rewind once and build the "number / number" node; the symbol will be consumed later
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(state, tokenStates.pop());
                        tokenStates.pop();
                        last = parseModulusPercentage(state);
                        node = new OperatorNode('/', 'divide', [
                            node,
                            last
                        ]);
                    } else {
                        // Not a match, so rewind
                        tokenStates.pop();
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(state, tokenStates.pop());
                        break;
                    }
                } else {
                    // Not a match, so rewind
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(state, tokenStates.pop());
                    break;
                }
            } else {
                break;
            }
        }
        return node;
    }
    /**
   * modulus and percentage
   * @return {Node} node
   * @private
   */ function parseModulusPercentage(state) {
        var node, name, fn, params;
        node = parseUnary(state);
        var operators = {
            '%': 'mod',
            mod: 'mod'
        };
        while((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasOwnProperty"])(operators, state.token)){
            name = state.token;
            fn = operators[name];
            getTokenSkipNewline(state);
            if (name === '%' && state.tokenType === TOKENTYPE.DELIMITER && state.token !== '(') {
                // If the expression contains only %, then treat that as /100
                node = new OperatorNode('/', 'divide', [
                    node,
                    new ConstantNode(100)
                ], false, true);
            } else {
                params = [
                    node,
                    parseUnary(state)
                ];
                node = new OperatorNode(name, fn, params);
            }
        }
        return node;
    }
    /**
   * Unary plus and minus, and logical and bitwise not
   * @return {Node} node
   * @private
   */ function parseUnary(state) {
        var name, params, fn;
        var operators = {
            '-': 'unaryMinus',
            '+': 'unaryPlus',
            '~': 'bitNot',
            not: 'not'
        };
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasOwnProperty"])(operators, state.token)) {
            fn = operators[state.token];
            name = state.token;
            getTokenSkipNewline(state);
            params = [
                parseUnary(state)
            ];
            return new OperatorNode(name, fn, params);
        }
        return parsePow(state);
    }
    /**
   * power
   * Note: power operator is right associative
   * @return {Node} node
   * @private
   */ function parsePow(state) {
        var node, name, fn, params;
        node = parseLeftHandOperators(state);
        if (state.token === '^' || state.token === '.^') {
            name = state.token;
            fn = name === '^' ? 'pow' : 'dotPow';
            getTokenSkipNewline(state);
            params = [
                node,
                parseUnary(state)
            ]; // Go back to unary, we can have '2^-3'
            node = new OperatorNode(name, fn, params);
        }
        return node;
    }
    /**
   * Left hand operators: factorial x!, ctranspose x'
   * @return {Node} node
   * @private
   */ function parseLeftHandOperators(state) {
        var node, name, fn, params;
        node = parseCustomNodes(state);
        var operators = {
            '!': 'factorial',
            '\'': 'ctranspose'
        };
        while((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasOwnProperty"])(operators, state.token)){
            name = state.token;
            fn = operators[name];
            getToken(state);
            params = [
                node
            ];
            node = new OperatorNode(name, fn, params);
            node = parseAccessors(state, node);
        }
        return node;
    }
    /**
   * Parse a custom node handler. A node handler can be used to process
   * nodes in a custom way, for example for handling a plot.
   *
   * A handler must be passed as second argument of the parse function.
   * - must extend math.Node
   * - must contain a function _compile(defs: Object) : string
   * - must contain a function find(filter: Object) : Node[]
   * - must contain a function toString() : string
   * - the constructor is called with a single argument containing all parameters
   *
   * For example:
   *
   *     nodes = {
   *       'plot': PlotHandler
   *     }
   *
   * The constructor of the handler is called as:
   *
   *     node = new PlotHandler(params)
   *
   * The handler will be invoked when evaluating an expression like:
   *
   *     node = math.parse('plot(sin(x), x)', nodes)
   *
   * @return {Node} node
   * @private
   */ function parseCustomNodes(state) {
        var params = [];
        if (state.tokenType === TOKENTYPE.SYMBOL && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasOwnProperty"])(state.extraNodes, state.token)) {
            var CustomNode = state.extraNodes[state.token];
            getToken(state);
            // parse parameters
            if (state.token === '(') {
                params = [];
                openParams(state);
                getToken(state);
                if (state.token !== ')') {
                    params.push(parseAssignment(state));
                    // parse a list with parameters
                    while(state.token === ','){
                        // eslint-disable-line no-unmodified-loop-condition
                        getToken(state);
                        params.push(parseAssignment(state));
                    }
                }
                if (state.token !== ')') {
                    throw createSyntaxError(state, 'Parenthesis ) expected');
                }
                closeParams(state);
                getToken(state);
            }
            // create a new custom node
            // noinspection JSValidateTypes
            return new CustomNode(params);
        }
        return parseSymbol(state);
    }
    /**
   * parse symbols: functions, variables, constants, units
   * @return {Node} node
   * @private
   */ function parseSymbol(state) {
        var node, name;
        if (state.tokenType === TOKENTYPE.SYMBOL || state.tokenType === TOKENTYPE.DELIMITER && state.token in NAMED_DELIMITERS) {
            name = state.token;
            getToken(state);
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasOwnProperty"])(CONSTANTS, name)) {
                // true, false, null, ...
                node = new ConstantNode(CONSTANTS[name]);
            } else if (NUMERIC_CONSTANTS.includes(name)) {
                // NaN, Infinity
                node = new ConstantNode(numeric(name, 'number'));
            } else {
                node = new SymbolNode(name);
            }
            // parse function parameters and matrix index
            node = parseAccessors(state, node);
            return node;
        }
        return parseString(state);
    }
    /**
   * parse accessors:
   * - function invocation in round brackets (...), for example sqrt(2)
   * - index enclosed in square brackets [...], for example A[2,3]
   * - dot notation for properties, like foo.bar
   * @param {Object} state
   * @param {Node} node    Node on which to apply the parameters. If there
   *                       are no parameters in the expression, the node
   *                       itself is returned
   * @param {string[]} [types]  Filter the types of notations
   *                            can be ['(', '[', '.']
   * @return {Node} node
   * @private
   */ function parseAccessors(state, node, types) {
        var params;
        while((state.token === '(' || state.token === '[' || state.token === '.') && (!types || types.includes(state.token))){
            // eslint-disable-line no-unmodified-loop-condition
            params = [];
            if (state.token === '(') {
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSymbolNode"])(node) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAccessorNode"])(node)) {
                    // function invocation like fn(2, 3) or obj.fn(2, 3)
                    openParams(state);
                    getToken(state);
                    if (state.token !== ')') {
                        params.push(parseAssignment(state));
                        // parse a list with parameters
                        while(state.token === ','){
                            // eslint-disable-line no-unmodified-loop-condition
                            getToken(state);
                            params.push(parseAssignment(state));
                        }
                    }
                    if (state.token !== ')') {
                        throw createSyntaxError(state, 'Parenthesis ) expected');
                    }
                    closeParams(state);
                    getToken(state);
                    node = new FunctionNode(node, params);
                } else {
                    // implicit multiplication like (2+3)(4+5) or sqrt(2)(1+2)
                    // don't parse it here but let it be handled by parseImplicitMultiplication
                    // with correct precedence
                    return node;
                }
            } else if (state.token === '[') {
                // index notation like variable[2, 3]
                openParams(state);
                getToken(state);
                if (state.token !== ']') {
                    params.push(parseAssignment(state));
                    // parse a list with parameters
                    while(state.token === ','){
                        // eslint-disable-line no-unmodified-loop-condition
                        getToken(state);
                        params.push(parseAssignment(state));
                    }
                }
                if (state.token !== ']') {
                    throw createSyntaxError(state, 'Parenthesis ] expected');
                }
                closeParams(state);
                getToken(state);
                node = new AccessorNode(node, new IndexNode(params));
            } else {
                // dot notation like variable.prop
                getToken(state);
                var isPropertyName = state.tokenType === TOKENTYPE.SYMBOL || state.tokenType === TOKENTYPE.DELIMITER && state.token in NAMED_DELIMITERS;
                if (!isPropertyName) {
                    throw createSyntaxError(state, 'Property name expected after dot');
                }
                params.push(new ConstantNode(state.token));
                getToken(state);
                var dotNotation = true;
                node = new AccessorNode(node, new IndexNode(params, dotNotation));
            }
        }
        return node;
    }
    /**
   * Parse a single or double quoted string.
   * @return {Node} node
   * @private
   */ function parseString(state) {
        var node, str;
        if (state.token === '"' || state.token === "'") {
            str = parseStringToken(state, state.token);
            // create constant
            node = new ConstantNode(str);
            // parse index parameters
            node = parseAccessors(state, node);
            return node;
        }
        return parseMatrix(state);
    }
    /**
   * Parse a string surrounded by single or double quotes
   * @param {Object} state
   * @param {"'" | "\""} quote
   * @return {string}
   */ function parseStringToken(state, quote) {
        var str = '';
        while(currentCharacter(state) !== '' && currentCharacter(state) !== quote){
            if (currentCharacter(state) === '\\') {
                next(state);
                var char = currentCharacter(state);
                var escapeChar = ESCAPE_CHARACTERS[char];
                if (escapeChar !== undefined) {
                    // an escaped control character like \" or \n
                    str += escapeChar;
                    state.index += 1;
                } else if (char === 'u') {
                    // escaped unicode character
                    var unicode = state.expression.slice(state.index + 1, state.index + 5);
                    if (/^[0-9A-Fa-f]{4}$/.test(unicode)) {
                        // test whether the string holds four hexadecimal values
                        str += String.fromCharCode(parseInt(unicode, 16));
                        state.index += 5;
                    } else {
                        throw createSyntaxError(state, "Invalid unicode character \\u".concat(unicode));
                    }
                } else {
                    throw createSyntaxError(state, "Bad escape character \\".concat(char));
                }
            } else {
                // any regular character
                str += currentCharacter(state);
                next(state);
            }
        }
        getToken(state);
        if (state.token !== quote) {
            throw createSyntaxError(state, "End of string ".concat(quote, " expected"));
        }
        getToken(state);
        return str;
    }
    /**
   * parse the matrix
   * @return {Node} node
   * @private
   */ function parseMatrix(state) {
        var array, params, rows, cols;
        if (state.token === '[') {
            // matrix [...]
            openParams(state);
            getToken(state);
            if (state.token !== ']') {
                // this is a non-empty matrix
                var row = parseRow(state);
                if (state.token === ';') {
                    // 2 dimensional array
                    rows = 1;
                    params = [
                        row
                    ];
                    // the rows of the matrix are separated by dot-comma's
                    while(state.token === ';'){
                        // eslint-disable-line no-unmodified-loop-condition
                        getToken(state);
                        if (state.token !== ']') {
                            params[rows] = parseRow(state);
                            rows++;
                        }
                    }
                    if (state.token !== ']') {
                        throw createSyntaxError(state, 'End of matrix ] expected');
                    }
                    closeParams(state);
                    getToken(state);
                    // check if the number of columns matches in all rows
                    cols = params[0].items.length;
                    for(var r = 1; r < rows; r++){
                        if (params[r].items.length !== cols) {
                            throw createError(state, 'Column dimensions mismatch ' + '(' + params[r].items.length + ' !== ' + cols + ')');
                        }
                    }
                    array = new ArrayNode(params);
                } else {
                    // 1 dimensional vector
                    if (state.token !== ']') {
                        throw createSyntaxError(state, 'End of matrix ] expected');
                    }
                    closeParams(state);
                    getToken(state);
                    array = row;
                }
            } else {
                // this is an empty matrix "[ ]"
                closeParams(state);
                getToken(state);
                array = new ArrayNode([]);
            }
            return parseAccessors(state, array);
        }
        return parseObject(state);
    }
    /**
   * Parse a single comma-separated row from a matrix, like 'a, b, c'
   * @return {ArrayNode} node
   */ function parseRow(state) {
        var params = [
            parseAssignment(state)
        ];
        var len = 1;
        while(state.token === ','){
            // eslint-disable-line no-unmodified-loop-condition
            getToken(state);
            // parse expression
            if (state.token !== ']' && state.token !== ';') {
                params[len] = parseAssignment(state);
                len++;
            }
        }
        return new ArrayNode(params);
    }
    /**
   * parse an object, enclosed in angle brackets{...}, for example {value: 2}
   * @return {Node} node
   * @private
   */ function parseObject(state) {
        if (state.token === '{') {
            openParams(state);
            var key;
            var properties = {};
            do {
                getToken(state);
                if (state.token !== '}') {
                    // parse key
                    if (state.token === '"' || state.token === "'") {
                        key = parseStringToken(state, state.token);
                    } else if (state.tokenType === TOKENTYPE.SYMBOL || state.tokenType === TOKENTYPE.DELIMITER && state.token in NAMED_DELIMITERS) {
                        key = state.token;
                        getToken(state);
                    } else {
                        throw createSyntaxError(state, 'Symbol or string expected as object key');
                    }
                    // parse key/value separator
                    if (state.token !== ':') {
                        throw createSyntaxError(state, 'Colon : expected after object key');
                    }
                    getToken(state);
                    // parse key
                    properties[key] = parseAssignment(state);
                }
            }while (state.token === ',') // eslint-disable-line no-unmodified-loop-condition
            if (state.token !== '}') {
                throw createSyntaxError(state, 'Comma , or bracket } expected after object value');
            }
            closeParams(state);
            getToken(state);
            var node = new ObjectNode(properties);
            // parse index parameters
            node = parseAccessors(state, node);
            return node;
        }
        return parseNumber(state);
    }
    /**
   * parse a number
   * @return {Node} node
   * @private
   */ function parseNumber(state) {
        var numberStr;
        if (state.tokenType === TOKENTYPE.NUMBER) {
            // this is a number
            numberStr = state.token;
            getToken(state);
            var numericType = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["safeNumberType"])(numberStr, config);
            var value = numeric(numberStr, numericType);
            return new ConstantNode(value);
        }
        return parseParentheses(state);
    }
    /**
   * parentheses
   * @return {Node} node
   * @private
   */ function parseParentheses(state) {
        var node;
        // check if it is a parenthesized expression
        if (state.token === '(') {
            // parentheses (...)
            openParams(state);
            getToken(state);
            node = parseAssignment(state); // start again
            if (state.token !== ')') {
                throw createSyntaxError(state, 'Parenthesis ) expected');
            }
            closeParams(state);
            getToken(state);
            node = new ParenthesisNode(node);
            node = parseAccessors(state, node);
            return node;
        }
        return parseEnd(state);
    }
    /**
   * Evaluated when the expression is not yet ended but expected to end
   * @return {Node} res
   * @private
   */ function parseEnd(state) {
        if (state.token === '') {
            // syntax error or unexpected end of expression
            throw createSyntaxError(state, 'Unexpected end of expression');
        } else {
            throw createSyntaxError(state, 'Value expected');
        }
    }
    /**
   * Shortcut for getting the current row value (one based)
   * Returns the line of the currently handled expression
   * @private
   */ /* TODO: implement keeping track on the row number
  function row () {
    return null
  }
  */ /**
   * Shortcut for getting the current col value (one based)
   * Returns the column (position) where the last state.token starts
   * @private
   */ function col(state) {
        return state.index - state.token.length + 1;
    }
    /**
   * Create an error
   * @param {Object} state
   * @param {string} message
   * @return {SyntaxError} instantiated error
   * @private
   */ function createSyntaxError(state, message) {
        var c = col(state);
        var error = new SyntaxError(message + ' (char ' + c + ')');
        error.char = c;
        return error;
    }
    /**
   * Create an error
   * @param {Object} state
   * @param {string} message
   * @return {Error} instantiated error
   * @private
   */ function createError(state, message) {
        var c = col(state);
        var error = new SyntaxError(message + ' (char ' + c + ')');
        error.char = c;
        return error;
    }
    // Now that we can parse, automatically convert strings to Nodes by parsing
    typed.addConversion({
        from: 'string',
        to: 'Node',
        convert: parse
    });
    return parse;
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/function/compile.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createCompile": (()=>createCompile)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/collection.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
;
;
var name = 'compile';
var dependencies = [
    'typed',
    'parse'
];
var createCompile = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, parse } = _ref;
    /**
   * Parse and compile an expression.
   * Returns a an object with a function `evaluate([scope])` to evaluate the
   * compiled expression.
   *
   * Syntax:
   *
   *     math.compile(expr)                       // returns one node
   *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes
   *
   * Examples:
   *
   *     const code1 = math.compile('sqrt(3^2 + 4^2)')
   *     code1.evaluate() // 5
   *
   *     let scope = {a: 3, b: 4}
   *     const code2 = math.compile('a * b') // 12
   *     code2.evaluate(scope) // 12
   *     scope.a = 5
   *     code2.evaluate(scope) // 20
   *
   *     const nodes = math.compile(['a = 3', 'b = 4', 'a * b'])
   *     nodes[2].evaluate() // 12
   *
   * See also:
   *
   *    parse, evaluate
   *
   * @param {string | string[] | Array | Matrix} expr
   *            The expression to be compiled
   * @return {{evaluate: Function} | Array.<{evaluate: Function}>} code
   *            An object with the compiled expression
   * @throws {Error}
   */ return typed(name, {
        string: function string(expr) {
            return parse(expr).compile();
        },
        'Array | Matrix': function Array__Matrix(expr) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["deepMap"])(expr, function(entry) {
                return parse(entry).compile();
            });
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/function/evaluate.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createEvaluate": (()=>createEvaluate)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/collection.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/map.js [app-client] (ecmascript)");
;
;
;
var name = 'evaluate';
var dependencies = [
    'typed',
    'parse'
];
var createEvaluate = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, parse } = _ref;
    /**
   * Evaluate an expression.
   *
   * The expression parser does not use JavaScript. Its syntax is close
   * to JavaScript but more suited for mathematical expressions.
   * See [https://mathjs.org/docs/expressions/syntax.html](https://mathjs.org/docs/expressions/syntax.html) to learn
   * the syntax and get an overview of the exact differences from JavaScript.
   *
   * Note the evaluating arbitrary expressions may involve security risks,
   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.
   *
   * Syntax:
   *
   *     math.evaluate(expr)
   *     math.evaluate(expr, scope)
   *     math.evaluate([expr1, expr2, expr3, ...])
   *     math.evaluate([expr1, expr2, expr3, ...], scope)
   *
   * Example:
   *
   *     math.evaluate('(2+3)/4')                // 1.25
   *     math.evaluate('sqrt(3^2 + 4^2)')        // 5
   *     math.evaluate('sqrt(-4)')               // 2i
   *     math.evaluate(['a=3', 'b=4', 'a*b'])    // [3, 4, 12]
   *
   *     let scope = {a:3, b:4}
   *     math.evaluate('a * b', scope)           // 12
   *
   * See also:
   *
   *    parse, compile
   *
   * @param {string | string[] | Matrix} expr   The expression to be evaluated
   * @param {Object} [scope]                    Scope to read/write variables
   * @return {*} The result of the expression
   * @throws {Error}
   */ return typed(name, {
        string: function string(expr) {
            var scope = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createEmptyMap"])();
            return parse(expr).compile().evaluate(scope);
        },
        'string, Map | Object': function string_Map__Object(expr, scope) {
            return parse(expr).compile().evaluate(scope);
        },
        'Array | Matrix': function Array__Matrix(expr) {
            var scope = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createEmptyMap"])();
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["deepMap"])(expr, function(entry) {
                return parse(entry).compile().evaluate(scope);
            });
        },
        'Array | Matrix, Map | Object': function Array__Matrix_Map__Object(expr, scope) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["deepMap"])(expr, function(entry) {
                return parse(entry).compile().evaluate(scope);
            });
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/Parser.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createParserClass": (()=>createParserClass)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/map.js [app-client] (ecmascript)");
;
;
var name = 'Parser';
var dependencies = [
    'evaluate',
    'parse'
];
var createParserClass = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { evaluate, parse } = _ref;
    /**
   * @constructor Parser
   * Parser contains methods to evaluate or parse expressions, and has a number
   * of convenience methods to get, set, and remove variables from memory. Parser
   * keeps a scope containing variables in memory, which is used for all
   * evaluations.
   *
   * Methods:
   *    const result = parser.evaluate(expr)  // evaluate an expression
   *    const value = parser.get(name)        // retrieve a variable from the parser
   *    const values = parser.getAll()        // retrieve all defined variables
   *    parser.set(name, value)               // set a variable in the parser
   *    parser.remove(name)                   // clear a variable from the
   *                                          // parsers scope
   *    parser.clear()                        // clear the parsers scope
   *
   * Example usage:
   *    const parser = new Parser()
   *    // Note: there is a convenience method which can be used instead:
   *    // const parser = new math.parser()
   *
   *    // evaluate expressions
   *    parser.evaluate('sqrt(3^2 + 4^2)')        // 5
   *    parser.evaluate('sqrt(-4)')               // 2i
   *    parser.evaluate('2 inch in cm')           // 5.08 cm
   *    parser.evaluate('cos(45 deg)')            // 0.7071067811865476
   *
   *    // define variables and functions
   *    parser.evaluate('x = 7 / 2')              // 3.5
   *    parser.evaluate('x + 3')                  // 6.5
   *    parser.evaluate('f(x, y) = x^y')          // f(x, y)
   *    parser.evaluate('f(2, 3)')                // 8
   *
   *    // get and set variables and functions
   *    const x = parser.get('x')                 // 3.5
   *    const f = parser.get('f')                 // function
   *    const g = f(3, 2)                         // 9
   *    parser.set('h', 500)
   *    const i = parser.evaluate('h / 2')        // 250
   *    parser.set('hello', function (name) {
   *        return 'hello, ' + name + '!'
   *    })
   *    parser.evaluate('hello("user")')          // "hello, user!"
   *
   *    // clear defined functions and variables
   *    parser.clear()
   *
   */ function Parser() {
        if (!(this instanceof Parser)) {
            throw new SyntaxError('Constructor must be called with the new operator');
        }
        Object.defineProperty(this, 'scope', {
            value: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createEmptyMap"])(),
            writable: false
        });
    }
    /**
   * Attach type information
   */ Parser.prototype.type = 'Parser';
    Parser.prototype.isParser = true;
    /**
   * Parse and evaluate the given expression
   * @param {string | string[]} expr   A string containing an expression,
   *                                   for example "2+3", or a list with expressions
   * @return {*} result     The result, or undefined when the expression was empty
   * @throws {Error}
   */ Parser.prototype.evaluate = function(expr) {
        // TODO: validate arguments
        return evaluate(expr, this.scope);
    };
    /**
   * Get a variable (a function or variable) by name from the parsers scope.
   * Returns undefined when not found
   * @param {string} name
   * @return {* | undefined} value
   */ Parser.prototype.get = function(name) {
        // TODO: validate arguments
        if (this.scope.has(name)) {
            return this.scope.get(name);
        }
    };
    /**
   * Get a map with all defined variables
   * @return {Object} values
   */ Parser.prototype.getAll = function() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toObject"])(this.scope);
    };
    /**
   * Get a map with all defined variables
   * @return {Map} values
   */ Parser.prototype.getAllAsMap = function() {
        return this.scope;
    };
    function isValidVariableName(name) {
        if (name.length === 0) {
            return false;
        }
        for(var i = 0; i < name.length; i++){
            var cPrev = name.charAt(i - 1);
            var c = name.charAt(i);
            var cNext = name.charAt(i + 1);
            var valid = parse.isAlpha(c, cPrev, cNext) || i > 0 && parse.isDigit(c);
            if (!valid) {
                return false;
            }
        }
        return true;
    }
    /**
   * Set a symbol (a function or variable) by name from the parsers scope.
   * @param {string} name
   * @param {* | undefined} value
   */ Parser.prototype.set = function(name, value) {
        if (!isValidVariableName(name)) {
            throw new Error("Invalid variable name: '".concat(name, "'. Variable names must follow the specified rules."));
        }
        this.scope.set(name, value);
        return value;
    };
    /**
   * Remove a variable from the parsers scope
   * @param {string} name
   */ Parser.prototype.remove = function(name) {
        this.scope.delete(name);
    };
    /**
   * Clear the scope with variables and functions
   */ Parser.prototype.clear = function() {
        this.scope.clear();
    };
    return Parser;
}, {
    isClass: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/function/parser.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createParser": (()=>createParser)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
;
var name = 'parser';
var dependencies = [
    'typed',
    'Parser'
];
var createParser = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, Parser } = _ref;
    /**
   * Create a parser. The function creates a new `math.Parser` object.
   *
   * Syntax:
   *
   *    math.parser()
   *
   * Examples:
   *
   *     const parser = new math.parser()
   *
   *     // evaluate expressions
   *     const a = parser.evaluate('sqrt(3^2 + 4^2)') // 5
   *     const b = parser.evaluate('sqrt(-4)')        // 2i
   *     const c = parser.evaluate('2 inch in cm')    // 5.08 cm
   *     const d = parser.evaluate('cos(45 deg)')     // 0.7071067811865476
   *
   *     // define variables and functions
   *     parser.evaluate('x = 7 / 2')             // 3.5
   *     parser.evaluate('x + 3')                 // 6.5
   *     parser.evaluate('f(x, y) = x^y')         // f(x, y)
   *     parser.evaluate('f(2, 3)')               // 8
   *
   *     // get and set variables and functions
   *     const x = parser.get('x')                // 3.5
   *     const f = parser.get('f')                // function
   *     const g = f(3, 2)                        // 9
   *     parser.set('h', 500)
   *     const i = parser.evaluate('h / 2')       // 250
   *     parser.set('hello', function (name) {
   *       return 'hello, ' + name + '!'
   *     })
   *     parser.evaluate('hello("user")')         // "hello, user!"
   *
   *     // clear defined functions and variables
   *     parser.clear()
   *
   * See also:
   *
   *    evaluate, compile, parse
   *
   * @return {Parser} Parser
   */ return typed(name, {
        '': function _() {
            return new Parser();
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/Help.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createHelpClass": (()=>createHelpClass)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/object.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/string.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
;
;
;
;
var name = 'Help';
var dependencies = [
    'evaluate'
];
var createHelpClass = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { evaluate } = _ref;
    /**
   * Documentation object
   * @param {Object} doc  Object containing properties:
   *                      {string} name
   *                      {string} category
   *                      {string} description
   *                      {string[]} syntax
   *                      {string[]} examples
   *                      {string[]} seealso
   * @constructor
   */ function Help(doc) {
        if (!(this instanceof Help)) {
            throw new SyntaxError('Constructor must be called with the new operator');
        }
        if (!doc) throw new Error('Argument "doc" missing');
        this.doc = doc;
    }
    /**
   * Attach type information
   */ Help.prototype.type = 'Help';
    Help.prototype.isHelp = true;
    /**
   * Generate a string representation of the Help object
   * @return {string} Returns a string
   * @private
   */ Help.prototype.toString = function() {
        var doc = this.doc || {};
        var desc = '\n';
        if (doc.name) {
            desc += 'Name: ' + doc.name + '\n\n';
        }
        if (doc.category) {
            desc += 'Category: ' + doc.category + '\n\n';
        }
        if (doc.description) {
            desc += 'Description:\n    ' + doc.description + '\n\n';
        }
        if (doc.syntax) {
            desc += 'Syntax:\n    ' + doc.syntax.join('\n    ') + '\n\n';
        }
        if (doc.examples) {
            desc += 'Examples:\n';
            // after evaluating the examples, we restore config in case the examples
            // did change the config.
            var configChanged = false;
            var originalConfig = evaluate('config()');
            var scope = {
                config: (newConfig)=>{
                    configChanged = true;
                    return evaluate('config(newConfig)', {
                        newConfig
                    });
                }
            };
            for(var i = 0; i < doc.examples.length; i++){
                var expr = doc.examples[i];
                desc += '    ' + expr + '\n';
                var res = void 0;
                try {
                    // note: res can be undefined when `expr` is an empty string
                    res = evaluate(expr, scope);
                } catch (e) {
                    res = e;
                }
                if (res !== undefined && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isHelp"])(res)) {
                    desc += '        ' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["format"])(res, {
                        precision: 14
                    }) + '\n';
                }
            }
            desc += '\n';
            if (configChanged) {
                evaluate('config(originalConfig)', {
                    originalConfig
                });
            }
        }
        if (doc.mayThrow && doc.mayThrow.length) {
            desc += 'Throws: ' + doc.mayThrow.join(', ') + '\n\n';
        }
        if (doc.seealso && doc.seealso.length) {
            desc += 'See also: ' + doc.seealso.join(', ') + '\n';
        }
        return desc;
    };
    /**
   * Export the help object to JSON
   */ Help.prototype.toJSON = function() {
        var obj = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clone"])(this.doc);
        obj.mathjs = 'Help';
        return obj;
    };
    /**
   * Instantiate a Help object from a JSON object
   * @param {Object} json
   * @returns {Help} Returns a new Help object
   */ Help.fromJSON = function(json) {
        var doc = {};
        Object.keys(json).filter((prop)=>prop !== 'mathjs').forEach((prop)=>{
            doc[prop] = json[prop];
        });
        return new Help(doc);
    };
    /**
   * Returns a string representation of the Help object
   */ Help.prototype.valueOf = Help.prototype.toString;
    return Help;
}, {
    isClass: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/e.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "eDocs": (()=>eDocs)
});
var eDocs = {
    name: 'e',
    category: 'Constants',
    syntax: [
        'e'
    ],
    description: 'Euler\'s number, the base of the natural logarithm. Approximately equal to 2.71828',
    examples: [
        'e',
        'e ^ 2',
        'exp(2)',
        'log(e)'
    ],
    seealso: [
        'exp'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/false.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "falseDocs": (()=>falseDocs)
});
var falseDocs = {
    name: 'false',
    category: 'Constants',
    syntax: [
        'false'
    ],
    description: 'Boolean value false',
    examples: [
        'false'
    ],
    seealso: [
        'true'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/i.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "iDocs": (()=>iDocs)
});
var iDocs = {
    name: 'i',
    category: 'Constants',
    syntax: [
        'i'
    ],
    description: 'Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.',
    examples: [
        'i',
        'i * i',
        'sqrt(-1)'
    ],
    seealso: []
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/Infinity.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "InfinityDocs": (()=>InfinityDocs)
});
var InfinityDocs = {
    name: 'Infinity',
    category: 'Constants',
    syntax: [
        'Infinity'
    ],
    description: 'Infinity, a number which is larger than the maximum number that can be handled by a floating point number.',
    examples: [
        'Infinity',
        '1 / 0'
    ],
    seealso: []
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/LN10.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "LN10Docs": (()=>LN10Docs)
});
var LN10Docs = {
    name: 'LN10',
    category: 'Constants',
    syntax: [
        'LN10'
    ],
    description: 'Returns the natural logarithm of 10, approximately equal to 2.302',
    examples: [
        'LN10',
        'log(10)'
    ],
    seealso: []
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/LN2.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "LN2Docs": (()=>LN2Docs)
});
var LN2Docs = {
    name: 'LN2',
    category: 'Constants',
    syntax: [
        'LN2'
    ],
    description: 'Returns the natural logarithm of 2, approximately equal to 0.693',
    examples: [
        'LN2',
        'log(2)'
    ],
    seealso: []
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/LOG10E.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "LOG10EDocs": (()=>LOG10EDocs)
});
var LOG10EDocs = {
    name: 'LOG10E',
    category: 'Constants',
    syntax: [
        'LOG10E'
    ],
    description: 'Returns the base-10 logarithm of E, approximately equal to 0.434',
    examples: [
        'LOG10E',
        'log(e, 10)'
    ],
    seealso: []
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/LOG2E.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "LOG2EDocs": (()=>LOG2EDocs)
});
var LOG2EDocs = {
    name: 'LOG2E',
    category: 'Constants',
    syntax: [
        'LOG2E'
    ],
    description: 'Returns the base-2 logarithm of E, approximately equal to 1.442',
    examples: [
        'LOG2E',
        'log(e, 2)'
    ],
    seealso: []
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/NaN.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "NaNDocs": (()=>NaNDocs)
});
var NaNDocs = {
    name: 'NaN',
    category: 'Constants',
    syntax: [
        'NaN'
    ],
    description: 'Not a number',
    examples: [
        'NaN',
        '0 / 0'
    ],
    seealso: []
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/null.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "nullDocs": (()=>nullDocs)
});
var nullDocs = {
    name: 'null',
    category: 'Constants',
    syntax: [
        'null'
    ],
    description: 'Value null',
    examples: [
        'null'
    ],
    seealso: [
        'true',
        'false'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/phi.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "phiDocs": (()=>phiDocs)
});
var phiDocs = {
    name: 'phi',
    category: 'Constants',
    syntax: [
        'phi'
    ],
    description: 'Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...',
    examples: [
        'phi'
    ],
    seealso: []
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/pi.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "piDocs": (()=>piDocs)
});
var piDocs = {
    name: 'pi',
    category: 'Constants',
    syntax: [
        'pi'
    ],
    description: 'The number pi is a mathematical constant that is the ratio of a circle\'s circumference to its diameter, and is approximately equal to 3.14159',
    examples: [
        'pi',
        'sin(pi/2)'
    ],
    seealso: [
        'tau'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/SQRT1_2.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "SQRT12Docs": (()=>SQRT12Docs)
});
var SQRT12Docs = {
    name: 'SQRT1_2',
    category: 'Constants',
    syntax: [
        'SQRT1_2'
    ],
    description: 'Returns the square root of 1/2, approximately equal to 0.707',
    examples: [
        'SQRT1_2',
        'sqrt(1/2)'
    ],
    seealso: []
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/SQRT2.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "SQRT2Docs": (()=>SQRT2Docs)
});
var SQRT2Docs = {
    name: 'SQRT2',
    category: 'Constants',
    syntax: [
        'SQRT2'
    ],
    description: 'Returns the square root of 2, approximately equal to 1.414',
    examples: [
        'SQRT2',
        'sqrt(2)'
    ],
    seealso: []
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/tau.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "tauDocs": (()=>tauDocs)
});
var tauDocs = {
    name: 'tau',
    category: 'Constants',
    syntax: [
        'tau'
    ],
    description: 'Tau is the ratio constant of a circle\'s circumference to radius, equal to 2 * pi, approximately 6.2832.',
    examples: [
        'tau',
        '2 * pi'
    ],
    seealso: [
        'pi'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/true.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "trueDocs": (()=>trueDocs)
});
var trueDocs = {
    name: 'true',
    category: 'Constants',
    syntax: [
        'true'
    ],
    description: 'Boolean value true',
    examples: [
        'true'
    ],
    seealso: [
        'false'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/version.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "versionDocs": (()=>versionDocs)
});
var versionDocs = {
    name: 'version',
    category: 'Constants',
    syntax: [
        'version'
    ],
    description: 'A string with the version number of math.js',
    examples: [
        'version'
    ],
    seealso: []
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/bignumber.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "bignumberDocs": (()=>bignumberDocs)
});
var bignumberDocs = {
    name: 'bignumber',
    category: 'Construction',
    syntax: [
        'bignumber(x)'
    ],
    description: 'Create a big number from a number or string.',
    examples: [
        '0.1 + 0.2',
        'bignumber(0.1) + bignumber(0.2)',
        'bignumber("7.2")',
        'bignumber("7.2e500")',
        'bignumber([0.1, 0.2, 0.3])'
    ],
    seealso: [
        'boolean',
        'bigint',
        'complex',
        'fraction',
        'index',
        'matrix',
        'string',
        'unit'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/bigint.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "bigintDocs": (()=>bigintDocs)
});
var bigintDocs = {
    name: 'bigint',
    category: 'Construction',
    syntax: [
        'bigint(x)'
    ],
    description: 'Create a bigint, an integer with an arbitrary number of digits, from a number or string.',
    examples: [
        '123123123123123123 # a large number will lose digits',
        'bigint("123123123123123123")',
        'bignumber(["1", "3", "5"])'
    ],
    seealso: [
        'boolean',
        'bignumber',
        'number',
        'complex',
        'fraction',
        'index',
        'matrix',
        'string',
        'unit'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/boolean.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "booleanDocs": (()=>booleanDocs)
});
var booleanDocs = {
    name: 'boolean',
    category: 'Construction',
    syntax: [
        'x',
        'boolean(x)'
    ],
    description: 'Convert a string or number into a boolean.',
    examples: [
        'boolean(0)',
        'boolean(1)',
        'boolean(3)',
        'boolean("true")',
        'boolean("false")',
        'boolean([1, 0, 1, 1])'
    ],
    seealso: [
        'bignumber',
        'complex',
        'index',
        'matrix',
        'number',
        'string',
        'unit'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/complex.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "complexDocs": (()=>complexDocs)
});
var complexDocs = {
    name: 'complex',
    category: 'Construction',
    syntax: [
        'complex()',
        'complex(re, im)',
        'complex(string)'
    ],
    description: 'Create a complex number.',
    examples: [
        'complex()',
        'complex(2, 3)',
        'complex("7 - 2i")'
    ],
    seealso: [
        'bignumber',
        'boolean',
        'index',
        'matrix',
        'number',
        'string',
        'unit'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/createUnit.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createUnitDocs": (()=>createUnitDocs)
});
var createUnitDocs = {
    name: 'createUnit',
    category: 'Construction',
    syntax: [
        'createUnit(definitions)',
        'createUnit(name, definition)'
    ],
    description: 'Create a user-defined unit and register it with the Unit type.',
    examples: [
        'createUnit("foo")',
        'createUnit("knot", {definition: "0.514444444 m/s", aliases: ["knots", "kt", "kts"]})',
        'createUnit("mph", "1 mile/hour")'
    ],
    seealso: [
        'unit',
        'splitUnit'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/fraction.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "fractionDocs": (()=>fractionDocs)
});
var fractionDocs = {
    name: 'fraction',
    category: 'Construction',
    syntax: [
        'fraction(num)',
        'fraction(matrix)',
        'fraction(num,den)',
        'fraction({n: num, d: den})'
    ],
    description: 'Create a fraction from a number or from integer numerator and denominator.',
    examples: [
        'fraction(0.125)',
        'fraction(1, 3) + fraction(2, 5)',
        'fraction({n: 333, d: 53})',
        'fraction([sqrt(9), sqrt(10), sqrt(11)])'
    ],
    seealso: [
        'bignumber',
        'boolean',
        'complex',
        'index',
        'matrix',
        'string',
        'unit'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/index.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "indexDocs": (()=>indexDocs)
});
var indexDocs = {
    name: 'index',
    category: 'Construction',
    syntax: [
        '[start]',
        '[start:end]',
        '[start:step:end]',
        '[start1, start 2, ...]',
        '[start1:end1, start2:end2, ...]',
        '[start1:step1:end1, start2:step2:end2, ...]'
    ],
    description: 'Create an index to get or replace a subset of a matrix',
    examples: [
        'A = [1, 2, 3; 4, 5, 6]',
        'A[1, :]',
        'A[1, 2] = 50',
        'A[1:2, 1:2] = 1',
        'B = [1, 2, 3]',
        'B[B>1 and B<3]'
    ],
    seealso: [
        'bignumber',
        'boolean',
        'complex',
        'matrix,',
        'number',
        'range',
        'string',
        'unit'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/matrix.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "matrixDocs": (()=>matrixDocs)
});
var matrixDocs = {
    name: 'matrix',
    category: 'Construction',
    syntax: [
        '[]',
        '[a1, b1, ...; a2, b2, ...]',
        'matrix()',
        'matrix("dense")',
        'matrix([...])'
    ],
    description: 'Create a matrix.',
    examples: [
        '[]',
        '[1, 2, 3]',
        '[1, 2, 3; 4, 5, 6]',
        'matrix()',
        'matrix([3, 4])',
        'matrix([3, 4; 5, 6], "sparse")',
        'matrix([3, 4; 5, 6], "sparse", "number")'
    ],
    seealso: [
        'bignumber',
        'boolean',
        'complex',
        'index',
        'number',
        'string',
        'unit',
        'sparse'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/number.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "numberDocs": (()=>numberDocs)
});
var numberDocs = {
    name: 'number',
    category: 'Construction',
    syntax: [
        'x',
        'number(x)',
        'number(unit, valuelessUnit)'
    ],
    description: 'Create a number or convert a string or boolean into a number.',
    examples: [
        '2',
        '2e3',
        '4.05',
        'number(2)',
        'number("7.2")',
        'number(true)',
        'number([true, false, true, true])',
        'number(unit("52cm"), "m")'
    ],
    seealso: [
        'bignumber',
        'bigint',
        'boolean',
        'complex',
        'fraction',
        'index',
        'matrix',
        'string',
        'unit'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/sparse.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "sparseDocs": (()=>sparseDocs)
});
var sparseDocs = {
    name: 'sparse',
    category: 'Construction',
    syntax: [
        'sparse()',
        'sparse([a1, b1, ...; a1, b2, ...])',
        'sparse([a1, b1, ...; a1, b2, ...], "number")'
    ],
    description: 'Create a sparse matrix.',
    examples: [
        'sparse()',
        'sparse([3, 4; 5, 6])',
        'sparse([3, 0; 5, 0], "number")'
    ],
    seealso: [
        'bignumber',
        'boolean',
        'complex',
        'index',
        'number',
        'string',
        'unit',
        'matrix'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/splitUnit.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "splitUnitDocs": (()=>splitUnitDocs)
});
var splitUnitDocs = {
    name: 'splitUnit',
    category: 'Construction',
    syntax: [
        'splitUnit(unit: Unit, parts: Unit[])'
    ],
    description: 'Split a unit in an array of units whose sum is equal to the original unit.',
    examples: [
        'splitUnit(1 m, ["feet", "inch"])'
    ],
    seealso: [
        'unit',
        'createUnit'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/string.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "stringDocs": (()=>stringDocs)
});
var stringDocs = {
    name: 'string',
    category: 'Construction',
    syntax: [
        '"text"',
        'string(x)'
    ],
    description: 'Create a string or convert a value to a string',
    examples: [
        '"Hello World!"',
        'string(4.2)',
        'string(3 + 2i)'
    ],
    seealso: [
        'bignumber',
        'boolean',
        'complex',
        'index',
        'matrix',
        'number',
        'unit'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/unit.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "unitDocs": (()=>unitDocs)
});
var unitDocs = {
    name: 'unit',
    category: 'Construction',
    syntax: [
        'value unit',
        'unit(value, unit)',
        'unit(string)'
    ],
    description: 'Create a unit.',
    examples: [
        '5.5 mm',
        '3 inch',
        'unit(7.1, "kilogram")',
        'unit("23 deg")'
    ],
    seealso: [
        'bignumber',
        'boolean',
        'complex',
        'index',
        'matrix',
        'number',
        'string'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/core/config.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "configDocs": (()=>configDocs)
});
var configDocs = {
    name: 'config',
    category: 'Core',
    syntax: [
        'config()',
        'config(options)'
    ],
    description: 'Get configuration or change configuration.',
    examples: [
        'config()',
        '1/3 + 1/4',
        'config({number: "Fraction"})',
        '1/3 + 1/4'
    ],
    seealso: []
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/core/import.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "importDocs": (()=>importDocs)
});
var importDocs = {
    name: 'import',
    category: 'Core',
    syntax: [
        'import(functions)',
        'import(functions, options)'
    ],
    description: 'Import functions or constants from an object.',
    examples: [
        'import({myFn: f(x)=x^2, myConstant: 32 })',
        'myFn(2)',
        'myConstant'
    ],
    seealso: []
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/core/typed.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "typedDocs": (()=>typedDocs)
});
var typedDocs = {
    name: 'typed',
    category: 'Core',
    syntax: [
        'typed(signatures)',
        'typed(name, signatures)'
    ],
    description: 'Create a typed function.',
    examples: [
        'double = typed({ "number": f(x)=x+x, "string": f(x)=concat(x,x) })',
        'double(2)',
        'double("hello")'
    ],
    seealso: []
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/derivative.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "derivativeDocs": (()=>derivativeDocs)
});
var derivativeDocs = {
    name: 'derivative',
    category: 'Algebra',
    syntax: [
        'derivative(expr, variable)',
        'derivative(expr, variable, {simplify: boolean})'
    ],
    description: 'Takes the derivative of an expression expressed in parser Nodes. The derivative will be taken over the supplied variable in the second parameter. If there are multiple variables in the expression, it will return a partial derivative.',
    examples: [
        'derivative("2x^3", "x")',
        'derivative("2x^3", "x", {simplify: false})',
        'derivative("2x^2 + 3x + 4", "x")',
        'derivative("sin(2x)", "x")',
        'f = parse("x^2 + x")',
        'x = parse("x")',
        'df = derivative(f, x)',
        'df.evaluate({x: 3})'
    ],
    seealso: [
        'simplify',
        'parse',
        'evaluate'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/leafCount.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "leafCountDocs": (()=>leafCountDocs)
});
var leafCountDocs = {
    name: 'leafCount',
    category: 'Algebra',
    syntax: [
        'leafCount(expr)'
    ],
    description: 'Computes the number of leaves in the parse tree of the given expression',
    examples: [
        'leafCount("e^(i*pi)-1")',
        'leafCount(parse("{a: 22/7, b: 10^(1/2)}"))'
    ],
    seealso: [
        'simplify'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/lsolve.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "lsolveDocs": (()=>lsolveDocs)
});
var lsolveDocs = {
    name: 'lsolve',
    category: 'Algebra',
    syntax: [
        'x=lsolve(L, b)'
    ],
    description: 'Finds one solution of the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',
    examples: [
        'a = [-2, 3; 2, 1]',
        'b = [11, 9]',
        'x = lsolve(a, b)'
    ],
    seealso: [
        'lsolveAll',
        'lup',
        'lusolve',
        'usolve',
        'matrix',
        'sparse'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/lsolveAll.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "lsolveAllDocs": (()=>lsolveAllDocs)
});
var lsolveAllDocs = {
    name: 'lsolveAll',
    category: 'Algebra',
    syntax: [
        'x=lsolveAll(L, b)'
    ],
    description: 'Finds all solutions of the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',
    examples: [
        'a = [-2, 3; 2, 1]',
        'b = [11, 9]',
        'x = lsolve(a, b)'
    ],
    seealso: [
        'lsolve',
        'lup',
        'lusolve',
        'usolve',
        'matrix',
        'sparse'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/lup.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "lupDocs": (()=>lupDocs)
});
var lupDocs = {
    name: 'lup',
    category: 'Algebra',
    syntax: [
        'lup(m)'
    ],
    description: 'Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U',
    examples: [
        'lup([[2, 1], [1, 4]])',
        'lup(matrix([[2, 1], [1, 4]]))',
        'lup(sparse([[2, 1], [1, 4]]))'
    ],
    seealso: [
        'lusolve',
        'lsolve',
        'usolve',
        'matrix',
        'sparse',
        'slu',
        'qr'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/lusolve.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "lusolveDocs": (()=>lusolveDocs)
});
var lusolveDocs = {
    name: 'lusolve',
    category: 'Algebra',
    syntax: [
        'x=lusolve(A, b)',
        'x=lusolve(lu, b)'
    ],
    description: 'Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.',
    examples: [
        'a = [-2, 3; 2, 1]',
        'b = [11, 9]',
        'x = lusolve(a, b)'
    ],
    seealso: [
        'lup',
        'slu',
        'lsolve',
        'usolve',
        'matrix',
        'sparse'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/polynomialRoot.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "polynomialRootDocs": (()=>polynomialRootDocs)
});
var polynomialRootDocs = {
    name: 'polynomialRoot',
    category: 'Algebra',
    syntax: [
        'x=polynomialRoot(-6, 3)',
        'x=polynomialRoot(4, -4, 1)',
        'x=polynomialRoot(-8, 12, -6, 1)'
    ],
    description: 'Finds the roots of a univariate polynomial given by its coefficients starting from constant, linear, and so on, increasing in degree.',
    examples: [
        'a = polynomialRoot(-6, 11, -6, 1)'
    ],
    seealso: [
        'cbrt',
        'sqrt'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/qr.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "qrDocs": (()=>qrDocs)
});
var qrDocs = {
    name: 'qr',
    category: 'Algebra',
    syntax: [
        'qr(A)'
    ],
    description: 'Calculates the Matrix QR decomposition. Matrix `A` is decomposed in two matrices (`Q`, `R`) where `Q` is an orthogonal matrix and `R` is an upper triangular matrix.',
    examples: [
        'qr([[1, -1,  4], [1,  4, -2], [1,  4,  2], [1,  -1, 0]])'
    ],
    seealso: [
        'lup',
        'slu',
        'matrix'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/rationalize.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "rationalizeDocs": (()=>rationalizeDocs)
});
var rationalizeDocs = {
    name: 'rationalize',
    category: 'Algebra',
    syntax: [
        'rationalize(expr)',
        'rationalize(expr, scope)',
        'rationalize(expr, scope, detailed)'
    ],
    description: 'Transform a rationalizable expression in a rational fraction. If rational fraction is one variable polynomial then converts the numerator and denominator in canonical form, with decreasing exponents, returning the coefficients of numerator.',
    examples: [
        'rationalize("2x/y - y/(x+1)")',
        'rationalize("2x/y - y/(x+1)", true)'
    ],
    seealso: [
        'simplify'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/resolve.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "resolveDocs": (()=>resolveDocs)
});
var resolveDocs = {
    name: 'resolve',
    category: 'Algebra',
    syntax: [
        'resolve(node, scope)'
    ],
    description: 'Recursively substitute variables in an expression tree.',
    examples: [
        'resolve(parse("1 + x"), { x: 7 })',
        'resolve(parse("size(text)"), { text: "Hello World" })',
        'resolve(parse("x + y"), { x: parse("3z") })',
        'resolve(parse("3x"), { x: parse("y+z"), z: parse("w^y") })'
    ],
    seealso: [
        'simplify',
        'evaluate'
    ],
    mayThrow: [
        'ReferenceError'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/simplify.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "simplifyDocs": (()=>simplifyDocs)
});
var simplifyDocs = {
    name: 'simplify',
    category: 'Algebra',
    syntax: [
        'simplify(expr)',
        'simplify(expr, rules)'
    ],
    description: 'Simplify an expression tree.',
    examples: [
        'simplify("3 + 2 / 4")',
        'simplify("2x + x")',
        'f = parse("x * (x + 2 + x)")',
        'simplified = simplify(f)',
        'simplified.evaluate({x: 2})'
    ],
    seealso: [
        'simplifyCore',
        'derivative',
        'evaluate',
        'parse',
        'rationalize',
        'resolve'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/simplifyConstant.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "simplifyConstantDocs": (()=>simplifyConstantDocs)
});
var simplifyConstantDocs = {
    name: 'simplifyConstant',
    category: 'Algebra',
    syntax: [
        'simplifyConstant(expr)',
        'simplifyConstant(expr, options)'
    ],
    description: 'Replace constant subexpressions of node with their values.',
    examples: [
        'simplifyConstant("(3-3)*x")',
        'simplifyConstant(parse("z-cos(tau/8)"))'
    ],
    seealso: [
        'simplify',
        'simplifyCore',
        'evaluate'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/simplifyCore.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "simplifyCoreDocs": (()=>simplifyCoreDocs)
});
var simplifyCoreDocs = {
    name: 'simplifyCore',
    category: 'Algebra',
    syntax: [
        'simplifyCore(node)'
    ],
    description: 'Perform simple one-pass simplifications on an expression tree.',
    examples: [
        'simplifyCore(parse("0*x"))',
        'simplifyCore(parse("(x+0)*2"))'
    ],
    seealso: [
        'simplify',
        'simplifyConstant',
        'evaluate'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/slu.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "sluDocs": (()=>sluDocs)
});
var sluDocs = {
    name: 'slu',
    category: 'Algebra',
    syntax: [
        'slu(A, order, threshold)'
    ],
    description: 'Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U',
    examples: [
        'slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)'
    ],
    seealso: [
        'lusolve',
        'lsolve',
        'usolve',
        'matrix',
        'sparse',
        'lup',
        'qr'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/symbolicEqual.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "symbolicEqualDocs": (()=>symbolicEqualDocs)
});
var symbolicEqualDocs = {
    name: 'symbolicEqual',
    category: 'Algebra',
    syntax: [
        'symbolicEqual(expr1, expr2)',
        'symbolicEqual(expr1, expr2, options)'
    ],
    description: 'Returns true if the difference of the expressions simplifies to 0',
    examples: [
        'symbolicEqual("x*y","y*x")',
        'symbolicEqual("abs(x^2)", "x^2")',
        'symbolicEqual("abs(x)", "x", {context: {abs: {trivial: true}}})'
    ],
    seealso: [
        'simplify',
        'evaluate'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/usolve.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "usolveDocs": (()=>usolveDocs)
});
var usolveDocs = {
    name: 'usolve',
    category: 'Algebra',
    syntax: [
        'x=usolve(U, b)'
    ],
    description: 'Finds one solution of the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',
    examples: [
        'x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'
    ],
    seealso: [
        'usolveAll',
        'lup',
        'lusolve',
        'lsolve',
        'matrix',
        'sparse'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/usolveAll.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "usolveAllDocs": (()=>usolveAllDocs)
});
var usolveAllDocs = {
    name: 'usolveAll',
    category: 'Algebra',
    syntax: [
        'x=usolve(U, b)'
    ],
    description: 'Finds all solutions of the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',
    examples: [
        'x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'
    ],
    seealso: [
        'usolve',
        'lup',
        'lusolve',
        'lsolve',
        'matrix',
        'sparse'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/abs.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "absDocs": (()=>absDocs)
});
var absDocs = {
    name: 'abs',
    category: 'Arithmetic',
    syntax: [
        'abs(x)'
    ],
    description: 'Compute the absolute value.',
    examples: [
        'abs(3.5)',
        'abs(-4.2)'
    ],
    seealso: [
        'sign'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/add.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "addDocs": (()=>addDocs)
});
var addDocs = {
    name: 'add',
    category: 'Operators',
    syntax: [
        'x + y',
        'add(x, y)'
    ],
    description: 'Add two values.',
    examples: [
        'a = 2.1 + 3.6',
        'a - 3.6',
        '3 + 2i',
        '3 cm + 2 inch',
        '"2.3" + "4"'
    ],
    seealso: [
        'subtract'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/cbrt.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "cbrtDocs": (()=>cbrtDocs)
});
var cbrtDocs = {
    name: 'cbrt',
    category: 'Arithmetic',
    syntax: [
        'cbrt(x)',
        'cbrt(x, allRoots)'
    ],
    description: 'Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned',
    examples: [
        'cbrt(64)',
        'cube(4)',
        'cbrt(-8)',
        'cbrt(2 + 3i)',
        'cbrt(8i)',
        'cbrt(8i, true)',
        'cbrt(27 m^3)'
    ],
    seealso: [
        'square',
        'sqrt',
        'cube',
        'multiply'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/ceil.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ceilDocs": (()=>ceilDocs)
});
var ceilDocs = {
    name: 'ceil',
    category: 'Arithmetic',
    syntax: [
        'ceil(x)'
    ],
    description: 'Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.',
    examples: [
        'ceil(3.2)',
        'ceil(3.8)',
        'ceil(-4.2)'
    ],
    seealso: [
        'floor',
        'fix',
        'round'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/cube.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "cubeDocs": (()=>cubeDocs)
});
var cubeDocs = {
    name: 'cube',
    category: 'Arithmetic',
    syntax: [
        'cube(x)'
    ],
    description: 'Compute the cube of a value. The cube of x is x * x * x.',
    examples: [
        'cube(2)',
        '2^3',
        '2 * 2 * 2'
    ],
    seealso: [
        'multiply',
        'square',
        'pow'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/divide.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "divideDocs": (()=>divideDocs)
});
var divideDocs = {
    name: 'divide',
    category: 'Operators',
    syntax: [
        'x / y',
        'divide(x, y)'
    ],
    description: 'Divide two values.',
    examples: [
        'a = 2 / 3',
        'a * 3',
        '4.5 / 2',
        '3 + 4 / 2',
        '(3 + 4) / 2',
        '18 km / 4.5'
    ],
    seealso: [
        'multiply'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/dotDivide.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "dotDivideDocs": (()=>dotDivideDocs)
});
var dotDivideDocs = {
    name: 'dotDivide',
    category: 'Operators',
    syntax: [
        'x ./ y',
        'dotDivide(x, y)'
    ],
    description: 'Divide two values element wise.',
    examples: [
        'a = [1, 2, 3; 4, 5, 6]',
        'b = [2, 1, 1; 3, 2, 5]',
        'a ./ b'
    ],
    seealso: [
        'multiply',
        'dotMultiply',
        'divide'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/dotMultiply.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "dotMultiplyDocs": (()=>dotMultiplyDocs)
});
var dotMultiplyDocs = {
    name: 'dotMultiply',
    category: 'Operators',
    syntax: [
        'x .* y',
        'dotMultiply(x, y)'
    ],
    description: 'Multiply two values element wise.',
    examples: [
        'a = [1, 2, 3; 4, 5, 6]',
        'b = [2, 1, 1; 3, 2, 5]',
        'a .* b'
    ],
    seealso: [
        'multiply',
        'divide',
        'dotDivide'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/dotPow.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "dotPowDocs": (()=>dotPowDocs)
});
var dotPowDocs = {
    name: 'dotPow',
    category: 'Operators',
    syntax: [
        'x .^ y',
        'dotPow(x, y)'
    ],
    description: 'Calculates the power of x to y element wise.',
    examples: [
        'a = [1, 2, 3; 4, 5, 6]',
        'a .^ 2'
    ],
    seealso: [
        'pow'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/exp.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "expDocs": (()=>expDocs)
});
var expDocs = {
    name: 'exp',
    category: 'Arithmetic',
    syntax: [
        'exp(x)'
    ],
    description: 'Calculate the exponent of a value.',
    examples: [
        'exp(1.3)',
        'e ^ 1.3',
        'log(exp(1.3))',
        'x = 2.4',
        '(exp(i*x) == cos(x) + i*sin(x))   # Euler\'s formula'
    ],
    seealso: [
        'expm',
        'expm1',
        'pow',
        'log'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/expm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "expmDocs": (()=>expmDocs)
});
var expmDocs = {
    name: 'expm',
    category: 'Arithmetic',
    syntax: [
        'exp(x)'
    ],
    description: 'Compute the matrix exponential, expm(A) = e^A. ' + 'The matrix must be square. ' + 'Not to be confused with exp(a), which performs element-wise exponentiation.',
    examples: [
        'expm([[0,2],[0,0]])'
    ],
    seealso: [
        'exp'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/expm1.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "expm1Docs": (()=>expm1Docs)
});
var expm1Docs = {
    name: 'expm1',
    category: 'Arithmetic',
    syntax: [
        'expm1(x)'
    ],
    description: 'Calculate the value of subtracting 1 from the exponential value.',
    examples: [
        'expm1(2)',
        'pow(e, 2) - 1',
        'log(expm1(2) + 1)'
    ],
    seealso: [
        'exp',
        'pow',
        'log'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/fix.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "fixDocs": (()=>fixDocs)
});
var fixDocs = {
    name: 'fix',
    category: 'Arithmetic',
    syntax: [
        'fix(x)'
    ],
    description: 'Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.',
    examples: [
        'fix(3.2)',
        'fix(3.8)',
        'fix(-4.2)',
        'fix(-4.8)'
    ],
    seealso: [
        'ceil',
        'floor',
        'round'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/floor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "floorDocs": (()=>floorDocs)
});
var floorDocs = {
    name: 'floor',
    category: 'Arithmetic',
    syntax: [
        'floor(x)'
    ],
    description: 'Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.',
    examples: [
        'floor(3.2)',
        'floor(3.8)',
        'floor(-4.2)'
    ],
    seealso: [
        'ceil',
        'fix',
        'round'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/gcd.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "gcdDocs": (()=>gcdDocs)
});
var gcdDocs = {
    name: 'gcd',
    category: 'Arithmetic',
    syntax: [
        'gcd(a, b)',
        'gcd(a, b, c, ...)'
    ],
    description: 'Compute the greatest common divisor.',
    examples: [
        'gcd(8, 12)',
        'gcd(-4, 6)',
        'gcd(25, 15, -10)'
    ],
    seealso: [
        'lcm',
        'xgcd'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/hypot.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "hypotDocs": (()=>hypotDocs)
});
var hypotDocs = {
    name: 'hypot',
    category: 'Arithmetic',
    syntax: [
        'hypot(a, b, c, ...)',
        'hypot([a, b, c, ...])'
    ],
    description: 'Calculate the hypotenuse of a list with values.',
    examples: [
        'hypot(3, 4)',
        'sqrt(3^2 + 4^2)',
        'hypot(-2)',
        'hypot([3, 4, 5])'
    ],
    seealso: [
        'abs',
        'norm'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/invmod.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "invmodDocs": (()=>invmodDocs)
});
var invmodDocs = {
    name: 'invmod',
    category: 'Arithmetic',
    syntax: [
        'invmod(a, b)'
    ],
    description: 'Calculate the (modular) multiplicative inverse of a modulo b. Solution to the equation ax ≣ 1 (mod b)',
    examples: [
        'invmod(8, 12)',
        'invmod(7, 13)',
        'invmod(15151, 15122)'
    ],
    seealso: [
        'gcd',
        'xgcd'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/lcm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "lcmDocs": (()=>lcmDocs)
});
var lcmDocs = {
    name: 'lcm',
    category: 'Arithmetic',
    syntax: [
        'lcm(x, y)'
    ],
    description: 'Compute the least common multiple.',
    examples: [
        'lcm(4, 6)',
        'lcm(6, 21)',
        'lcm(6, 21, 5)'
    ],
    seealso: [
        'gcd'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/log.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "logDocs": (()=>logDocs)
});
var logDocs = {
    name: 'log',
    category: 'Arithmetic',
    syntax: [
        'log(x)',
        'log(x, base)'
    ],
    description: 'Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).',
    examples: [
        'log(3.5)',
        'a = log(2.4)',
        'exp(a)',
        '10 ^ 4',
        'log(10000, 10)',
        'log(10000) / log(10)',
        'b = log(1024, 2)',
        '2 ^ b'
    ],
    seealso: [
        'exp',
        'log1p',
        'log2',
        'log10'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/log10.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "log10Docs": (()=>log10Docs)
});
var log10Docs = {
    name: 'log10',
    category: 'Arithmetic',
    syntax: [
        'log10(x)'
    ],
    description: 'Compute the 10-base logarithm of a value.',
    examples: [
        'log10(0.00001)',
        'log10(10000)',
        '10 ^ 4',
        'log(10000) / log(10)',
        'log(10000, 10)'
    ],
    seealso: [
        'exp',
        'log'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/log1p.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "log1pDocs": (()=>log1pDocs)
});
var log1pDocs = {
    name: 'log1p',
    category: 'Arithmetic',
    syntax: [
        'log1p(x)',
        'log1p(x, base)'
    ],
    description: 'Calculate the logarithm of a `value+1`',
    examples: [
        'log1p(2.5)',
        'exp(log1p(1.4))',
        'pow(10, 4)',
        'log1p(9999, 10)',
        'log1p(9999) / log(10)'
    ],
    seealso: [
        'exp',
        'log',
        'log2',
        'log10'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/log2.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "log2Docs": (()=>log2Docs)
});
var log2Docs = {
    name: 'log2',
    category: 'Arithmetic',
    syntax: [
        'log2(x)'
    ],
    description: 'Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.',
    examples: [
        'log2(0.03125)',
        'log2(16)',
        'log2(16) / log2(2)',
        'pow(2, 4)'
    ],
    seealso: [
        'exp',
        'log1p',
        'log',
        'log10'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/mod.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "modDocs": (()=>modDocs)
});
var modDocs = {
    name: 'mod',
    category: 'Operators',
    syntax: [
        'x % y',
        'x mod y',
        'mod(x, y)'
    ],
    description: 'Calculates the modulus, the remainder of an integer division.',
    examples: [
        '7 % 3',
        '11 % 2',
        '10 mod 4',
        'isOdd(x) = x % 2',
        'isOdd(2)',
        'isOdd(3)'
    ],
    seealso: [
        'divide'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/multiply.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "multiplyDocs": (()=>multiplyDocs)
});
var multiplyDocs = {
    name: 'multiply',
    category: 'Operators',
    syntax: [
        'x * y',
        'multiply(x, y)'
    ],
    description: 'multiply two values.',
    examples: [
        'a = 2.1 * 3.4',
        'a / 3.4',
        '2 * 3 + 4',
        '2 * (3 + 4)',
        '3 * 2.1 km'
    ],
    seealso: [
        'divide'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/norm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "normDocs": (()=>normDocs)
});
var normDocs = {
    name: 'norm',
    category: 'Arithmetic',
    syntax: [
        'norm(x)',
        'norm(x, p)'
    ],
    description: 'Calculate the norm of a number, vector or matrix.',
    examples: [
        'abs(-3.5)',
        'norm(-3.5)',
        'norm(3 - 4i)',
        'norm([1, 2, -3], Infinity)',
        'norm([1, 2, -3], -Infinity)',
        'norm([3, 4], 2)',
        'norm([[1, 2], [3, 4]], 1)',
        'norm([[1, 2], [3, 4]], "inf")',
        'norm([[1, 2], [3, 4]], "fro")'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/nthRoot.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "nthRootDocs": (()=>nthRootDocs)
});
var nthRootDocs = {
    name: 'nthRoot',
    category: 'Arithmetic',
    syntax: [
        'nthRoot(a)',
        'nthRoot(a, root)'
    ],
    description: 'Calculate the nth root of a value. ' + 'The principal nth root of a positive real number A, ' + 'is the positive real solution of the equation "x^root = A".',
    examples: [
        '4 ^ 3',
        'nthRoot(64, 3)',
        'nthRoot(9, 2)',
        'sqrt(9)'
    ],
    seealso: [
        'nthRoots',
        'pow',
        'sqrt'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/nthRoots.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "nthRootsDocs": (()=>nthRootsDocs)
});
var nthRootsDocs = {
    name: 'nthRoots',
    category: 'Arithmetic',
    syntax: [
        'nthRoots(A)',
        'nthRoots(A, root)'
    ],
    description: '' + 'Calculate the nth roots of a value. ' + 'An nth root of a positive real number A, ' + 'is a positive real solution of the equation "x^root = A". ' + 'This function returns an array of complex values.',
    examples: [
        'nthRoots(1)',
        'nthRoots(1, 3)'
    ],
    seealso: [
        'sqrt',
        'pow',
        'nthRoot'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/pow.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "powDocs": (()=>powDocs)
});
var powDocs = {
    name: 'pow',
    category: 'Operators',
    syntax: [
        'x ^ y',
        'pow(x, y)'
    ],
    description: 'Calculates the power of x to y, x^y.',
    examples: [
        '2^3',
        '2*2*2',
        '1 + e ^ (pi * i)',
        'pow([[1, 2], [4, 3]], 2)',
        'pow([[1, 2], [4, 3]], -1)'
    ],
    seealso: [
        'multiply',
        'nthRoot',
        'nthRoots',
        'sqrt'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/round.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "roundDocs": (()=>roundDocs)
});
var roundDocs = {
    name: 'round',
    category: 'Arithmetic',
    syntax: [
        'round(x)',
        'round(x, n)',
        'round(unit, valuelessUnit)',
        'round(unit, n, valuelessUnit)'
    ],
    description: 'round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.',
    examples: [
        'round(3.2)',
        'round(3.8)',
        'round(-4.2)',
        'round(-4.8)',
        'round(pi, 3)',
        'round(123.45678, 2)',
        'round(3.241cm, 2, cm)',
        'round([3.2, 3.8, -4.7])'
    ],
    seealso: [
        'ceil',
        'floor',
        'fix'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/sign.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "signDocs": (()=>signDocs)
});
var signDocs = {
    name: 'sign',
    category: 'Arithmetic',
    syntax: [
        'sign(x)'
    ],
    description: 'Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.',
    examples: [
        'sign(3.5)',
        'sign(-4.2)',
        'sign(0)'
    ],
    seealso: [
        'abs'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/sqrt.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "sqrtDocs": (()=>sqrtDocs)
});
var sqrtDocs = {
    name: 'sqrt',
    category: 'Arithmetic',
    syntax: [
        'sqrt(x)'
    ],
    description: 'Compute the square root value. If x = y * y, then y is the square root of x.',
    examples: [
        'sqrt(25)',
        '5 * 5',
        'sqrt(-1)'
    ],
    seealso: [
        'square',
        'sqrtm',
        'multiply',
        'nthRoot',
        'nthRoots',
        'pow'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/sqrtm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "sqrtmDocs": (()=>sqrtmDocs)
});
var sqrtmDocs = {
    name: 'sqrtm',
    category: 'Arithmetic',
    syntax: [
        'sqrtm(x)'
    ],
    description: 'Calculate the principal square root of a square matrix. The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.',
    examples: [
        'sqrtm([[33, 24], [48, 57]])'
    ],
    seealso: [
        'sqrt',
        'abs',
        'square',
        'multiply'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/sylvester.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "sylvesterDocs": (()=>sylvesterDocs)
});
var sylvesterDocs = {
    name: 'sylvester',
    category: 'Algebra',
    syntax: [
        'sylvester(A,B,C)'
    ],
    description: 'Solves the real-valued Sylvester equation AX+XB=C for X',
    examples: [
        'sylvester([[-1, -2], [1, 1]], [[-2, 1], [-1, 2]], [[-3, 2], [3, 0]])',
        'A = [[-1, -2], [1, 1]]; B = [[2, -1], [1, -2]]; C = [[-3, 2], [3, 0]]',
        'sylvester(A, B, C)'
    ],
    seealso: [
        'schur',
        'lyap'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/schur.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "schurDocs": (()=>schurDocs)
});
var schurDocs = {
    name: 'schur',
    category: 'Algebra',
    syntax: [
        'schur(A)'
    ],
    description: 'Performs a real Schur decomposition of the real matrix A = UTU\'',
    examples: [
        'schur([[1, 0], [-4, 3]])',
        'A = [[1, 0], [-4, 3]]',
        'schur(A)'
    ],
    seealso: [
        'lyap',
        'sylvester'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/lyap.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "lyapDocs": (()=>lyapDocs)
});
var lyapDocs = {
    name: 'lyap',
    category: 'Algebra',
    syntax: [
        'lyap(A,Q)'
    ],
    description: 'Solves the Continuous-time Lyapunov equation AP+PA\'+Q=0 for P',
    examples: [
        'lyap([[-2, 0], [1, -4]], [[3, 1], [1, 3]])',
        'A = [[-2, 0], [1, -4]]',
        'Q = [[3, 1], [1, 3]]',
        'lyap(A,Q)'
    ],
    seealso: [
        'schur',
        'sylvester'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/square.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "squareDocs": (()=>squareDocs)
});
var squareDocs = {
    name: 'square',
    category: 'Arithmetic',
    syntax: [
        'square(x)'
    ],
    description: 'Compute the square of a value. The square of x is x * x.',
    examples: [
        'square(3)',
        'sqrt(9)',
        '3^2',
        '3 * 3'
    ],
    seealso: [
        'multiply',
        'pow',
        'sqrt',
        'cube'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/subtract.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "subtractDocs": (()=>subtractDocs)
});
var subtractDocs = {
    name: 'subtract',
    category: 'Operators',
    syntax: [
        'x - y',
        'subtract(x, y)'
    ],
    description: 'subtract two values.',
    examples: [
        'a = 5.3 - 2',
        'a + 2',
        '2/3 - 1/6',
        '2 * 3 - 3',
        '2.1 km - 500m'
    ],
    seealso: [
        'add'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/unaryMinus.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "unaryMinusDocs": (()=>unaryMinusDocs)
});
var unaryMinusDocs = {
    name: 'unaryMinus',
    category: 'Operators',
    syntax: [
        '-x',
        'unaryMinus(x)'
    ],
    description: 'Inverse the sign of a value. Converts booleans and strings to numbers.',
    examples: [
        '-4.5',
        '-(-5.6)',
        '-"22"'
    ],
    seealso: [
        'add',
        'subtract',
        'unaryPlus'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/unaryPlus.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "unaryPlusDocs": (()=>unaryPlusDocs)
});
var unaryPlusDocs = {
    name: 'unaryPlus',
    category: 'Operators',
    syntax: [
        '+x',
        'unaryPlus(x)'
    ],
    description: 'Converts booleans and strings to numbers.',
    examples: [
        '+true',
        '+"2"'
    ],
    seealso: [
        'add',
        'subtract',
        'unaryMinus'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/xgcd.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "xgcdDocs": (()=>xgcdDocs)
});
var xgcdDocs = {
    name: 'xgcd',
    category: 'Arithmetic',
    syntax: [
        'xgcd(a, b)'
    ],
    description: 'Calculate the extended greatest common divisor for two values. The result is an array [d, x, y] with 3 entries, where d is the greatest common divisor, and d = x * a + y * b.',
    examples: [
        'xgcd(8, 12)',
        'gcd(8, 12)',
        'xgcd(36163, 21199)'
    ],
    seealso: [
        'gcd',
        'lcm'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/bitAnd.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "bitAndDocs": (()=>bitAndDocs)
});
var bitAndDocs = {
    name: 'bitAnd',
    category: 'Bitwise',
    syntax: [
        'x & y',
        'bitAnd(x, y)'
    ],
    description: 'Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0',
    examples: [
        '5 & 3',
        'bitAnd(53, 131)',
        '[1, 12, 31] & 42'
    ],
    seealso: [
        'bitNot',
        'bitOr',
        'bitXor',
        'leftShift',
        'rightArithShift',
        'rightLogShift'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/bitNot.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "bitNotDocs": (()=>bitNotDocs)
});
var bitNotDocs = {
    name: 'bitNot',
    category: 'Bitwise',
    syntax: [
        '~x',
        'bitNot(x)'
    ],
    description: 'Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.',
    examples: [
        '~1',
        '~2',
        'bitNot([2, -3, 4])'
    ],
    seealso: [
        'bitAnd',
        'bitOr',
        'bitXor',
        'leftShift',
        'rightArithShift',
        'rightLogShift'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/bitOr.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "bitOrDocs": (()=>bitOrDocs)
});
var bitOrDocs = {
    name: 'bitOr',
    category: 'Bitwise',
    syntax: [
        'x | y',
        'bitOr(x, y)'
    ],
    description: 'Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.',
    examples: [
        '5 | 3',
        'bitOr([1, 2, 3], 4)'
    ],
    seealso: [
        'bitAnd',
        'bitNot',
        'bitXor',
        'leftShift',
        'rightArithShift',
        'rightLogShift'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/bitXor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "bitXorDocs": (()=>bitXorDocs)
});
var bitXorDocs = {
    name: 'bitXor',
    category: 'Bitwise',
    syntax: [
        'bitXor(x, y)'
    ],
    description: 'Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.',
    examples: [
        'bitOr(1, 2)',
        'bitXor([2, 3, 4], 4)'
    ],
    seealso: [
        'bitAnd',
        'bitNot',
        'bitOr',
        'leftShift',
        'rightArithShift',
        'rightLogShift'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/leftShift.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "leftShiftDocs": (()=>leftShiftDocs)
});
var leftShiftDocs = {
    name: 'leftShift',
    category: 'Bitwise',
    syntax: [
        'x << y',
        'leftShift(x, y)'
    ],
    description: 'Bitwise left logical shift of a value x by y number of bits.',
    examples: [
        '4 << 1',
        '8 >> 1'
    ],
    seealso: [
        'bitAnd',
        'bitNot',
        'bitOr',
        'bitXor',
        'rightArithShift',
        'rightLogShift'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/rightArithShift.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "rightArithShiftDocs": (()=>rightArithShiftDocs)
});
var rightArithShiftDocs = {
    name: 'rightArithShift',
    category: 'Bitwise',
    syntax: [
        'x >> y',
        'rightArithShift(x, y)'
    ],
    description: 'Bitwise right arithmetic shift of a value x by y number of bits.',
    examples: [
        '8 >> 1',
        '4 << 1',
        '-12 >> 2'
    ],
    seealso: [
        'bitAnd',
        'bitNot',
        'bitOr',
        'bitXor',
        'leftShift',
        'rightLogShift'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/rightLogShift.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "rightLogShiftDocs": (()=>rightLogShiftDocs)
});
var rightLogShiftDocs = {
    name: 'rightLogShift',
    category: 'Bitwise',
    syntax: [
        'x >>> y',
        'rightLogShift(x, y)'
    ],
    description: 'Bitwise right logical shift of a value x by y number of bits.',
    examples: [
        '8 >>> 1',
        '4 << 1',
        '-12 >>> 2'
    ],
    seealso: [
        'bitAnd',
        'bitNot',
        'bitOr',
        'bitXor',
        'leftShift',
        'rightArithShift'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/combinatorics/bellNumbers.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "bellNumbersDocs": (()=>bellNumbersDocs)
});
var bellNumbersDocs = {
    name: 'bellNumbers',
    category: 'Combinatorics',
    syntax: [
        'bellNumbers(n)'
    ],
    description: 'The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.',
    examples: [
        'bellNumbers(3)',
        'bellNumbers(8)'
    ],
    seealso: [
        'stirlingS2'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/combinatorics/catalan.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "catalanDocs": (()=>catalanDocs)
});
var catalanDocs = {
    name: 'catalan',
    category: 'Combinatorics',
    syntax: [
        'catalan(n)'
    ],
    description: 'The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.',
    examples: [
        'catalan(3)',
        'catalan(8)'
    ],
    seealso: [
        'bellNumbers'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/combinatorics/composition.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "compositionDocs": (()=>compositionDocs)
});
var compositionDocs = {
    name: 'composition',
    category: 'Combinatorics',
    syntax: [
        'composition(n, k)'
    ],
    description: 'The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.',
    examples: [
        'composition(5, 3)'
    ],
    seealso: [
        'combinations'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/combinatorics/stirlingS2.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "stirlingS2Docs": (()=>stirlingS2Docs)
});
var stirlingS2Docs = {
    name: 'stirlingS2',
    category: 'Combinatorics',
    syntax: [
        'stirlingS2(n, k)'
    ],
    description: 'he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.',
    examples: [
        'stirlingS2(5, 3)'
    ],
    seealso: [
        'bellNumbers'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/complex/arg.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "argDocs": (()=>argDocs)
});
var argDocs = {
    name: 'arg',
    category: 'Complex',
    syntax: [
        'arg(x)'
    ],
    description: 'Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).',
    examples: [
        'arg(2 + 2i)',
        'atan2(3, 2)',
        'arg(2 + 3i)'
    ],
    seealso: [
        're',
        'im',
        'conj',
        'abs'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/complex/conj.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "conjDocs": (()=>conjDocs)
});
var conjDocs = {
    name: 'conj',
    category: 'Complex',
    syntax: [
        'conj(x)'
    ],
    description: 'Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.',
    examples: [
        'conj(2 + 3i)',
        'conj(2 - 3i)',
        'conj(-5.2i)'
    ],
    seealso: [
        're',
        'im',
        'abs',
        'arg'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/complex/im.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "imDocs": (()=>imDocs)
});
var imDocs = {
    name: 'im',
    category: 'Complex',
    syntax: [
        'im(x)'
    ],
    description: 'Get the imaginary part of a complex number.',
    examples: [
        'im(2 + 3i)',
        're(2 + 3i)',
        'im(-5.2i)',
        'im(2.4)'
    ],
    seealso: [
        're',
        'conj',
        'abs',
        'arg'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/complex/re.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "reDocs": (()=>reDocs)
});
var reDocs = {
    name: 're',
    category: 'Complex',
    syntax: [
        're(x)'
    ],
    description: 'Get the real part of a complex number.',
    examples: [
        're(2 + 3i)',
        'im(2 + 3i)',
        're(-5.2i)',
        're(2.4)'
    ],
    seealso: [
        'im',
        'conj',
        'abs',
        'arg'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/expression/evaluate.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "evaluateDocs": (()=>evaluateDocs)
});
var evaluateDocs = {
    name: 'evaluate',
    category: 'Expression',
    syntax: [
        'evaluate(expression)',
        'evaluate(expression, scope)',
        'evaluate([expr1, expr2, expr3, ...])',
        'evaluate([expr1, expr2, expr3, ...], scope)'
    ],
    description: 'Evaluate an expression or an array with expressions.',
    examples: [
        'evaluate("2 + 3")',
        'evaluate("sqrt(16)")',
        'evaluate("2 inch to cm")',
        'evaluate("sin(x * pi)", { "x": 1/2 })',
        'evaluate(["width=2", "height=4","width*height"])'
    ],
    seealso: []
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/expression/help.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "helpDocs": (()=>helpDocs)
});
var helpDocs = {
    name: 'help',
    category: 'Expression',
    syntax: [
        'help(object)',
        'help(string)'
    ],
    description: 'Display documentation on a function or data type.',
    examples: [
        'help(sqrt)',
        'help("complex")'
    ],
    seealso: []
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/geometry/distance.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "distanceDocs": (()=>distanceDocs)
});
var distanceDocs = {
    name: 'distance',
    category: 'Geometry',
    syntax: [
        'distance([x1, y1], [x2, y2])',
        'distance([[x1, y1], [x2, y2]])'
    ],
    description: 'Calculates the Euclidean distance between two points.',
    examples: [
        'distance([0,0], [4,4])',
        'distance([[0,0], [4,4]])'
    ],
    seealso: []
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/geometry/intersect.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "intersectDocs": (()=>intersectDocs)
});
var intersectDocs = {
    name: 'intersect',
    category: 'Geometry',
    syntax: [
        'intersect(expr1, expr2, expr3, expr4)',
        'intersect(expr1, expr2, expr3)'
    ],
    description: 'Computes the intersection point of lines and/or planes.',
    examples: [
        'intersect([0, 0], [10, 10], [10, 0], [0, 10])',
        'intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])'
    ],
    seealso: []
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/logical/and.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "andDocs": (()=>andDocs)
});
var andDocs = {
    name: 'and',
    category: 'Logical',
    syntax: [
        'x and y',
        'and(x, y)'
    ],
    description: 'Logical and. Test whether two values are both defined with a nonzero/nonempty value.',
    examples: [
        'true and false',
        'true and true',
        '2 and 4'
    ],
    seealso: [
        'not',
        'or',
        'xor'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/logical/not.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "notDocs": (()=>notDocs)
});
var notDocs = {
    name: 'not',
    category: 'Logical',
    syntax: [
        'not x',
        'not(x)'
    ],
    description: 'Logical not. Flips the boolean value of given argument.',
    examples: [
        'not true',
        'not false',
        'not 2',
        'not 0'
    ],
    seealso: [
        'and',
        'or',
        'xor'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/logical/or.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "orDocs": (()=>orDocs)
});
var orDocs = {
    name: 'or',
    category: 'Logical',
    syntax: [
        'x or y',
        'or(x, y)'
    ],
    description: 'Logical or. Test if at least one value is defined with a nonzero/nonempty value.',
    examples: [
        'true or false',
        'false or false',
        '0 or 4'
    ],
    seealso: [
        'not',
        'and',
        'xor'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/logical/xor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "xorDocs": (()=>xorDocs)
});
var xorDocs = {
    name: 'xor',
    category: 'Logical',
    syntax: [
        'x xor y',
        'xor(x, y)'
    ],
    description: 'Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.',
    examples: [
        'true xor false',
        'false xor false',
        'true xor true',
        '0 xor 4'
    ],
    seealso: [
        'not',
        'and',
        'or'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/column.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "columnDocs": (()=>columnDocs)
});
var columnDocs = {
    name: 'column',
    category: 'Matrix',
    syntax: [
        'column(x, index)'
    ],
    description: 'Return a column from a matrix or array.',
    examples: [
        'A = [[1, 2], [3, 4]]',
        'column(A, 1)',
        'column(A, 2)'
    ],
    seealso: [
        'row',
        'matrixFromColumns'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/concat.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "concatDocs": (()=>concatDocs)
});
var concatDocs = {
    name: 'concat',
    category: 'Matrix',
    syntax: [
        'concat(A, B, C, ...)',
        'concat(A, B, C, ..., dim)'
    ],
    description: 'Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.',
    examples: [
        'A = [1, 2; 5, 6]',
        'B = [3, 4; 7, 8]',
        'concat(A, B)',
        'concat(A, B, 1)',
        'concat(A, B, 2)'
    ],
    seealso: [
        'det',
        'diag',
        'identity',
        'inv',
        'ones',
        'range',
        'size',
        'squeeze',
        'subset',
        'trace',
        'transpose',
        'zeros'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/count.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "countDocs": (()=>countDocs)
});
var countDocs = {
    name: 'count',
    category: 'Matrix',
    syntax: [
        'count(x)'
    ],
    description: 'Count the number of elements of a matrix, array or string.',
    examples: [
        'a = [1, 2; 3, 4; 5, 6]',
        'count(a)',
        'size(a)',
        'count("hello world")'
    ],
    seealso: [
        'size'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/cross.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "crossDocs": (()=>crossDocs)
});
var crossDocs = {
    name: 'cross',
    category: 'Matrix',
    syntax: [
        'cross(A, B)'
    ],
    description: 'Calculate the cross product for two vectors in three dimensional space.',
    examples: [
        'cross([1, 1, 0],  [0, 1, 1])',
        'cross([3, -3, 1], [4, 9, 2])',
        'cross([2, 3, 4],  [5, 6, 7])'
    ],
    seealso: [
        'multiply',
        'dot'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/ctranspose.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ctransposeDocs": (()=>ctransposeDocs)
});
var ctransposeDocs = {
    name: 'ctranspose',
    category: 'Matrix',
    syntax: [
        'x\'',
        'ctranspose(x)'
    ],
    description: 'Complex Conjugate and Transpose a matrix',
    examples: [
        'a = [1, 2, 3; 4, 5, 6]',
        'a\'',
        'ctranspose(a)'
    ],
    seealso: [
        'concat',
        'det',
        'diag',
        'identity',
        'inv',
        'ones',
        'range',
        'size',
        'squeeze',
        'subset',
        'trace',
        'zeros'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/det.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "detDocs": (()=>detDocs)
});
var detDocs = {
    name: 'det',
    category: 'Matrix',
    syntax: [
        'det(x)'
    ],
    description: 'Calculate the determinant of a matrix',
    examples: [
        'det([1, 2; 3, 4])',
        'det([-2, 2, 3; -1, 1, 3; 2, 0, -1])'
    ],
    seealso: [
        'concat',
        'diag',
        'identity',
        'inv',
        'ones',
        'range',
        'size',
        'squeeze',
        'subset',
        'trace',
        'transpose',
        'zeros'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/diag.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "diagDocs": (()=>diagDocs)
});
var diagDocs = {
    name: 'diag',
    category: 'Matrix',
    syntax: [
        'diag(x)',
        'diag(x, k)'
    ],
    description: 'Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.',
    examples: [
        'diag(1:3)',
        'diag(1:3, 1)',
        'a = [1, 2, 3; 4, 5, 6; 7, 8, 9]',
        'diag(a)'
    ],
    seealso: [
        'concat',
        'det',
        'identity',
        'inv',
        'ones',
        'range',
        'size',
        'squeeze',
        'subset',
        'trace',
        'transpose',
        'zeros'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/diff.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "diffDocs": (()=>diffDocs)
});
var diffDocs = {
    name: 'diff',
    category: 'Matrix',
    syntax: [
        'diff(arr)',
        'diff(arr, dim)'
    ],
    description: [
        'Create a new matrix or array with the difference of the passed matrix or array.',
        'Dim parameter is optional and used to indicate the dimension of the array/matrix to apply the difference',
        'If no dimension parameter is passed it is assumed as dimension 0',
        'Dimension is zero-based in javascript and one-based in the parser',
        'Arrays must be \'rectangular\' meaning arrays like [1, 2]',
        'If something is passed as a matrix it will be returned as a matrix but other than that all matrices are converted to arrays'
    ],
    examples: [
        'A = [1, 2, 4, 7, 0]',
        'diff(A)',
        'diff(A, 1)',
        'B = [[1, 2], [3, 4]]',
        'diff(B)',
        'diff(B, 1)',
        'diff(B, 2)',
        'diff(B, bignumber(2))',
        'diff([[1, 2], matrix([3, 4])], 2)'
    ],
    seealso: [
        'subtract',
        'partitionSelect'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/dot.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "dotDocs": (()=>dotDocs)
});
var dotDocs = {
    name: 'dot',
    category: 'Matrix',
    syntax: [
        'dot(A, B)',
        'A * B'
    ],
    description: 'Calculate the dot product of two vectors. ' + 'The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] ' + 'is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn',
    examples: [
        'dot([2, 4, 1], [2, 2, 3])',
        '[2, 4, 1] * [2, 2, 3]'
    ],
    seealso: [
        'multiply',
        'cross'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/eigs.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "eigsDocs": (()=>eigsDocs)
});
var eigsDocs = {
    name: 'eigs',
    category: 'Matrix',
    syntax: [
        'eigs(x)'
    ],
    description: 'Calculate the eigenvalues and optionally eigenvectors of a square matrix',
    examples: [
        'eigs([[5, 2.3], [2.3, 1]])',
        'eigs([[1, 2, 3], [4, 5, 6], [7, 8, 9]], { precision: 1e-6, eigenvectors: false })'
    ],
    seealso: [
        'inv'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/filter.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "filterDocs": (()=>filterDocs)
});
var filterDocs = {
    name: 'filter',
    category: 'Matrix',
    syntax: [
        'filter(x, test)'
    ],
    description: 'Filter items in a matrix.',
    examples: [
        'isPositive(x) = x > 0',
        'filter([6, -2, -1, 4, 3], isPositive)',
        'filter([6, -2, 0, 1, 0], x != 0)'
    ],
    seealso: [
        'sort',
        'map',
        'forEach'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/flatten.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "flattenDocs": (()=>flattenDocs)
});
var flattenDocs = {
    name: 'flatten',
    category: 'Matrix',
    syntax: [
        'flatten(x)'
    ],
    description: 'Flatten a multi dimensional matrix into a single dimensional matrix.',
    examples: [
        'a = [1, 2, 3; 4, 5, 6]',
        'size(a)',
        'b = flatten(a)',
        'size(b)'
    ],
    seealso: [
        'concat',
        'resize',
        'size',
        'squeeze'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/forEach.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "forEachDocs": (()=>forEachDocs)
});
var forEachDocs = {
    name: 'forEach',
    category: 'Matrix',
    syntax: [
        'forEach(x, callback)'
    ],
    description: 'Iterates over all elements of a matrix/array, and executes the given callback function.',
    examples: [
        'numberOfPets = {}',
        'addPet(n) = numberOfPets[n] = (numberOfPets[n] ? numberOfPets[n]:0 ) + 1;',
        'forEach(["Dog","Cat","Cat"], addPet)',
        'numberOfPets'
    ],
    seealso: [
        'map',
        'sort',
        'filter'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/getMatrixDataType.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "getMatrixDataTypeDocs": (()=>getMatrixDataTypeDocs)
});
var getMatrixDataTypeDocs = {
    name: 'getMatrixDataType',
    category: 'Matrix',
    syntax: [
        'getMatrixDataType(x)'
    ],
    description: 'Find the data type of all elements in a matrix or array, ' + 'for example "number" if all items are a number ' + 'and "Complex" if all values are complex numbers. ' + 'If a matrix contains more than one data type, it will return "mixed".',
    examples: [
        'getMatrixDataType([1, 2, 3])',
        'getMatrixDataType([[5 cm], [2 inch]])',
        'getMatrixDataType([1, "text"])',
        'getMatrixDataType([1, bignumber(4)])'
    ],
    seealso: [
        'matrix',
        'sparse',
        'typeOf'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/identity.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "identityDocs": (()=>identityDocs)
});
var identityDocs = {
    name: 'identity',
    category: 'Matrix',
    syntax: [
        'identity(n)',
        'identity(m, n)',
        'identity([m, n])'
    ],
    description: 'Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.',
    examples: [
        'identity(3)',
        'identity(3, 5)',
        'a = [1, 2, 3; 4, 5, 6]',
        'identity(size(a))'
    ],
    seealso: [
        'concat',
        'det',
        'diag',
        'inv',
        'ones',
        'range',
        'size',
        'squeeze',
        'subset',
        'trace',
        'transpose',
        'zeros'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/inv.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "invDocs": (()=>invDocs)
});
var invDocs = {
    name: 'inv',
    category: 'Matrix',
    syntax: [
        'inv(x)'
    ],
    description: 'Calculate the inverse of a matrix',
    examples: [
        'inv([1, 2; 3, 4])',
        'inv(4)',
        '1 / 4'
    ],
    seealso: [
        'concat',
        'det',
        'diag',
        'identity',
        'ones',
        'range',
        'size',
        'squeeze',
        'subset',
        'trace',
        'transpose',
        'zeros'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/pinv.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "pinvDocs": (()=>pinvDocs)
});
var pinvDocs = {
    name: 'pinv',
    category: 'Matrix',
    syntax: [
        'pinv(x)'
    ],
    description: 'Calculate the Moore–Penrose inverse of a matrix',
    examples: [
        'pinv([1, 2; 3, 4])',
        'pinv([[1, 0], [0, 1], [0, 1]])',
        'pinv(4)'
    ],
    seealso: [
        'inv'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/kron.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "kronDocs": (()=>kronDocs)
});
var kronDocs = {
    name: 'kron',
    category: 'Matrix',
    syntax: [
        'kron(x, y)'
    ],
    description: 'Calculates the Kronecker product of 2 matrices or vectors.',
    examples: [
        'kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])',
        'kron([1,1], [2,3,4])'
    ],
    seealso: [
        'multiply',
        'dot',
        'cross'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/map.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "mapDocs": (()=>mapDocs)
});
var mapDocs = {
    name: 'map',
    category: 'Matrix',
    syntax: [
        'map(x, callback)',
        'map(x, y, ..., callback)'
    ],
    description: 'Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array or the matrices/arrays.',
    examples: [
        'map([1, 2, 3], square)',
        'map([1, 2], [3, 4], f(a,b) = a + b)'
    ],
    seealso: [
        'filter',
        'forEach'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/matrixFromColumns.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "matrixFromColumnsDocs": (()=>matrixFromColumnsDocs)
});
var matrixFromColumnsDocs = {
    name: 'matrixFromColumns',
    category: 'Matrix',
    syntax: [
        'matrixFromColumns(...arr)',
        'matrixFromColumns(row1, row2)',
        'matrixFromColumns(row1, row2, row3)'
    ],
    description: 'Create a dense matrix from vectors as individual columns.',
    examples: [
        'matrixFromColumns([1, 2, 3], [[4],[5],[6]])'
    ],
    seealso: [
        'matrix',
        'matrixFromRows',
        'matrixFromFunction',
        'zeros'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/matrixFromFunction.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "matrixFromFunctionDocs": (()=>matrixFromFunctionDocs)
});
var matrixFromFunctionDocs = {
    name: 'matrixFromFunction',
    category: 'Matrix',
    syntax: [
        'matrixFromFunction(size, fn)',
        'matrixFromFunction(size, fn, format)',
        'matrixFromFunction(size, fn, format, datatype)',
        'matrixFromFunction(size, format, fn)',
        'matrixFromFunction(size, format, datatype, fn)'
    ],
    description: 'Create a matrix by evaluating a generating function at each index.',
    examples: [
        'f(I) = I[1] - I[2]',
        'matrixFromFunction([3,3], f)',
        'g(I) = I[1] - I[2] == 1 ? 4 : 0',
        'matrixFromFunction([100, 100], "sparse", g)',
        'matrixFromFunction([5], random)'
    ],
    seealso: [
        'matrix',
        'matrixFromRows',
        'matrixFromColumns',
        'zeros'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/matrixFromRows.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "matrixFromRowsDocs": (()=>matrixFromRowsDocs)
});
var matrixFromRowsDocs = {
    name: 'matrixFromRows',
    category: 'Matrix',
    syntax: [
        'matrixFromRows(...arr)',
        'matrixFromRows(row1, row2)',
        'matrixFromRows(row1, row2, row3)'
    ],
    description: 'Create a dense matrix from vectors as individual rows.',
    examples: [
        'matrixFromRows([1, 2, 3], [[4],[5],[6]])'
    ],
    seealso: [
        'matrix',
        'matrixFromColumns',
        'matrixFromFunction',
        'zeros'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/ones.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "onesDocs": (()=>onesDocs)
});
var onesDocs = {
    name: 'ones',
    category: 'Matrix',
    syntax: [
        'ones(m)',
        'ones(m, n)',
        'ones(m, n, p, ...)',
        'ones([m])',
        'ones([m, n])',
        'ones([m, n, p, ...])'
    ],
    description: 'Create a matrix containing ones.',
    examples: [
        'ones(3)',
        'ones(3, 5)',
        'ones([2,3]) * 4.5',
        'a = [1, 2, 3; 4, 5, 6]',
        'ones(size(a))'
    ],
    seealso: [
        'concat',
        'det',
        'diag',
        'identity',
        'inv',
        'range',
        'size',
        'squeeze',
        'subset',
        'trace',
        'transpose',
        'zeros'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/partitionSelect.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "partitionSelectDocs": (()=>partitionSelectDocs)
});
var partitionSelectDocs = {
    name: 'partitionSelect',
    category: 'Matrix',
    syntax: [
        'partitionSelect(x, k)',
        'partitionSelect(x, k, compare)'
    ],
    description: 'Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.',
    examples: [
        'partitionSelect([5, 10, 1], 2)',
        'partitionSelect(["C", "B", "A", "D"], 1, compareText)',
        'arr = [5, 2, 1]',
        'partitionSelect(arr, 0) # returns 1, arr is now: [1, 2, 5]',
        'arr',
        'partitionSelect(arr, 1, \'desc\') # returns 2, arr is now: [5, 2, 1]',
        'arr'
    ],
    seealso: [
        'sort'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/range.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "rangeDocs": (()=>rangeDocs)
});
var rangeDocs = {
    name: 'range',
    category: 'Type',
    syntax: [
        'start:end',
        'start:step:end',
        'range(start, end)',
        'range(start, end, step)',
        'range(string)'
    ],
    description: 'Create a range. Lower bound of the range is included, upper bound is excluded.',
    examples: [
        '1:5',
        '3:-1:-3',
        'range(3, 7)',
        'range(0, 12, 2)',
        'range("4:10")',
        'range(1m, 1m, 3m)',
        'a = [1, 2, 3, 4; 5, 6, 7, 8]',
        'a[1:2, 1:2]'
    ],
    seealso: [
        'concat',
        'det',
        'diag',
        'identity',
        'inv',
        'ones',
        'size',
        'squeeze',
        'subset',
        'trace',
        'transpose',
        'zeros'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/reshape.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "reshapeDocs": (()=>reshapeDocs)
});
var reshapeDocs = {
    name: 'reshape',
    category: 'Matrix',
    syntax: [
        'reshape(x, sizes)'
    ],
    description: 'Reshape a multi dimensional array to fit the specified dimensions.',
    examples: [
        'reshape([1, 2, 3, 4, 5, 6], [2, 3])',
        'reshape([[1, 2], [3, 4]], [1, 4])',
        'reshape([[1, 2], [3, 4]], [4])',
        'reshape([1, 2, 3, 4], [-1, 2])'
    ],
    seealso: [
        'size',
        'squeeze',
        'resize'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/resize.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "resizeDocs": (()=>resizeDocs)
});
var resizeDocs = {
    name: 'resize',
    category: 'Matrix',
    syntax: [
        'resize(x, size)',
        'resize(x, size, defaultValue)'
    ],
    description: 'Resize a matrix.',
    examples: [
        'resize([1,2,3,4,5], [3])',
        'resize([1,2,3], [5])',
        'resize([1,2,3], [5], -1)',
        'resize(2, [2, 3])',
        'resize("hello", [8], "!")'
    ],
    seealso: [
        'size',
        'subset',
        'squeeze',
        'reshape'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/rotate.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "rotateDocs": (()=>rotateDocs)
});
var rotateDocs = {
    name: 'rotate',
    category: 'Matrix',
    syntax: [
        'rotate(w, theta)',
        'rotate(w, theta, v)'
    ],
    description: 'Returns a 2-D rotation matrix (2x2) for a given angle (in radians). ' + 'Returns a 2-D rotation matrix (3x3) of a given angle (in radians) around given axis.',
    examples: [
        'rotate([1, 0], pi / 2)',
        'rotate(matrix([1, 0]), unit("35deg"))',
        'rotate([1, 0, 0], unit("90deg"), [0, 0, 1])',
        'rotate(matrix([1, 0, 0]), unit("90deg"), matrix([0, 0, 1]))'
    ],
    seealso: [
        'matrix',
        'rotationMatrix'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/rotationMatrix.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "rotationMatrixDocs": (()=>rotationMatrixDocs)
});
var rotationMatrixDocs = {
    name: 'rotationMatrix',
    category: 'Matrix',
    syntax: [
        'rotationMatrix(theta)',
        'rotationMatrix(theta, v)',
        'rotationMatrix(theta, v, format)'
    ],
    description: 'Returns a 2-D rotation matrix (2x2) for a given angle (in radians). ' + 'Returns a 2-D rotation matrix (3x3) of a given angle (in radians) around given axis.',
    examples: [
        'rotationMatrix(pi / 2)',
        'rotationMatrix(unit("45deg"), [0, 0, 1])',
        'rotationMatrix(1, matrix([0, 0, 1]), "sparse")'
    ],
    seealso: [
        'cos',
        'sin'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/row.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "rowDocs": (()=>rowDocs)
});
var rowDocs = {
    name: 'row',
    category: 'Matrix',
    syntax: [
        'row(x, index)'
    ],
    description: 'Return a row from a matrix or array.',
    examples: [
        'A = [[1, 2], [3, 4]]',
        'row(A, 1)',
        'row(A, 2)'
    ],
    seealso: [
        'column',
        'matrixFromRows'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/size.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "sizeDocs": (()=>sizeDocs)
});
var sizeDocs = {
    name: 'size',
    category: 'Matrix',
    syntax: [
        'size(x)'
    ],
    description: 'Calculate the size of a matrix.',
    examples: [
        'size(2.3)',
        'size("hello world")',
        'a = [1, 2; 3, 4; 5, 6]',
        'size(a)',
        'size(1:6)'
    ],
    seealso: [
        'concat',
        'count',
        'det',
        'diag',
        'identity',
        'inv',
        'ones',
        'range',
        'squeeze',
        'subset',
        'trace',
        'transpose',
        'zeros'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/sort.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "sortDocs": (()=>sortDocs)
});
var sortDocs = {
    name: 'sort',
    category: 'Matrix',
    syntax: [
        'sort(x)',
        'sort(x, compare)'
    ],
    description: 'Sort the items in a matrix. Compare can be a string "asc", "desc", "natural", or a custom sort function.',
    examples: [
        'sort([5, 10, 1])',
        'sort(["C", "B", "A", "D"], "natural")',
        'sortByLength(a, b) = size(a)[1] - size(b)[1]',
        'sort(["Langdon", "Tom", "Sara"], sortByLength)',
        'sort(["10", "1", "2"], "natural")'
    ],
    seealso: [
        'map',
        'filter',
        'forEach'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/squeeze.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "squeezeDocs": (()=>squeezeDocs)
});
var squeezeDocs = {
    name: 'squeeze',
    category: 'Matrix',
    syntax: [
        'squeeze(x)'
    ],
    description: 'Remove inner and outer singleton dimensions from a matrix.',
    examples: [
        'a = zeros(3,2,1)',
        'size(squeeze(a))',
        'b = zeros(1,1,3)',
        'size(squeeze(b))'
    ],
    seealso: [
        'concat',
        'det',
        'diag',
        'identity',
        'inv',
        'ones',
        'range',
        'size',
        'subset',
        'trace',
        'transpose',
        'zeros'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/subset.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "subsetDocs": (()=>subsetDocs)
});
var subsetDocs = {
    name: 'subset',
    category: 'Matrix',
    syntax: [
        'value(index)',
        'value(index) = replacement',
        'subset(value, [index])',
        'subset(value, [index], replacement)'
    ],
    description: 'Get or set a subset of the entries of a matrix or ' + 'characters of a string. ' + 'Indexes are one-based. There should be one index specification for ' + 'each dimension of the target. Each specification can be a single ' + 'index, a list of indices, or a range in colon notation `l:u`. ' + 'In a range, both the lower bound l and upper bound u are included; ' + 'and if a bound is omitted it defaults to the most extreme valid value. ' + 'The cartesian product of the indices specified in each dimension ' + 'determines the target of the operation.',
    examples: [
        'd = [1, 2; 3, 4]',
        'e = []',
        'e[1, 1:2] = [5, 6]',
        'e[2, :] = [7, 8]',
        'f = d * e',
        'f[2, 1]',
        'f[:, 1]',
        'f[[1,2], [1,3]] = [9, 10; 11, 12]',
        'f'
    ],
    seealso: [
        'concat',
        'det',
        'diag',
        'identity',
        'inv',
        'ones',
        'range',
        'size',
        'squeeze',
        'trace',
        'transpose',
        'zeros'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/trace.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "traceDocs": (()=>traceDocs)
});
var traceDocs = {
    name: 'trace',
    category: 'Matrix',
    syntax: [
        'trace(A)'
    ],
    description: 'Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.',
    examples: [
        'A = [1, 2, 3; -1, 2, 3; 2, 0, 3]',
        'trace(A)'
    ],
    seealso: [
        'concat',
        'det',
        'diag',
        'identity',
        'inv',
        'ones',
        'range',
        'size',
        'squeeze',
        'subset',
        'transpose',
        'zeros'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/transpose.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "transposeDocs": (()=>transposeDocs)
});
var transposeDocs = {
    name: 'transpose',
    category: 'Matrix',
    syntax: [
        'x\'',
        'transpose(x)'
    ],
    description: 'Transpose a matrix',
    examples: [
        'a = [1, 2, 3; 4, 5, 6]',
        'a\'',
        'transpose(a)'
    ],
    seealso: [
        'concat',
        'det',
        'diag',
        'identity',
        'inv',
        'ones',
        'range',
        'size',
        'squeeze',
        'subset',
        'trace',
        'zeros'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/zeros.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "zerosDocs": (()=>zerosDocs)
});
var zerosDocs = {
    name: 'zeros',
    category: 'Matrix',
    syntax: [
        'zeros(m)',
        'zeros(m, n)',
        'zeros(m, n, p, ...)',
        'zeros([m])',
        'zeros([m, n])',
        'zeros([m, n, p, ...])'
    ],
    description: 'Create a matrix containing zeros.',
    examples: [
        'zeros(3)',
        'zeros(3, 5)',
        'a = [1, 2, 3; 4, 5, 6]',
        'zeros(size(a))'
    ],
    seealso: [
        'concat',
        'det',
        'diag',
        'identity',
        'inv',
        'ones',
        'range',
        'size',
        'squeeze',
        'subset',
        'trace',
        'transpose'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/fft.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "fftDocs": (()=>fftDocs)
});
var fftDocs = {
    name: 'fft',
    category: 'Matrix',
    syntax: [
        'fft(x)'
    ],
    description: 'Calculate N-dimensional Fourier transform',
    examples: [
        'fft([[1, 0], [1, 0]])'
    ],
    seealso: [
        'ifft'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/ifft.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ifftDocs": (()=>ifftDocs)
});
var ifftDocs = {
    name: 'ifft',
    category: 'Matrix',
    syntax: [
        'ifft(x)'
    ],
    description: 'Calculate N-dimensional inverse Fourier transform',
    examples: [
        'ifft([[2, 2], [0, 0]])'
    ],
    seealso: [
        'fft'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/combinations.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "combinationsDocs": (()=>combinationsDocs)
});
var combinationsDocs = {
    name: 'combinations',
    category: 'Probability',
    syntax: [
        'combinations(n, k)'
    ],
    description: 'Compute the number of combinations of n items taken k at a time',
    examples: [
        'combinations(7, 5)'
    ],
    seealso: [
        'combinationsWithRep',
        'permutations',
        'factorial'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/combinationsWithRep.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "combinationsWithRepDocs": (()=>combinationsWithRepDocs)
});
var combinationsWithRepDocs = {
    name: 'combinationsWithRep',
    category: 'Probability',
    syntax: [
        'combinationsWithRep(n, k)'
    ],
    description: 'Compute the number of combinations of n items taken k at a time with replacements.',
    examples: [
        'combinationsWithRep(7, 5)'
    ],
    seealso: [
        'combinations',
        'permutations',
        'factorial'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/factorial.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "factorialDocs": (()=>factorialDocs)
});
var factorialDocs = {
    name: 'factorial',
    category: 'Probability',
    syntax: [
        'n!',
        'factorial(n)'
    ],
    description: 'Compute the factorial of a value',
    examples: [
        '5!',
        '5 * 4 * 3 * 2 * 1',
        '3!'
    ],
    seealso: [
        'combinations',
        'combinationsWithRep',
        'permutations',
        'gamma'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/gamma.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "gammaDocs": (()=>gammaDocs)
});
var gammaDocs = {
    name: 'gamma',
    category: 'Probability',
    syntax: [
        'gamma(n)'
    ],
    description: 'Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.',
    examples: [
        'gamma(4)',
        '3!',
        'gamma(1/2)',
        'sqrt(pi)'
    ],
    seealso: [
        'factorial'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/lgamma.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "lgammaDocs": (()=>lgammaDocs)
});
var lgammaDocs = {
    name: 'lgamma',
    category: 'Probability',
    syntax: [
        'lgamma(n)'
    ],
    description: 'Logarithm of the gamma function for real, positive numbers and complex numbers, ' + 'using Lanczos approximation for numbers and Stirling series for complex numbers.',
    examples: [
        'lgamma(4)',
        'lgamma(1/2)',
        'lgamma(i)',
        'lgamma(complex(1.1, 2))'
    ],
    seealso: [
        'gamma'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/kldivergence.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "kldivergenceDocs": (()=>kldivergenceDocs)
});
var kldivergenceDocs = {
    name: 'kldivergence',
    category: 'Probability',
    syntax: [
        'kldivergence(x, y)'
    ],
    description: 'Calculate the Kullback-Leibler (KL) divergence  between two distributions.',
    examples: [
        'kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])'
    ],
    seealso: []
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/multinomial.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "multinomialDocs": (()=>multinomialDocs)
});
var multinomialDocs = {
    name: 'multinomial',
    category: 'Probability',
    syntax: [
        'multinomial(A)'
    ],
    description: 'Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai > 0.',
    examples: [
        'multinomial([1, 2, 1])'
    ],
    seealso: [
        'combinations',
        'factorial'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/permutations.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "permutationsDocs": (()=>permutationsDocs)
});
var permutationsDocs = {
    name: 'permutations',
    category: 'Probability',
    syntax: [
        'permutations(n)',
        'permutations(n, k)'
    ],
    description: 'Compute the number of permutations of n items taken k at a time',
    examples: [
        'permutations(5)',
        'permutations(5, 3)'
    ],
    seealso: [
        'combinations',
        'combinationsWithRep',
        'factorial'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/pickRandom.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "pickRandomDocs": (()=>pickRandomDocs)
});
var pickRandomDocs = {
    name: 'pickRandom',
    category: 'Probability',
    syntax: [
        'pickRandom(array)',
        'pickRandom(array, number)',
        'pickRandom(array, weights)',
        'pickRandom(array, number, weights)',
        'pickRandom(array, weights, number)'
    ],
    description: 'Pick a random entry from a given array.',
    examples: [
        'pickRandom(0:10)',
        'pickRandom([1, 3, 1, 6])',
        'pickRandom([1, 3, 1, 6], 2)',
        'pickRandom([1, 3, 1, 6], [2, 3, 2, 1])',
        'pickRandom([1, 3, 1, 6], 2, [2, 3, 2, 1])',
        'pickRandom([1, 3, 1, 6], [2, 3, 2, 1], 2)'
    ],
    seealso: [
        'random',
        'randomInt'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/random.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "randomDocs": (()=>randomDocs)
});
var randomDocs = {
    name: 'random',
    category: 'Probability',
    syntax: [
        'random()',
        'random(max)',
        'random(min, max)',
        'random(size)',
        'random(size, max)',
        'random(size, min, max)'
    ],
    description: 'Return a random number.',
    examples: [
        'random()',
        'random(10, 20)',
        'random([2, 3])'
    ],
    seealso: [
        'pickRandom',
        'randomInt'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/randomInt.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "randomIntDocs": (()=>randomIntDocs)
});
var randomIntDocs = {
    name: 'randomInt',
    category: 'Probability',
    syntax: [
        'randomInt(max)',
        'randomInt(min, max)',
        'randomInt(size)',
        'randomInt(size, max)',
        'randomInt(size, min, max)'
    ],
    description: 'Return a random integer number',
    examples: [
        'randomInt(10, 20)',
        'randomInt([2, 3], 10)'
    ],
    seealso: [
        'pickRandom',
        'random'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/compare.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "compareDocs": (()=>compareDocs)
});
var compareDocs = {
    name: 'compare',
    category: 'Relational',
    syntax: [
        'compare(x, y)'
    ],
    description: 'Compare two values. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',
    examples: [
        'compare(2, 3)',
        'compare(3, 2)',
        'compare(2, 2)',
        'compare(5cm, 40mm)',
        'compare(2, [1, 2, 3])'
    ],
    seealso: [
        'equal',
        'unequal',
        'smaller',
        'smallerEq',
        'largerEq',
        'compareNatural',
        'compareText'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/compareNatural.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "compareNaturalDocs": (()=>compareNaturalDocs)
});
var compareNaturalDocs = {
    name: 'compareNatural',
    category: 'Relational',
    syntax: [
        'compareNatural(x, y)'
    ],
    description: 'Compare two values of any type in a deterministic, natural way. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',
    examples: [
        'compareNatural(2, 3)',
        'compareNatural(3, 2)',
        'compareNatural(2, 2)',
        'compareNatural(5cm, 40mm)',
        'compareNatural("2", "10")',
        'compareNatural(2 + 3i, 2 + 4i)',
        'compareNatural([1, 2, 4], [1, 2, 3])',
        'compareNatural([1, 5], [1, 2, 3])',
        'compareNatural([1, 2], [1, 2])',
        'compareNatural({a: 2}, {a: 4})'
    ],
    seealso: [
        'equal',
        'unequal',
        'smaller',
        'smallerEq',
        'largerEq',
        'compare',
        'compareText'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/compareText.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "compareTextDocs": (()=>compareTextDocs)
});
var compareTextDocs = {
    name: 'compareText',
    category: 'Relational',
    syntax: [
        'compareText(x, y)'
    ],
    description: 'Compare two strings lexically. Comparison is case sensitive. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',
    examples: [
        'compareText("B", "A")',
        'compareText("A", "B")',
        'compareText("A", "A")',
        'compareText("2", "10")',
        'compare("2", "10")',
        'compare(2, 10)',
        'compareNatural("2", "10")',
        'compareText("B", ["A", "B", "C"])'
    ],
    seealso: [
        'compare',
        'compareNatural'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/deepEqual.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "deepEqualDocs": (()=>deepEqualDocs)
});
var deepEqualDocs = {
    name: 'deepEqual',
    category: 'Relational',
    syntax: [
        'deepEqual(x, y)'
    ],
    description: 'Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.',
    examples: [
        'deepEqual([1,3,4], [1,3,4])',
        'deepEqual([1,3,4], [1,3])'
    ],
    seealso: [
        'equal',
        'unequal',
        'smaller',
        'larger',
        'smallerEq',
        'largerEq',
        'compare'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/equal.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "equalDocs": (()=>equalDocs)
});
var equalDocs = {
    name: 'equal',
    category: 'Relational',
    syntax: [
        'x == y',
        'equal(x, y)'
    ],
    description: 'Check equality of two values. Returns true if the values are equal, and false if not.',
    examples: [
        '2+2 == 3',
        '2+2 == 4',
        'a = 3.2',
        'b = 6-2.8',
        'a == b',
        '50cm == 0.5m'
    ],
    seealso: [
        'unequal',
        'smaller',
        'larger',
        'smallerEq',
        'largerEq',
        'compare',
        'deepEqual',
        'equalText'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/equalText.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "equalTextDocs": (()=>equalTextDocs)
});
var equalTextDocs = {
    name: 'equalText',
    category: 'Relational',
    syntax: [
        'equalText(x, y)'
    ],
    description: 'Check equality of two strings. Comparison is case sensitive. Returns true if the values are equal, and false if not.',
    examples: [
        'equalText("Hello", "Hello")',
        'equalText("a", "A")',
        'equal("2e3", "2000")',
        'equalText("2e3", "2000")',
        'equalText("B", ["A", "B", "C"])'
    ],
    seealso: [
        'compare',
        'compareNatural',
        'compareText',
        'equal'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/larger.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "largerDocs": (()=>largerDocs)
});
var largerDocs = {
    name: 'larger',
    category: 'Relational',
    syntax: [
        'x > y',
        'larger(x, y)'
    ],
    description: 'Check if value x is larger than y. Returns true if x is larger than y, and false if not.',
    examples: [
        '2 > 3',
        '5 > 2*2',
        'a = 3.3',
        'b = 6-2.8',
        '(a > b)',
        '(b < a)',
        '5 cm > 2 inch'
    ],
    seealso: [
        'equal',
        'unequal',
        'smaller',
        'smallerEq',
        'largerEq',
        'compare'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/largerEq.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "largerEqDocs": (()=>largerEqDocs)
});
var largerEqDocs = {
    name: 'largerEq',
    category: 'Relational',
    syntax: [
        'x >= y',
        'largerEq(x, y)'
    ],
    description: 'Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.',
    examples: [
        '2 >= 1+1',
        '2 > 1+1',
        'a = 3.2',
        'b = 6-2.8',
        '(a >= b)'
    ],
    seealso: [
        'equal',
        'unequal',
        'smallerEq',
        'smaller',
        'compare'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/smaller.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "smallerDocs": (()=>smallerDocs)
});
var smallerDocs = {
    name: 'smaller',
    category: 'Relational',
    syntax: [
        'x < y',
        'smaller(x, y)'
    ],
    description: 'Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.',
    examples: [
        '2 < 3',
        '5 < 2*2',
        'a = 3.3',
        'b = 6-2.8',
        '(a < b)',
        '5 cm < 2 inch'
    ],
    seealso: [
        'equal',
        'unequal',
        'larger',
        'smallerEq',
        'largerEq',
        'compare'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/smallerEq.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "smallerEqDocs": (()=>smallerEqDocs)
});
var smallerEqDocs = {
    name: 'smallerEq',
    category: 'Relational',
    syntax: [
        'x <= y',
        'smallerEq(x, y)'
    ],
    description: 'Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.',
    examples: [
        '2 <= 1+1',
        '2 < 1+1',
        'a = 3.2',
        'b = 6-2.8',
        '(a <= b)'
    ],
    seealso: [
        'equal',
        'unequal',
        'larger',
        'smaller',
        'largerEq',
        'compare'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/unequal.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "unequalDocs": (()=>unequalDocs)
});
var unequalDocs = {
    name: 'unequal',
    category: 'Relational',
    syntax: [
        'x != y',
        'unequal(x, y)'
    ],
    description: 'Check unequality of two values. Returns true if the values are unequal, and false if they are equal.',
    examples: [
        '2+2 != 3',
        '2+2 != 4',
        'a = 3.2',
        'b = 6-2.8',
        'a != b',
        '50cm != 0.5m',
        '5 cm != 2 inch'
    ],
    seealso: [
        'equal',
        'smaller',
        'larger',
        'smallerEq',
        'largerEq',
        'compare',
        'deepEqual'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setCartesian.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "setCartesianDocs": (()=>setCartesianDocs)
});
var setCartesianDocs = {
    name: 'setCartesian',
    category: 'Set',
    syntax: [
        'setCartesian(set1, set2)'
    ],
    description: 'Create the cartesian product of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays and the values will be sorted in ascending order before the operation.',
    examples: [
        'setCartesian([1, 2], [3, 4])'
    ],
    seealso: [
        'setUnion',
        'setIntersect',
        'setDifference',
        'setPowerset'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setDifference.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "setDifferenceDocs": (()=>setDifferenceDocs)
});
var setDifferenceDocs = {
    name: 'setDifference',
    category: 'Set',
    syntax: [
        'setDifference(set1, set2)'
    ],
    description: 'Create the difference of two (multi)sets: every element of set1, that is not the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
    examples: [
        'setDifference([1, 2, 3, 4], [3, 4, 5, 6])',
        'setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'
    ],
    seealso: [
        'setUnion',
        'setIntersect',
        'setSymDifference'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setDistinct.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "setDistinctDocs": (()=>setDistinctDocs)
});
var setDistinctDocs = {
    name: 'setDistinct',
    category: 'Set',
    syntax: [
        'setDistinct(set)'
    ],
    description: 'Collect the distinct elements of a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',
    examples: [
        'setDistinct([1, 1, 1, 2, 2, 3])'
    ],
    seealso: [
        'setMultiplicity'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setIntersect.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "setIntersectDocs": (()=>setIntersectDocs)
});
var setIntersectDocs = {
    name: 'setIntersect',
    category: 'Set',
    syntax: [
        'setIntersect(set1, set2)'
    ],
    description: 'Create the intersection of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
    examples: [
        'setIntersect([1, 2, 3, 4], [3, 4, 5, 6])',
        'setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])'
    ],
    seealso: [
        'setUnion',
        'setDifference'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setIsSubset.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "setIsSubsetDocs": (()=>setIsSubsetDocs)
});
var setIsSubsetDocs = {
    name: 'setIsSubset',
    category: 'Set',
    syntax: [
        'setIsSubset(set1, set2)'
    ],
    description: 'Check whether a (multi)set is a subset of another (multi)set: every element of set1 is the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
    examples: [
        'setIsSubset([1, 2], [3, 4, 5, 6])',
        'setIsSubset([3, 4], [3, 4, 5, 6])'
    ],
    seealso: [
        'setUnion',
        'setIntersect',
        'setDifference'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setMultiplicity.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "setMultiplicityDocs": (()=>setMultiplicityDocs)
});
var setMultiplicityDocs = {
    name: 'setMultiplicity',
    category: 'Set',
    syntax: [
        'setMultiplicity(element, set)'
    ],
    description: 'Count the multiplicity of an element in a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',
    examples: [
        'setMultiplicity(1, [1, 2, 2, 4])',
        'setMultiplicity(2, [1, 2, 2, 4])'
    ],
    seealso: [
        'setDistinct',
        'setSize'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setPowerset.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "setPowersetDocs": (()=>setPowersetDocs)
});
var setPowersetDocs = {
    name: 'setPowerset',
    category: 'Set',
    syntax: [
        'setPowerset(set)'
    ],
    description: 'Create the powerset of a (multi)set: the powerset contains very possible subsets of a (multi)set. A multi-dimension array will be converted to a single-dimension array before the operation.',
    examples: [
        'setPowerset([1, 2, 3])'
    ],
    seealso: [
        'setCartesian'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setSize.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "setSizeDocs": (()=>setSizeDocs)
});
var setSizeDocs = {
    name: 'setSize',
    category: 'Set',
    syntax: [
        'setSize(set)',
        'setSize(set, unique)'
    ],
    description: 'Count the number of elements of a (multi)set. When the second parameter "unique" is true, count only the unique values. A multi-dimension array will be converted to a single-dimension array before the operation.',
    examples: [
        'setSize([1, 2, 2, 4])',
        'setSize([1, 2, 2, 4], true)'
    ],
    seealso: [
        'setUnion',
        'setIntersect',
        'setDifference'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setSymDifference.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "setSymDifferenceDocs": (()=>setSymDifferenceDocs)
});
var setSymDifferenceDocs = {
    name: 'setSymDifference',
    category: 'Set',
    syntax: [
        'setSymDifference(set1, set2)'
    ],
    description: 'Create the symmetric difference of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
    examples: [
        'setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])',
        'setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'
    ],
    seealso: [
        'setUnion',
        'setIntersect',
        'setDifference'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setUnion.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "setUnionDocs": (()=>setUnionDocs)
});
var setUnionDocs = {
    name: 'setUnion',
    category: 'Set',
    syntax: [
        'setUnion(set1, set2)'
    ],
    description: 'Create the union of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
    examples: [
        'setUnion([1, 2, 3, 4], [3, 4, 5, 6])',
        'setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])'
    ],
    seealso: [
        'setIntersect',
        'setDifference'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/signal/zpk2tf.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "zpk2tfDocs": (()=>zpk2tfDocs)
});
var zpk2tfDocs = {
    name: 'zpk2tf',
    category: 'Signal',
    syntax: [
        'zpk2tf(z, p, k)'
    ],
    description: 'Compute the transfer function of a zero-pole-gain model.',
    examples: [
        'zpk2tf([1, 2], [-1, -2], 1)',
        'zpk2tf([1, 2], [-1, -2])',
        'zpk2tf([1 - 3i, 2 + 2i], [-1, -2])'
    ],
    seealso: []
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/signal/freqz.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "freqzDocs": (()=>freqzDocs)
});
var freqzDocs = {
    name: 'freqz',
    category: 'Signal',
    syntax: [
        'freqz(b, a)',
        'freqz(b, a, w)'
    ],
    description: 'Calculates the frequency response of a filter given its numerator and denominator coefficients.',
    examples: [
        'freqz([1, 2], [1, 2, 3])',
        'freqz([1, 2], [1, 2, 3], [0, 1])',
        'freqz([1, 2], [1, 2, 3], 512)'
    ],
    seealso: []
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/special/erf.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "erfDocs": (()=>erfDocs)
});
var erfDocs = {
    name: 'erf',
    category: 'Special',
    syntax: [
        'erf(x)'
    ],
    description: 'Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x',
    examples: [
        'erf(0.2)',
        'erf(-0.5)',
        'erf(4)'
    ],
    seealso: []
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/special/zeta.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "zetaDocs": (()=>zetaDocs)
});
var zetaDocs = {
    name: 'zeta',
    category: 'Special',
    syntax: [
        'zeta(s)'
    ],
    description: 'Compute the Riemann Zeta Function using an infinite series and Riemann\'s Functional Equation for the entire complex plane',
    examples: [
        'zeta(0.2)',
        'zeta(-0.5)',
        'zeta(4)'
    ],
    seealso: []
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/mad.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "madDocs": (()=>madDocs)
});
var madDocs = {
    name: 'mad',
    category: 'Statistics',
    syntax: [
        'mad(a, b, c, ...)',
        'mad(A)'
    ],
    description: 'Compute the median absolute deviation of a matrix or a list with values. The median absolute deviation is defined as the median of the absolute deviations from the median.',
    examples: [
        'mad(10, 20, 30)',
        'mad([1, 2, 3])'
    ],
    seealso: [
        'mean',
        'median',
        'std',
        'abs'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/max.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "maxDocs": (()=>maxDocs)
});
var maxDocs = {
    name: 'max',
    category: 'Statistics',
    syntax: [
        'max(a, b, c, ...)',
        'max(A)',
        'max(A, dimension)'
    ],
    description: 'Compute the maximum value of a list of values.',
    examples: [
        'max(2, 3, 4, 1)',
        'max([2, 3, 4, 1])',
        'max([2, 5; 4, 3])',
        'max([2, 5; 4, 3], 1)',
        'max([2, 5; 4, 3], 2)',
        'max(2.7, 7.1, -4.5, 2.0, 4.1)',
        'min(2.7, 7.1, -4.5, 2.0, 4.1)'
    ],
    seealso: [
        'mean',
        'median',
        'min',
        'prod',
        'std',
        'sum',
        'variance'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/mean.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "meanDocs": (()=>meanDocs)
});
var meanDocs = {
    name: 'mean',
    category: 'Statistics',
    syntax: [
        'mean(a, b, c, ...)',
        'mean(A)',
        'mean(A, dimension)'
    ],
    description: 'Compute the arithmetic mean of a list of values.',
    examples: [
        'mean(2, 3, 4, 1)',
        'mean([2, 3, 4, 1])',
        'mean([2, 5; 4, 3])',
        'mean([2, 5; 4, 3], 1)',
        'mean([2, 5; 4, 3], 2)',
        'mean([1.0, 2.7, 3.2, 4.0])'
    ],
    seealso: [
        'max',
        'median',
        'min',
        'prod',
        'std',
        'sum',
        'variance'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/median.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "medianDocs": (()=>medianDocs)
});
var medianDocs = {
    name: 'median',
    category: 'Statistics',
    syntax: [
        'median(a, b, c, ...)',
        'median(A)'
    ],
    description: 'Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.',
    examples: [
        'median(5, 2, 7)',
        'median([3, -1, 5, 7])'
    ],
    seealso: [
        'max',
        'mean',
        'min',
        'prod',
        'std',
        'sum',
        'variance',
        'quantileSeq'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/min.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "minDocs": (()=>minDocs)
});
var minDocs = {
    name: 'min',
    category: 'Statistics',
    syntax: [
        'min(a, b, c, ...)',
        'min(A)',
        'min(A, dimension)'
    ],
    description: 'Compute the minimum value of a list of values.',
    examples: [
        'min(2, 3, 4, 1)',
        'min([2, 3, 4, 1])',
        'min([2, 5; 4, 3])',
        'min([2, 5; 4, 3], 1)',
        'min([2, 5; 4, 3], 2)',
        'min(2.7, 7.1, -4.5, 2.0, 4.1)',
        'max(2.7, 7.1, -4.5, 2.0, 4.1)'
    ],
    seealso: [
        'max',
        'mean',
        'median',
        'prod',
        'std',
        'sum',
        'variance'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/mode.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "modeDocs": (()=>modeDocs)
});
var modeDocs = {
    name: 'mode',
    category: 'Statistics',
    syntax: [
        'mode(a, b, c, ...)',
        'mode(A)',
        'mode(A, a, b, B, c, ...)'
    ],
    description: 'Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.',
    examples: [
        'mode(2, 1, 4, 3, 1)',
        'mode([1, 2.7, 3.2, 4, 2.7])',
        'mode(1, 4, 6, 1, 6)'
    ],
    seealso: [
        'max',
        'mean',
        'min',
        'median',
        'prod',
        'std',
        'sum',
        'variance'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/prod.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "prodDocs": (()=>prodDocs)
});
var prodDocs = {
    name: 'prod',
    category: 'Statistics',
    syntax: [
        'prod(a, b, c, ...)',
        'prod(A)'
    ],
    description: 'Compute the product of all values.',
    examples: [
        'prod(2, 3, 4)',
        'prod([2, 3, 4])',
        'prod([2, 5; 4, 3])'
    ],
    seealso: [
        'max',
        'mean',
        'min',
        'median',
        'min',
        'std',
        'sum',
        'variance'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/quantileSeq.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "quantileSeqDocs": (()=>quantileSeqDocs)
});
var quantileSeqDocs = {
    name: 'quantileSeq',
    category: 'Statistics',
    syntax: [
        'quantileSeq(A, prob[, sorted])',
        'quantileSeq(A, [prob1, prob2, ...][, sorted])',
        'quantileSeq(A, N[, sorted])'
    ],
    description: 'Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probability are: Number, BigNumber. \n\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.',
    examples: [
        'quantileSeq([3, -1, 5, 7], 0.5)',
        'quantileSeq([3, -1, 5, 7], [1/3, 2/3])',
        'quantileSeq([3, -1, 5, 7], 2)',
        'quantileSeq([-1, 3, 5, 7], 0.5, true)'
    ],
    seealso: [
        'mean',
        'median',
        'min',
        'max',
        'prod',
        'std',
        'sum',
        'variance'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/std.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "stdDocs": (()=>stdDocs)
});
var stdDocs = {
    name: 'std',
    category: 'Statistics',
    syntax: [
        'std(a, b, c, ...)',
        'std(A)',
        'std(A, dimension)',
        'std(A, normalization)',
        'std(A, dimension, normalization)'
    ],
    description: 'Compute the standard deviation of all values, defined as std(A) = sqrt(variance(A)). Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
    examples: [
        'std(2, 4, 6)',
        'std([2, 4, 6, 8])',
        'std([2, 4, 6, 8], "uncorrected")',
        'std([2, 4, 6, 8], "biased")',
        'std([1, 2, 3; 4, 5, 6])'
    ],
    seealso: [
        'max',
        'mean',
        'min',
        'median',
        'prod',
        'sum',
        'variance'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/cumsum.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "cumSumDocs": (()=>cumSumDocs)
});
var cumSumDocs = {
    name: 'cumsum',
    category: 'Statistics',
    syntax: [
        'cumsum(a, b, c, ...)',
        'cumsum(A)'
    ],
    description: 'Compute the cumulative sum of all values.',
    examples: [
        'cumsum(2, 3, 4, 1)',
        'cumsum([2, 3, 4, 1])',
        'cumsum([1, 2; 3, 4])',
        'cumsum([1, 2; 3, 4], 1)',
        'cumsum([1, 2; 3, 4], 2)'
    ],
    seealso: [
        'max',
        'mean',
        'median',
        'min',
        'prod',
        'std',
        'sum',
        'variance'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/sum.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "sumDocs": (()=>sumDocs)
});
var sumDocs = {
    name: 'sum',
    category: 'Statistics',
    syntax: [
        'sum(a, b, c, ...)',
        'sum(A)',
        'sum(A, dimension)'
    ],
    description: 'Compute the sum of all values.',
    examples: [
        'sum(2, 3, 4, 1)',
        'sum([2, 3, 4, 1])',
        'sum([2, 5; 4, 3])'
    ],
    seealso: [
        'max',
        'mean',
        'median',
        'min',
        'prod',
        'std',
        'sum',
        'variance'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/variance.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "varianceDocs": (()=>varianceDocs)
});
var varianceDocs = {
    name: 'variance',
    category: 'Statistics',
    syntax: [
        'variance(a, b, c, ...)',
        'variance(A)',
        'variance(A, dimension)',
        'variance(A, normalization)',
        'variance(A, dimension, normalization)'
    ],
    description: 'Compute the variance of all values. Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
    examples: [
        'variance(2, 4, 6)',
        'variance([2, 4, 6, 8])',
        'variance([2, 4, 6, 8], "uncorrected")',
        'variance([2, 4, 6, 8], "biased")',
        'variance([1, 2, 3; 4, 5, 6])'
    ],
    seealso: [
        'max',
        'mean',
        'min',
        'median',
        'min',
        'prod',
        'std',
        'sum'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/corr.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "corrDocs": (()=>corrDocs)
});
var corrDocs = {
    name: 'corr',
    category: 'Statistics',
    syntax: [
        'corr(A,B)'
    ],
    description: 'Compute the correlation coefficient of a two list with values, For matrices, the matrix correlation coefficient is calculated.',
    examples: [
        'corr([2, 4, 6, 8],[1, 2, 3, 6])',
        'corr(matrix([[1, 2.2, 3, 4.8, 5], [1, 2, 3, 4, 5]]), matrix([[4, 5.3, 6.6, 7, 8], [1, 2, 3, 4, 5]]))'
    ],
    seealso: [
        'max',
        'mean',
        'min',
        'median',
        'min',
        'prod',
        'std',
        'sum'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acos.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "acosDocs": (()=>acosDocs)
});
var acosDocs = {
    name: 'acos',
    category: 'Trigonometry',
    syntax: [
        'acos(x)'
    ],
    description: 'Compute the inverse cosine of a value in radians.',
    examples: [
        'acos(0.5)',
        'acos(cos(2.3))'
    ],
    seealso: [
        'cos',
        'atan',
        'asin'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acosh.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "acoshDocs": (()=>acoshDocs)
});
var acoshDocs = {
    name: 'acosh',
    category: 'Trigonometry',
    syntax: [
        'acosh(x)'
    ],
    description: 'Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.',
    examples: [
        'acosh(1.5)'
    ],
    seealso: [
        'cosh',
        'asinh',
        'atanh'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acot.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "acotDocs": (()=>acotDocs)
});
var acotDocs = {
    name: 'acot',
    category: 'Trigonometry',
    syntax: [
        'acot(x)'
    ],
    description: 'Calculate the inverse cotangent of a value.',
    examples: [
        'acot(0.5)',
        'acot(cot(0.5))',
        'acot(2)'
    ],
    seealso: [
        'cot',
        'atan'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acoth.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "acothDocs": (()=>acothDocs)
});
var acothDocs = {
    name: 'acoth',
    category: 'Trigonometry',
    syntax: [
        'acoth(x)'
    ],
    description: 'Calculate the inverse hyperbolic tangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.',
    examples: [
        'acoth(2)',
        'acoth(0.5)'
    ],
    seealso: [
        'acsch',
        'asech'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acsc.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "acscDocs": (()=>acscDocs)
});
var acscDocs = {
    name: 'acsc',
    category: 'Trigonometry',
    syntax: [
        'acsc(x)'
    ],
    description: 'Calculate the inverse cotangent of a value.',
    examples: [
        'acsc(2)',
        'acsc(csc(0.5))',
        'acsc(0.5)'
    ],
    seealso: [
        'csc',
        'asin',
        'asec'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acsch.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "acschDocs": (()=>acschDocs)
});
var acschDocs = {
    name: 'acsch',
    category: 'Trigonometry',
    syntax: [
        'acsch(x)'
    ],
    description: 'Calculate the inverse hyperbolic cosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.',
    examples: [
        'acsch(0.5)'
    ],
    seealso: [
        'asech',
        'acoth'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/asec.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "asecDocs": (()=>asecDocs)
});
var asecDocs = {
    name: 'asec',
    category: 'Trigonometry',
    syntax: [
        'asec(x)'
    ],
    description: 'Calculate the inverse secant of a value.',
    examples: [
        'asec(0.5)',
        'asec(sec(0.5))',
        'asec(2)'
    ],
    seealso: [
        'acos',
        'acot',
        'acsc'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/asech.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "asechDocs": (()=>asechDocs)
});
var asechDocs = {
    name: 'asech',
    category: 'Trigonometry',
    syntax: [
        'asech(x)'
    ],
    description: 'Calculate the inverse secant of a value.',
    examples: [
        'asech(0.5)'
    ],
    seealso: [
        'acsch',
        'acoth'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/asin.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "asinDocs": (()=>asinDocs)
});
var asinDocs = {
    name: 'asin',
    category: 'Trigonometry',
    syntax: [
        'asin(x)'
    ],
    description: 'Compute the inverse sine of a value in radians.',
    examples: [
        'asin(0.5)',
        'asin(sin(0.5))'
    ],
    seealso: [
        'sin',
        'acos',
        'atan'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/asinh.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "asinhDocs": (()=>asinhDocs)
});
var asinhDocs = {
    name: 'asinh',
    category: 'Trigonometry',
    syntax: [
        'asinh(x)'
    ],
    description: 'Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.',
    examples: [
        'asinh(0.5)'
    ],
    seealso: [
        'acosh',
        'atanh'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/atan.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "atanDocs": (()=>atanDocs)
});
var atanDocs = {
    name: 'atan',
    category: 'Trigonometry',
    syntax: [
        'atan(x)'
    ],
    description: 'Compute the inverse tangent of a value in radians.',
    examples: [
        'atan(0.5)',
        'atan(tan(0.5))'
    ],
    seealso: [
        'tan',
        'acos',
        'asin'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/atan2.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "atan2Docs": (()=>atan2Docs)
});
var atan2Docs = {
    name: 'atan2',
    category: 'Trigonometry',
    syntax: [
        'atan2(y, x)'
    ],
    description: 'Computes the principal value of the arc tangent of y/x in radians.',
    examples: [
        'atan2(2, 2) / pi',
        'angle = 60 deg in rad',
        'x = cos(angle)',
        'y = sin(angle)',
        'atan2(y, x)'
    ],
    seealso: [
        'sin',
        'cos',
        'tan'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/atanh.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "atanhDocs": (()=>atanhDocs)
});
var atanhDocs = {
    name: 'atanh',
    category: 'Trigonometry',
    syntax: [
        'atanh(x)'
    ],
    description: 'Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.',
    examples: [
        'atanh(0.5)'
    ],
    seealso: [
        'acosh',
        'asinh'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/cos.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "cosDocs": (()=>cosDocs)
});
var cosDocs = {
    name: 'cos',
    category: 'Trigonometry',
    syntax: [
        'cos(x)'
    ],
    description: 'Compute the cosine of x in radians.',
    examples: [
        'cos(2)',
        'cos(pi / 4) ^ 2',
        'cos(180 deg)',
        'cos(60 deg)',
        'sin(0.2)^2 + cos(0.2)^2'
    ],
    seealso: [
        'acos',
        'sin',
        'tan'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/cosh.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "coshDocs": (()=>coshDocs)
});
var coshDocs = {
    name: 'cosh',
    category: 'Trigonometry',
    syntax: [
        'cosh(x)'
    ],
    description: 'Compute the hyperbolic cosine of x in radians.',
    examples: [
        'cosh(0.5)'
    ],
    seealso: [
        'sinh',
        'tanh',
        'coth'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/cot.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "cotDocs": (()=>cotDocs)
});
var cotDocs = {
    name: 'cot',
    category: 'Trigonometry',
    syntax: [
        'cot(x)'
    ],
    description: 'Compute the cotangent of x in radians. Defined as 1/tan(x)',
    examples: [
        'cot(2)',
        '1 / tan(2)'
    ],
    seealso: [
        'sec',
        'csc',
        'tan'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/coth.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "cothDocs": (()=>cothDocs)
});
var cothDocs = {
    name: 'coth',
    category: 'Trigonometry',
    syntax: [
        'coth(x)'
    ],
    description: 'Compute the hyperbolic cotangent of x in radians.',
    examples: [
        'coth(2)',
        '1 / tanh(2)'
    ],
    seealso: [
        'sech',
        'csch',
        'tanh'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/csc.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "cscDocs": (()=>cscDocs)
});
var cscDocs = {
    name: 'csc',
    category: 'Trigonometry',
    syntax: [
        'csc(x)'
    ],
    description: 'Compute the cosecant of x in radians. Defined as 1/sin(x)',
    examples: [
        'csc(2)',
        '1 / sin(2)'
    ],
    seealso: [
        'sec',
        'cot',
        'sin'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/csch.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "cschDocs": (()=>cschDocs)
});
var cschDocs = {
    name: 'csch',
    category: 'Trigonometry',
    syntax: [
        'csch(x)'
    ],
    description: 'Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)',
    examples: [
        'csch(2)',
        '1 / sinh(2)'
    ],
    seealso: [
        'sech',
        'coth',
        'sinh'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/sec.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "secDocs": (()=>secDocs)
});
var secDocs = {
    name: 'sec',
    category: 'Trigonometry',
    syntax: [
        'sec(x)'
    ],
    description: 'Compute the secant of x in radians. Defined as 1/cos(x)',
    examples: [
        'sec(2)',
        '1 / cos(2)'
    ],
    seealso: [
        'cot',
        'csc',
        'cos'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/sech.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "sechDocs": (()=>sechDocs)
});
var sechDocs = {
    name: 'sech',
    category: 'Trigonometry',
    syntax: [
        'sech(x)'
    ],
    description: 'Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)',
    examples: [
        'sech(2)',
        '1 / cosh(2)'
    ],
    seealso: [
        'coth',
        'csch',
        'cosh'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/sin.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "sinDocs": (()=>sinDocs)
});
var sinDocs = {
    name: 'sin',
    category: 'Trigonometry',
    syntax: [
        'sin(x)'
    ],
    description: 'Compute the sine of x in radians.',
    examples: [
        'sin(2)',
        'sin(pi / 4) ^ 2',
        'sin(90 deg)',
        'sin(30 deg)',
        'sin(0.2)^2 + cos(0.2)^2'
    ],
    seealso: [
        'asin',
        'cos',
        'tan'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/sinh.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "sinhDocs": (()=>sinhDocs)
});
var sinhDocs = {
    name: 'sinh',
    category: 'Trigonometry',
    syntax: [
        'sinh(x)'
    ],
    description: 'Compute the hyperbolic sine of x in radians.',
    examples: [
        'sinh(0.5)'
    ],
    seealso: [
        'cosh',
        'tanh'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/tan.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "tanDocs": (()=>tanDocs)
});
var tanDocs = {
    name: 'tan',
    category: 'Trigonometry',
    syntax: [
        'tan(x)'
    ],
    description: 'Compute the tangent of x in radians.',
    examples: [
        'tan(0.5)',
        'sin(0.5) / cos(0.5)',
        'tan(pi / 4)',
        'tan(45 deg)'
    ],
    seealso: [
        'atan',
        'sin',
        'cos'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/tanh.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "tanhDocs": (()=>tanhDocs)
});
var tanhDocs = {
    name: 'tanh',
    category: 'Trigonometry',
    syntax: [
        'tanh(x)'
    ],
    description: 'Compute the hyperbolic tangent of x in radians.',
    examples: [
        'tanh(0.5)',
        'sinh(0.5) / cosh(0.5)'
    ],
    seealso: [
        'sinh',
        'cosh'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/units/to.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "toDocs": (()=>toDocs)
});
var toDocs = {
    name: 'to',
    category: 'Units',
    syntax: [
        'x to unit',
        'to(x, unit)'
    ],
    description: 'Change the unit of a value.',
    examples: [
        '5 inch to cm',
        '3.2kg to g',
        '16 bytes in bits'
    ],
    seealso: []
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/bin.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "binDocs": (()=>binDocs)
});
var binDocs = {
    name: 'bin',
    category: 'Utils',
    syntax: [
        'bin(value)'
    ],
    description: 'Format a number as binary',
    examples: [
        'bin(2)'
    ],
    seealso: [
        'oct',
        'hex'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/clone.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "cloneDocs": (()=>cloneDocs)
});
var cloneDocs = {
    name: 'clone',
    category: 'Utils',
    syntax: [
        'clone(x)'
    ],
    description: 'Clone a variable. Creates a copy of primitive variables, and a deep copy of matrices',
    examples: [
        'clone(3.5)',
        'clone(2 - 4i)',
        'clone(45 deg)',
        'clone([1, 2; 3, 4])',
        'clone("hello world")'
    ],
    seealso: []
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/format.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "formatDocs": (()=>formatDocs)
});
var formatDocs = {
    name: 'format',
    category: 'Utils',
    syntax: [
        'format(value)',
        'format(value, precision)'
    ],
    description: 'Format a value of any type as string.',
    examples: [
        'format(2.3)',
        'format(3 - 4i)',
        'format([])',
        'format(pi, 3)'
    ],
    seealso: [
        'print'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/hasNumericValue.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "hasNumericValueDocs": (()=>hasNumericValueDocs)
});
var hasNumericValueDocs = {
    name: 'hasNumericValue',
    category: 'Utils',
    syntax: [
        'hasNumericValue(x)'
    ],
    description: 'Test whether a value is an numeric value. ' + 'In case of a string, true is returned if the string contains a numeric value.',
    examples: [
        'hasNumericValue(2)',
        'hasNumericValue("2")',
        'isNumeric("2")',
        'hasNumericValue(0)',
        'hasNumericValue(bignumber(500))',
        'hasNumericValue(fraction(0.125))',
        'hasNumericValue(2 + 3i)',
        'hasNumericValue([2.3, "foo", false])'
    ],
    seealso: [
        'isInteger',
        'isZero',
        'isNegative',
        'isPositive',
        'isNaN',
        'isNumeric'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/hex.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "hexDocs": (()=>hexDocs)
});
var hexDocs = {
    name: 'hex',
    category: 'Utils',
    syntax: [
        'hex(value)'
    ],
    description: 'Format a number as hexadecimal',
    examples: [
        'hex(240)'
    ],
    seealso: [
        'bin',
        'oct'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isInteger.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isIntegerDocs": (()=>isIntegerDocs)
});
var isIntegerDocs = {
    name: 'isInteger',
    category: 'Utils',
    syntax: [
        'isInteger(x)'
    ],
    description: 'Test whether a value is an integer number.',
    examples: [
        'isInteger(2)',
        'isInteger(3.5)',
        'isInteger([3, 0.5, -2])'
    ],
    seealso: [
        'isNegative',
        'isNumeric',
        'isPositive',
        'isZero'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isNaN.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isNaNDocs": (()=>isNaNDocs)
});
var isNaNDocs = {
    name: 'isNaN',
    category: 'Utils',
    syntax: [
        'isNaN(x)'
    ],
    description: 'Test whether a value is NaN (not a number)',
    examples: [
        'isNaN(2)',
        'isNaN(0 / 0)',
        'isNaN(NaN)',
        'isNaN(Infinity)'
    ],
    seealso: [
        'isNegative',
        'isNumeric',
        'isPositive',
        'isZero'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isNegative.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isNegativeDocs": (()=>isNegativeDocs)
});
var isNegativeDocs = {
    name: 'isNegative',
    category: 'Utils',
    syntax: [
        'isNegative(x)'
    ],
    description: 'Test whether a value is negative: smaller than zero.',
    examples: [
        'isNegative(2)',
        'isNegative(0)',
        'isNegative(-4)',
        'isNegative([3, 0.5, -2])'
    ],
    seealso: [
        'isInteger',
        'isNumeric',
        'isPositive',
        'isZero'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isNumeric.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isNumericDocs": (()=>isNumericDocs)
});
var isNumericDocs = {
    name: 'isNumeric',
    category: 'Utils',
    syntax: [
        'isNumeric(x)'
    ],
    description: 'Test whether a value is a numeric value. ' + 'Returns true when the input is a number, BigNumber, Fraction, or boolean.',
    examples: [
        'isNumeric(2)',
        'isNumeric("2")',
        'hasNumericValue("2")',
        'isNumeric(0)',
        'isNumeric(bignumber(500))',
        'isNumeric(fraction(0.125))',
        'isNumeric(2 + 3i)',
        'isNumeric([2.3, "foo", false])'
    ],
    seealso: [
        'isInteger',
        'isZero',
        'isNegative',
        'isPositive',
        'isNaN',
        'hasNumericValue'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isPositive.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isPositiveDocs": (()=>isPositiveDocs)
});
var isPositiveDocs = {
    name: 'isPositive',
    category: 'Utils',
    syntax: [
        'isPositive(x)'
    ],
    description: 'Test whether a value is positive: larger than zero.',
    examples: [
        'isPositive(2)',
        'isPositive(0)',
        'isPositive(-4)',
        'isPositive([3, 0.5, -2])'
    ],
    seealso: [
        'isInteger',
        'isNumeric',
        'isNegative',
        'isZero'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isPrime.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isPrimeDocs": (()=>isPrimeDocs)
});
var isPrimeDocs = {
    name: 'isPrime',
    category: 'Utils',
    syntax: [
        'isPrime(x)'
    ],
    description: 'Test whether a value is prime: has no divisors other than itself and one.',
    examples: [
        'isPrime(3)',
        'isPrime(-2)',
        'isPrime([2, 17, 100])'
    ],
    seealso: [
        'isInteger',
        'isNumeric',
        'isNegative',
        'isZero'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isZero.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isZeroDocs": (()=>isZeroDocs)
});
var isZeroDocs = {
    name: 'isZero',
    category: 'Utils',
    syntax: [
        'isZero(x)'
    ],
    description: 'Test whether a value is zero.',
    examples: [
        'isZero(2)',
        'isZero(0)',
        'isZero(-4)',
        'isZero([3, 0, -2, 0])'
    ],
    seealso: [
        'isInteger',
        'isNumeric',
        'isNegative',
        'isPositive'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/numeric.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "numericDocs": (()=>numericDocs)
});
var numericDocs = {
    name: 'numeric',
    category: 'Utils',
    syntax: [
        'numeric(x)'
    ],
    description: 'Convert a numeric input to a specific numeric type: number, BigNumber, bigint, or Fraction.',
    examples: [
        'numeric("4")',
        'numeric("4", "number")',
        'numeric("4", "bigint")',
        'numeric("4", "BigNumber")',
        'numeric("4", "Fraction")',
        'numeric(4, "Fraction")',
        'numeric(fraction(2, 5), "number")'
    ],
    seealso: [
        'number',
        'bigint',
        'fraction',
        'bignumber',
        'string',
        'format'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/oct.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "octDocs": (()=>octDocs)
});
var octDocs = {
    name: 'oct',
    category: 'Utils',
    syntax: [
        'oct(value)'
    ],
    description: 'Format a number as octal',
    examples: [
        'oct(56)'
    ],
    seealso: [
        'bin',
        'hex'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/print.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "printDocs": (()=>printDocs)
});
var printDocs = {
    name: 'print',
    category: 'Utils',
    syntax: [
        'print(template, values)',
        'print(template, values, precision)'
    ],
    description: 'Interpolate values into a string template.',
    examples: [
        'print("Lucy is $age years old", {age: 5})',
        'print("The value of pi is $pi", {pi: pi}, 3)',
        'print("Hello, $user.name!", {user: {name: "John"}})',
        'print("Values: $1, $2, $3", [6, 9, 4])'
    ],
    seealso: [
        'format'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/typeOf.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "typeOfDocs": (()=>typeOfDocs)
});
var typeOfDocs = {
    name: 'typeOf',
    category: 'Utils',
    syntax: [
        'typeOf(x)'
    ],
    description: 'Get the type of a variable.',
    examples: [
        'typeOf(3.5)',
        'typeOf(2 - 4i)',
        'typeOf(45 deg)',
        'typeOf("hello world")'
    ],
    seealso: [
        'getMatrixDataType'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/numeric/solveODE.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "solveODEDocs": (()=>solveODEDocs)
});
var solveODEDocs = {
    name: 'solveODE',
    category: 'Numeric',
    syntax: [
        'solveODE(func, tspan, y0)',
        'solveODE(func, tspan, y0, options)'
    ],
    description: 'Numerical Integration of Ordinary Differential Equations.',
    examples: [
        'f(t,y) = y',
        'tspan = [0, 4]',
        'solveODE(f, tspan, 1)',
        'solveODE(f, tspan, [1, 2])',
        'solveODE(f, tspan, 1, { method:"RK23", maxStep:0.1 })'
    ],
    seealso: [
        'derivative',
        'simplifyCore'
    ]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/embeddedDocs.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "embeddedDocs": (()=>embeddedDocs)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$e$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/e.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$false$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/false.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$i$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/i.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$Infinity$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/Infinity.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$LN10$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/LN10.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$LN2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/LN2.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$LOG10E$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/LOG10E.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$LOG2E$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/LOG2E.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$NaN$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/NaN.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$null$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/null.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$phi$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/phi.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$pi$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/pi.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$SQRT1_2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/SQRT1_2.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$SQRT2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/SQRT2.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$tau$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/tau.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$true$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/true.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$version$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/constants/version.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$construction$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/bignumber.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$construction$2f$bigint$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/bigint.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$construction$2f$boolean$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/boolean.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$construction$2f$complex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/complex.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$construction$2f$createUnit$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/createUnit.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$construction$2f$fraction$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/fraction.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$construction$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$construction$2f$matrix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/matrix.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$construction$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/number.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$construction$2f$sparse$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/sparse.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$construction$2f$splitUnit$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/splitUnit.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$construction$2f$string$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/string.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$construction$2f$unit$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/construction/unit.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$core$2f$config$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/core/config.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$core$2f$import$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/core/import.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$core$2f$typed$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/core/typed.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$derivative$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/derivative.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$leafCount$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/leafCount.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$lsolve$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/lsolve.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$lsolveAll$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/lsolveAll.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$lup$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/lup.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$lusolve$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/lusolve.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$polynomialRoot$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/polynomialRoot.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$qr$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/qr.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$rationalize$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/rationalize.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$resolve$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/resolve.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$simplify$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/simplify.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$simplifyConstant$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/simplifyConstant.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$simplifyCore$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/simplifyCore.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$slu$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/slu.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$symbolicEqual$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/symbolicEqual.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$usolve$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/usolve.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$usolveAll$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/usolveAll.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$abs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/abs.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$add$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/add.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$cbrt$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/cbrt.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$ceil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/ceil.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$cube$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/cube.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$divide$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/divide.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$dotDivide$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/dotDivide.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$dotMultiply$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/dotMultiply.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$dotPow$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/dotPow.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$exp$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/exp.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$expm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/expm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$expm1$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/expm1.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$fix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/fix.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$floor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/floor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$gcd$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/gcd.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$hypot$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/hypot.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$invmod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/invmod.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$lcm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/lcm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$log$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/log.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$log10$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/log10.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$log1p$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/log1p.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$log2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/log2.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$mod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/mod.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$multiply$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/multiply.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$norm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/norm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$nthRoot$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/nthRoot.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$nthRoots$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/nthRoots.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$pow$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/pow.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$round$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/round.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$sign$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/sign.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$sqrt$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/sqrt.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$sqrtm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/sqrtm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$sylvester$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/sylvester.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$schur$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/schur.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$lyap$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/algebra/lyap.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$square$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/square.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$subtract$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/subtract.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$unaryMinus$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/unaryMinus.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$unaryPlus$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/unaryPlus.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$xgcd$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/arithmetic/xgcd.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$bitwise$2f$bitAnd$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/bitAnd.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$bitwise$2f$bitNot$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/bitNot.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$bitwise$2f$bitOr$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/bitOr.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$bitwise$2f$bitXor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/bitXor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$bitwise$2f$leftShift$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/leftShift.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$bitwise$2f$rightArithShift$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/rightArithShift.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$bitwise$2f$rightLogShift$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/bitwise/rightLogShift.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$combinatorics$2f$bellNumbers$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/combinatorics/bellNumbers.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$combinatorics$2f$catalan$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/combinatorics/catalan.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$combinatorics$2f$composition$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/combinatorics/composition.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$combinatorics$2f$stirlingS2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/combinatorics/stirlingS2.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$complex$2f$arg$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/complex/arg.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$complex$2f$conj$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/complex/conj.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$complex$2f$im$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/complex/im.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$complex$2f$re$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/complex/re.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$expression$2f$evaluate$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/expression/evaluate.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$expression$2f$help$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/expression/help.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$geometry$2f$distance$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/geometry/distance.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$geometry$2f$intersect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/geometry/intersect.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$logical$2f$and$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/logical/and.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$logical$2f$not$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/logical/not.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$logical$2f$or$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/logical/or.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$logical$2f$xor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/logical/xor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$column$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/column.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$concat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/concat.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$count$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/count.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$cross$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/cross.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$ctranspose$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/ctranspose.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$det$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/det.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$diag$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/diag.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$diff$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/diff.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$dot$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/dot.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$eigs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/eigs.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$filter$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/filter.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$flatten$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/flatten.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$forEach$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/forEach.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$getMatrixDataType$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/getMatrixDataType.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$identity$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/identity.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$inv$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/inv.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$pinv$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/pinv.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$kron$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/kron.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/map.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$matrixFromColumns$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/matrixFromColumns.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$matrixFromFunction$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/matrixFromFunction.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$matrixFromRows$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/matrixFromRows.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$ones$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/ones.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$partitionSelect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/partitionSelect.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$range$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/range.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$reshape$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/reshape.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$resize$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/resize.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$rotate$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/rotate.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$rotationMatrix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/rotationMatrix.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$row$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/row.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$size$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/size.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$sort$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/sort.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$squeeze$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/squeeze.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$subset$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/subset.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$trace$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/trace.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$transpose$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/transpose.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$zeros$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/zeros.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$fft$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/fft.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$ifft$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/matrix/ifft.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$probability$2f$combinations$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/combinations.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$probability$2f$combinationsWithRep$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/combinationsWithRep.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$probability$2f$factorial$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/factorial.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$probability$2f$gamma$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/gamma.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$probability$2f$lgamma$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/lgamma.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$probability$2f$kldivergence$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/kldivergence.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$probability$2f$multinomial$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/multinomial.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$probability$2f$permutations$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/permutations.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$probability$2f$pickRandom$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/pickRandom.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$probability$2f$random$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/random.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$probability$2f$randomInt$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/probability/randomInt.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$relational$2f$compare$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/compare.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$relational$2f$compareNatural$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/compareNatural.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$relational$2f$compareText$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/compareText.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$relational$2f$deepEqual$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/deepEqual.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$relational$2f$equal$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/equal.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$relational$2f$equalText$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/equalText.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$relational$2f$larger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/larger.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$relational$2f$largerEq$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/largerEq.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$relational$2f$smaller$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/smaller.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$relational$2f$smallerEq$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/smallerEq.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$relational$2f$unequal$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/relational/unequal.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$set$2f$setCartesian$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setCartesian.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$set$2f$setDifference$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setDifference.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$set$2f$setDistinct$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setDistinct.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$set$2f$setIntersect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setIntersect.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$set$2f$setIsSubset$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setIsSubset.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$set$2f$setMultiplicity$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setMultiplicity.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$set$2f$setPowerset$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setPowerset.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$set$2f$setSize$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setSize.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$set$2f$setSymDifference$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setSymDifference.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$set$2f$setUnion$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/set/setUnion.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$signal$2f$zpk2tf$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/signal/zpk2tf.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$signal$2f$freqz$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/signal/freqz.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$special$2f$erf$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/special/erf.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$special$2f$zeta$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/special/zeta.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$statistics$2f$mad$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/mad.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$statistics$2f$max$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/max.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$statistics$2f$mean$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/mean.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$statistics$2f$median$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/median.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$statistics$2f$min$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/min.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$statistics$2f$mode$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/mode.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$statistics$2f$prod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/prod.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$statistics$2f$quantileSeq$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/quantileSeq.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$statistics$2f$std$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/std.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$statistics$2f$cumsum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/cumsum.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$statistics$2f$sum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/sum.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$statistics$2f$variance$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/variance.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$statistics$2f$corr$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/statistics/corr.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$acos$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acos.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$acosh$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acosh.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$acot$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acot.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$acoth$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acoth.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$acsc$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acsc.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$acsch$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/acsch.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$asec$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/asec.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$asech$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/asech.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$asin$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/asin.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$asinh$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/asinh.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$atan$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/atan.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$atan2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/atan2.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$atanh$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/atanh.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$cos$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/cos.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$cosh$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/cosh.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$cot$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/cot.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$coth$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/coth.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$csc$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/csc.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$csch$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/csch.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$sec$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/sec.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$sech$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/sech.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$sin$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/sin.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$sinh$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/sinh.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$tan$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/tan.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$tanh$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/trigonometry/tanh.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$units$2f$to$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/units/to.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$bin$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/bin.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$clone$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/clone.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$format$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/format.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$hasNumericValue$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/hasNumericValue.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/hex.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$isInteger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isInteger.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$isNaN$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isNaN.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$isNegative$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isNegative.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$isNumeric$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isNumeric.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$isPositive$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isPositive.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$isPrime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isPrime.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$isZero$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/isZero.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$numeric$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/numeric.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$oct$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/oct.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$print$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/print.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$typeOf$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/utils/typeOf.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$numeric$2f$solveODE$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/function/numeric/solveODE.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
var embeddedDocs = {
    // construction functions
    bignumber: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$construction$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["bignumberDocs"],
    bigint: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$construction$2f$bigint$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["bigintDocs"],
    boolean: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$construction$2f$boolean$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["booleanDocs"],
    complex: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$construction$2f$complex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["complexDocs"],
    createUnit: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$construction$2f$createUnit$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createUnitDocs"],
    fraction: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$construction$2f$fraction$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fractionDocs"],
    index: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$construction$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["indexDocs"],
    matrix: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$construction$2f$matrix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["matrixDocs"],
    number: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$construction$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["numberDocs"],
    sparse: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$construction$2f$sparse$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sparseDocs"],
    splitUnit: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$construction$2f$splitUnit$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["splitUnitDocs"],
    string: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$construction$2f$string$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["stringDocs"],
    unit: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$construction$2f$unit$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["unitDocs"],
    // constants
    e: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$e$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["eDocs"],
    E: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$e$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["eDocs"],
    false: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$false$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["falseDocs"],
    i: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$i$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["iDocs"],
    Infinity: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$Infinity$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InfinityDocs"],
    LN2: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$LN2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["LN2Docs"],
    LN10: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$LN10$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["LN10Docs"],
    LOG2E: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$LOG2E$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["LOG2EDocs"],
    LOG10E: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$LOG10E$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["LOG10EDocs"],
    NaN: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$NaN$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NaNDocs"],
    null: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$null$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["nullDocs"],
    pi: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$pi$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["piDocs"],
    PI: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$pi$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["piDocs"],
    phi: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$phi$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["phiDocs"],
    SQRT1_2: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$SQRT1_2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SQRT12Docs"],
    SQRT2: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$SQRT2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SQRT2Docs"],
    tau: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$tau$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tauDocs"],
    true: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$true$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trueDocs"],
    version: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$constants$2f$version$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["versionDocs"],
    // physical constants
    // TODO: more detailed docs for physical constants
    speedOfLight: {
        description: 'Speed of light in vacuum',
        examples: [
            'speedOfLight'
        ]
    },
    gravitationConstant: {
        description: 'Newtonian constant of gravitation',
        examples: [
            'gravitationConstant'
        ]
    },
    planckConstant: {
        description: 'Planck constant',
        examples: [
            'planckConstant'
        ]
    },
    reducedPlanckConstant: {
        description: 'Reduced Planck constant',
        examples: [
            'reducedPlanckConstant'
        ]
    },
    magneticConstant: {
        description: 'Magnetic constant (vacuum permeability)',
        examples: [
            'magneticConstant'
        ]
    },
    electricConstant: {
        description: 'Electric constant (vacuum permeability)',
        examples: [
            'electricConstant'
        ]
    },
    vacuumImpedance: {
        description: 'Characteristic impedance of vacuum',
        examples: [
            'vacuumImpedance'
        ]
    },
    coulomb: {
        description: 'Coulomb\'s constant',
        examples: [
            'coulomb'
        ]
    },
    elementaryCharge: {
        description: 'Elementary charge',
        examples: [
            'elementaryCharge'
        ]
    },
    bohrMagneton: {
        description: 'Bohr magneton',
        examples: [
            'bohrMagneton'
        ]
    },
    conductanceQuantum: {
        description: 'Conductance quantum',
        examples: [
            'conductanceQuantum'
        ]
    },
    inverseConductanceQuantum: {
        description: 'Inverse conductance quantum',
        examples: [
            'inverseConductanceQuantum'
        ]
    },
    // josephson: {description: 'Josephson constant', examples: ['josephson']},
    magneticFluxQuantum: {
        description: 'Magnetic flux quantum',
        examples: [
            'magneticFluxQuantum'
        ]
    },
    nuclearMagneton: {
        description: 'Nuclear magneton',
        examples: [
            'nuclearMagneton'
        ]
    },
    klitzing: {
        description: 'Von Klitzing constant',
        examples: [
            'klitzing'
        ]
    },
    bohrRadius: {
        description: 'Bohr radius',
        examples: [
            'bohrRadius'
        ]
    },
    classicalElectronRadius: {
        description: 'Classical electron radius',
        examples: [
            'classicalElectronRadius'
        ]
    },
    electronMass: {
        description: 'Electron mass',
        examples: [
            'electronMass'
        ]
    },
    fermiCoupling: {
        description: 'Fermi coupling constant',
        examples: [
            'fermiCoupling'
        ]
    },
    fineStructure: {
        description: 'Fine-structure constant',
        examples: [
            'fineStructure'
        ]
    },
    hartreeEnergy: {
        description: 'Hartree energy',
        examples: [
            'hartreeEnergy'
        ]
    },
    protonMass: {
        description: 'Proton mass',
        examples: [
            'protonMass'
        ]
    },
    deuteronMass: {
        description: 'Deuteron Mass',
        examples: [
            'deuteronMass'
        ]
    },
    neutronMass: {
        description: 'Neutron mass',
        examples: [
            'neutronMass'
        ]
    },
    quantumOfCirculation: {
        description: 'Quantum of circulation',
        examples: [
            'quantumOfCirculation'
        ]
    },
    rydberg: {
        description: 'Rydberg constant',
        examples: [
            'rydberg'
        ]
    },
    thomsonCrossSection: {
        description: 'Thomson cross section',
        examples: [
            'thomsonCrossSection'
        ]
    },
    weakMixingAngle: {
        description: 'Weak mixing angle',
        examples: [
            'weakMixingAngle'
        ]
    },
    efimovFactor: {
        description: 'Efimov factor',
        examples: [
            'efimovFactor'
        ]
    },
    atomicMass: {
        description: 'Atomic mass constant',
        examples: [
            'atomicMass'
        ]
    },
    avogadro: {
        description: 'Avogadro\'s number',
        examples: [
            'avogadro'
        ]
    },
    boltzmann: {
        description: 'Boltzmann constant',
        examples: [
            'boltzmann'
        ]
    },
    faraday: {
        description: 'Faraday constant',
        examples: [
            'faraday'
        ]
    },
    firstRadiation: {
        description: 'First radiation constant',
        examples: [
            'firstRadiation'
        ]
    },
    loschmidt: {
        description: 'Loschmidt constant at T=273.15 K and p=101.325 kPa',
        examples: [
            'loschmidt'
        ]
    },
    gasConstant: {
        description: 'Gas constant',
        examples: [
            'gasConstant'
        ]
    },
    molarPlanckConstant: {
        description: 'Molar Planck constant',
        examples: [
            'molarPlanckConstant'
        ]
    },
    molarVolume: {
        description: 'Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa',
        examples: [
            'molarVolume'
        ]
    },
    sackurTetrode: {
        description: 'Sackur-Tetrode constant at T=1 K and p=101.325 kPa',
        examples: [
            'sackurTetrode'
        ]
    },
    secondRadiation: {
        description: 'Second radiation constant',
        examples: [
            'secondRadiation'
        ]
    },
    stefanBoltzmann: {
        description: 'Stefan-Boltzmann constant',
        examples: [
            'stefanBoltzmann'
        ]
    },
    wienDisplacement: {
        description: 'Wien displacement law constant',
        examples: [
            'wienDisplacement'
        ]
    },
    // spectralRadiance: {description: 'First radiation constant for spectral radiance', examples: ['spectralRadiance']},
    molarMass: {
        description: 'Molar mass constant',
        examples: [
            'molarMass'
        ]
    },
    molarMassC12: {
        description: 'Molar mass constant of carbon-12',
        examples: [
            'molarMassC12'
        ]
    },
    gravity: {
        description: 'Standard acceleration of gravity (standard acceleration of free-fall on Earth)',
        examples: [
            'gravity'
        ]
    },
    planckLength: {
        description: 'Planck length',
        examples: [
            'planckLength'
        ]
    },
    planckMass: {
        description: 'Planck mass',
        examples: [
            'planckMass'
        ]
    },
    planckTime: {
        description: 'Planck time',
        examples: [
            'planckTime'
        ]
    },
    planckCharge: {
        description: 'Planck charge',
        examples: [
            'planckCharge'
        ]
    },
    planckTemperature: {
        description: 'Planck temperature',
        examples: [
            'planckTemperature'
        ]
    },
    // functions - algebra
    derivative: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$derivative$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["derivativeDocs"],
    lsolve: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$lsolve$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lsolveDocs"],
    lsolveAll: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$lsolveAll$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lsolveAllDocs"],
    lup: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$lup$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lupDocs"],
    lusolve: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$lusolve$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lusolveDocs"],
    leafCount: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$leafCount$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["leafCountDocs"],
    polynomialRoot: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$polynomialRoot$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["polynomialRootDocs"],
    resolve: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$resolve$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["resolveDocs"],
    simplify: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$simplify$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["simplifyDocs"],
    simplifyConstant: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$simplifyConstant$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["simplifyConstantDocs"],
    simplifyCore: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$simplifyCore$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["simplifyCoreDocs"],
    symbolicEqual: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$symbolicEqual$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["symbolicEqualDocs"],
    rationalize: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$rationalize$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rationalizeDocs"],
    slu: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$slu$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sluDocs"],
    usolve: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$usolve$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["usolveDocs"],
    usolveAll: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$usolveAll$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["usolveAllDocs"],
    qr: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$qr$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["qrDocs"],
    // functions - arithmetic
    abs: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$abs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["absDocs"],
    add: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$add$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addDocs"],
    cbrt: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$cbrt$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cbrtDocs"],
    ceil: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$ceil$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ceilDocs"],
    cube: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$cube$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cubeDocs"],
    divide: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$divide$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["divideDocs"],
    dotDivide: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$dotDivide$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dotDivideDocs"],
    dotMultiply: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$dotMultiply$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dotMultiplyDocs"],
    dotPow: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$dotPow$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dotPowDocs"],
    exp: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$exp$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["expDocs"],
    expm: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$expm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["expmDocs"],
    expm1: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$expm1$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["expm1Docs"],
    fix: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$fix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fixDocs"],
    floor: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$floor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["floorDocs"],
    gcd: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$gcd$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gcdDocs"],
    hypot: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$hypot$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hypotDocs"],
    lcm: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$lcm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lcmDocs"],
    log: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$log$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["logDocs"],
    log2: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$log2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["log2Docs"],
    log1p: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$log1p$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["log1pDocs"],
    log10: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$log10$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["log10Docs"],
    mod: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$mod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["modDocs"],
    multiply: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$multiply$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["multiplyDocs"],
    norm: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$norm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["normDocs"],
    nthRoot: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$nthRoot$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["nthRootDocs"],
    nthRoots: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$nthRoots$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["nthRootsDocs"],
    pow: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$pow$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["powDocs"],
    round: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$round$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["roundDocs"],
    sign: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$sign$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["signDocs"],
    sqrt: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$sqrt$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sqrtDocs"],
    sqrtm: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$sqrtm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sqrtmDocs"],
    square: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$square$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["squareDocs"],
    subtract: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$subtract$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["subtractDocs"],
    unaryMinus: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$unaryMinus$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["unaryMinusDocs"],
    unaryPlus: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$unaryPlus$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["unaryPlusDocs"],
    xgcd: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$xgcd$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["xgcdDocs"],
    invmod: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$arithmetic$2f$invmod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["invmodDocs"],
    // functions - bitwise
    bitAnd: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$bitwise$2f$bitAnd$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["bitAndDocs"],
    bitNot: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$bitwise$2f$bitNot$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["bitNotDocs"],
    bitOr: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$bitwise$2f$bitOr$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["bitOrDocs"],
    bitXor: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$bitwise$2f$bitXor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["bitXorDocs"],
    leftShift: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$bitwise$2f$leftShift$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["leftShiftDocs"],
    rightArithShift: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$bitwise$2f$rightArithShift$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rightArithShiftDocs"],
    rightLogShift: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$bitwise$2f$rightLogShift$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rightLogShiftDocs"],
    // functions - combinatorics
    bellNumbers: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$combinatorics$2f$bellNumbers$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["bellNumbersDocs"],
    catalan: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$combinatorics$2f$catalan$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["catalanDocs"],
    composition: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$combinatorics$2f$composition$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["compositionDocs"],
    stirlingS2: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$combinatorics$2f$stirlingS2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["stirlingS2Docs"],
    // functions - core
    config: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$core$2f$config$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["configDocs"],
    import: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$core$2f$import$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["importDocs"],
    typed: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$core$2f$typed$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["typedDocs"],
    // functions - complex
    arg: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$complex$2f$arg$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["argDocs"],
    conj: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$complex$2f$conj$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["conjDocs"],
    re: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$complex$2f$re$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["reDocs"],
    im: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$complex$2f$im$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["imDocs"],
    // functions - expression
    evaluate: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$expression$2f$evaluate$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["evaluateDocs"],
    help: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$expression$2f$help$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["helpDocs"],
    // functions - geometry
    distance: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$geometry$2f$distance$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["distanceDocs"],
    intersect: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$geometry$2f$intersect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["intersectDocs"],
    // functions - logical
    and: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$logical$2f$and$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["andDocs"],
    not: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$logical$2f$not$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["notDocs"],
    or: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$logical$2f$or$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["orDocs"],
    xor: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$logical$2f$xor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["xorDocs"],
    // functions - matrix
    concat: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$concat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concatDocs"],
    count: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$count$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["countDocs"],
    cross: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$cross$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["crossDocs"],
    column: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$column$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["columnDocs"],
    ctranspose: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$ctranspose$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ctransposeDocs"],
    det: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$det$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["detDocs"],
    diag: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$diag$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["diagDocs"],
    diff: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$diff$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["diffDocs"],
    dot: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$dot$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dotDocs"],
    getMatrixDataType: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$getMatrixDataType$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getMatrixDataTypeDocs"],
    identity: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$identity$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["identityDocs"],
    filter: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$filter$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["filterDocs"],
    flatten: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$flatten$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["flattenDocs"],
    forEach: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$forEach$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forEachDocs"],
    inv: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$inv$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["invDocs"],
    pinv: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$pinv$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["pinvDocs"],
    eigs: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$eigs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["eigsDocs"],
    kron: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$kron$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["kronDocs"],
    matrixFromFunction: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$matrixFromFunction$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["matrixFromFunctionDocs"],
    matrixFromRows: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$matrixFromRows$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["matrixFromRowsDocs"],
    matrixFromColumns: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$matrixFromColumns$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["matrixFromColumnsDocs"],
    map: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["mapDocs"],
    ones: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$ones$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["onesDocs"],
    partitionSelect: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$partitionSelect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["partitionSelectDocs"],
    range: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$range$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rangeDocs"],
    resize: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$resize$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["resizeDocs"],
    reshape: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$reshape$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["reshapeDocs"],
    rotate: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$rotate$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotateDocs"],
    rotationMatrix: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$rotationMatrix$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rotationMatrixDocs"],
    row: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$row$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rowDocs"],
    size: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$size$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sizeDocs"],
    sort: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$sort$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sortDocs"],
    squeeze: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$squeeze$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["squeezeDocs"],
    subset: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$subset$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["subsetDocs"],
    trace: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$trace$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["traceDocs"],
    transpose: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$transpose$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["transposeDocs"],
    zeros: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$zeros$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["zerosDocs"],
    fft: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$fft$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fftDocs"],
    ifft: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$matrix$2f$ifft$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ifftDocs"],
    sylvester: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$sylvester$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sylvesterDocs"],
    schur: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$schur$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["schurDocs"],
    lyap: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$algebra$2f$lyap$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lyapDocs"],
    // functions - numeric
    solveODE: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$numeric$2f$solveODE$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["solveODEDocs"],
    // functions - probability
    combinations: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$probability$2f$combinations$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["combinationsDocs"],
    combinationsWithRep: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$probability$2f$combinationsWithRep$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["combinationsWithRepDocs"],
    // distribution: distributionDocs,
    factorial: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$probability$2f$factorial$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factorialDocs"],
    gamma: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$probability$2f$gamma$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gammaDocs"],
    kldivergence: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$probability$2f$kldivergence$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["kldivergenceDocs"],
    lgamma: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$probability$2f$lgamma$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lgammaDocs"],
    multinomial: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$probability$2f$multinomial$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["multinomialDocs"],
    permutations: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$probability$2f$permutations$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["permutationsDocs"],
    pickRandom: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$probability$2f$pickRandom$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["pickRandomDocs"],
    random: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$probability$2f$random$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["randomDocs"],
    randomInt: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$probability$2f$randomInt$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["randomIntDocs"],
    // functions - relational
    compare: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$relational$2f$compare$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["compareDocs"],
    compareNatural: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$relational$2f$compareNatural$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["compareNaturalDocs"],
    compareText: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$relational$2f$compareText$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["compareTextDocs"],
    deepEqual: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$relational$2f$deepEqual$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["deepEqualDocs"],
    equal: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$relational$2f$equal$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["equalDocs"],
    equalText: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$relational$2f$equalText$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["equalTextDocs"],
    larger: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$relational$2f$larger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["largerDocs"],
    largerEq: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$relational$2f$largerEq$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["largerEqDocs"],
    smaller: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$relational$2f$smaller$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["smallerDocs"],
    smallerEq: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$relational$2f$smallerEq$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["smallerEqDocs"],
    unequal: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$relational$2f$unequal$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["unequalDocs"],
    // functions - set
    setCartesian: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$set$2f$setCartesian$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setCartesianDocs"],
    setDifference: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$set$2f$setDifference$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setDifferenceDocs"],
    setDistinct: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$set$2f$setDistinct$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setDistinctDocs"],
    setIntersect: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$set$2f$setIntersect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setIntersectDocs"],
    setIsSubset: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$set$2f$setIsSubset$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setIsSubsetDocs"],
    setMultiplicity: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$set$2f$setMultiplicity$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setMultiplicityDocs"],
    setPowerset: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$set$2f$setPowerset$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setPowersetDocs"],
    setSize: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$set$2f$setSize$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setSizeDocs"],
    setSymDifference: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$set$2f$setSymDifference$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setSymDifferenceDocs"],
    setUnion: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$set$2f$setUnion$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setUnionDocs"],
    // functions - signal
    zpk2tf: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$signal$2f$zpk2tf$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["zpk2tfDocs"],
    freqz: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$signal$2f$freqz$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["freqzDocs"],
    // functions - special
    erf: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$special$2f$erf$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["erfDocs"],
    zeta: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$special$2f$zeta$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["zetaDocs"],
    // functions - statistics
    cumsum: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$statistics$2f$cumsum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cumSumDocs"],
    mad: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$statistics$2f$mad$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["madDocs"],
    max: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$statistics$2f$max$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["maxDocs"],
    mean: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$statistics$2f$mean$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["meanDocs"],
    median: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$statistics$2f$median$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["medianDocs"],
    min: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$statistics$2f$min$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["minDocs"],
    mode: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$statistics$2f$mode$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["modeDocs"],
    prod: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$statistics$2f$prod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prodDocs"],
    quantileSeq: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$statistics$2f$quantileSeq$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["quantileSeqDocs"],
    std: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$statistics$2f$std$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["stdDocs"],
    sum: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$statistics$2f$sum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sumDocs"],
    variance: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$statistics$2f$variance$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["varianceDocs"],
    corr: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$statistics$2f$corr$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["corrDocs"],
    // functions - trigonometry
    acos: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$acos$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["acosDocs"],
    acosh: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$acosh$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["acoshDocs"],
    acot: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$acot$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["acotDocs"],
    acoth: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$acoth$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["acothDocs"],
    acsc: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$acsc$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["acscDocs"],
    acsch: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$acsch$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["acschDocs"],
    asec: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$asec$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["asecDocs"],
    asech: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$asech$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["asechDocs"],
    asin: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$asin$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["asinDocs"],
    asinh: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$asinh$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["asinhDocs"],
    atan: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$atan$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["atanDocs"],
    atanh: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$atanh$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["atanhDocs"],
    atan2: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$atan2$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["atan2Docs"],
    cos: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$cos$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cosDocs"],
    cosh: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$cosh$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["coshDocs"],
    cot: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$cot$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cotDocs"],
    coth: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$coth$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cothDocs"],
    csc: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$csc$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cscDocs"],
    csch: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$csch$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cschDocs"],
    sec: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$sec$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["secDocs"],
    sech: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$sech$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sechDocs"],
    sin: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$sin$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sinDocs"],
    sinh: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$sinh$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sinhDocs"],
    tan: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$tan$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tanDocs"],
    tanh: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$trigonometry$2f$tanh$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tanhDocs"],
    // functions - units
    to: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$units$2f$to$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toDocs"],
    // functions - utils
    clone: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$clone$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cloneDocs"],
    format: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$format$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["formatDocs"],
    bin: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$bin$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["binDocs"],
    oct: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$oct$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["octDocs"],
    hex: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hexDocs"],
    isNaN: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$isNaN$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNaNDocs"],
    isInteger: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$isInteger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isIntegerDocs"],
    isNegative: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$isNegative$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNegativeDocs"],
    isNumeric: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$isNumeric$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNumericDocs"],
    hasNumericValue: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$hasNumericValue$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasNumericValueDocs"],
    isPositive: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$isPositive$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isPositiveDocs"],
    isPrime: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$isPrime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isPrimeDocs"],
    isZero: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$isZero$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isZeroDocs"],
    print: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$print$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["printDocs"],
    typeOf: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$typeOf$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["typeOfDocs"],
    numeric: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$function$2f$utils$2f$numeric$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["numericDocs"]
};
}}),
"[project]/node_modules/mathjs/lib/esm/expression/function/help.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createHelp": (()=>createHelp)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$customs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/customs.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$embeddedDocs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/embeddedDocs/embeddedDocs.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/object.js [app-client] (ecmascript)");
;
;
;
;
var name = 'help';
var dependencies = [
    'typed',
    'mathWithTransform',
    'Help'
];
var createHelp = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, mathWithTransform, Help } = _ref;
    /**
   * Retrieve help on a function or data type.
   * Help files are retrieved from the embedded documentation in math.docs.
   *
   * Syntax:
   *
   *    math.help(search)
   *
   * Examples:
   *
   *    console.log(math.help('sin').toString())
   *    console.log(math.help(math.add).toString())
   *    console.log(math.help(math.add).toJSON())
   *
   * @param {Function | string | Object} search   A function or function name
   *                                              for which to get help
   * @return {Help} A help object
   */ return typed(name, {
        any: function any(search) {
            var prop;
            var searchName = search;
            if (typeof search !== 'string') {
                for(prop in mathWithTransform){
                    // search in functions and constants
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasOwnProperty"])(mathWithTransform, prop) && search === mathWithTransform[prop]) {
                        searchName = prop;
                        break;
                    }
                }
            /* TODO: implement help for data types
         if (!text) {
         // search data type
         for (prop in math.type) {
         if (hasOwnProperty(math, prop)) {
         if (search === math.type[prop]) {
         text = prop
         break
         }
         }
         }
         }
         */ }
            var doc = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$customs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getSafeProperty"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$embeddedDocs$2f$embeddedDocs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["embeddedDocs"], searchName);
            if (!doc) {
                var searchText = typeof searchName === 'function' ? searchName.name : searchName;
                throw new Error('No documentation found on "' + searchText + '"');
            }
            return new Help(doc);
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/transform/apply.transform.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createApplyTransform": (()=>createApplyTransform)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$errorTransform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$matrix$2f$apply$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/matrix/apply.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
;
;
;
;
var name = 'apply';
var dependencies = [
    'typed',
    'isInteger'
];
var createApplyTransform = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, isInteger } = _ref;
    var apply = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$matrix$2f$apply$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createApply"])({
        typed,
        isInteger
    });
    // @see: comment of concat itself
    return typed('apply', {
        '...any': function any(args) {
            // change dim from one-based to zero-based
            var dim = args[1];
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNumber"])(dim)) {
                args[1] = dim - 1;
            } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isBigNumber"])(dim)) {
                args[1] = dim.minus(1);
            }
            try {
                return apply.apply(null, args);
            } catch (err) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$errorTransform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["errorTransform"])(err);
            }
        }
    });
}, {
    isTransformFunction: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/transform/column.transform.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createColumnTransform": (()=>createColumnTransform)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$errorTransform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$matrix$2f$column$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/matrix/column.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
;
;
;
;
var name = 'column';
var dependencies = [
    'typed',
    'Index',
    'matrix',
    'range'
];
var createColumnTransform = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, Index, matrix, range } = _ref;
    var column = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$matrix$2f$column$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColumn"])({
        typed,
        Index,
        matrix,
        range
    });
    // @see: comment of column itself
    return typed('column', {
        '...any': function any(args) {
            // change last argument from zero-based to one-based
            var lastIndex = args.length - 1;
            var last = args[lastIndex];
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNumber"])(last)) {
                args[lastIndex] = last - 1;
            }
            try {
                return column.apply(null, args);
            } catch (err) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$errorTransform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["errorTransform"])(err);
            }
        }
    });
}, {
    isTransformFunction: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/transform/utils/compileInlineExpression.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "compileInlineExpression": (()=>compileInlineExpression)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/map.js [app-client] (ecmascript)");
;
;
function compileInlineExpression(expression, math, scope) {
    // find an undefined symbol
    var symbol = expression.filter(function(node) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSymbolNode"])(node) && !(node.name in math) && !scope.has(node.name);
    })[0];
    if (!symbol) {
        throw new Error('No undefined variable found in inline expression "' + expression + '"');
    }
    // create a test function for this equation
    var name = symbol.name; // variable name
    var argsScope = new Map();
    var subScope = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PartitionedMap"](scope, argsScope, new Set([
        name
    ]));
    var eq = expression.compile();
    return function inlineExpression(x) {
        argsScope.set(name, x);
        return eq.evaluate(subScope);
    };
}
}}),
"[project]/node_modules/mathjs/lib/esm/expression/transform/utils/transformCallback.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createTransformCallback": (()=>createTransformCallback)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
;
var name = 'transformCallback';
var dependencies = [
    'typed'
];
var createTransformCallback = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed } = _ref;
    /**
         * Transforms the given callback function based on its type and number of arrays.
         *
         * @param {Function} callback - The callback function to transform.
         * @param {number} numberOfArrays - The number of arrays to pass to the callback function.
         * @returns {*} - The transformed callback function.
         */ return function(callback, numberOfArrays) {
        if (typed.isTypedFunction(callback)) {
            return _transformTypedCallbackFunction(callback, numberOfArrays);
        } else {
            return _transformCallbackFunction(callback, callback.length, numberOfArrays);
        }
    };
    "TURBOPACK unreachable";
    /**
       * Transforms the given typed callback function based on the number of arrays.
       *
       * @param {Function} typedFunction - The typed callback function to transform.
       * @param {number} numberOfArrays - The number of arrays to pass to the callback function.
       * @returns {*} - The transformed callback function.
       */ function _transformTypedCallbackFunction(typedFunction, numberOfArrays) {
        var signatures = Object.fromEntries(Object.entries(typedFunction.signatures).map((_ref2)=>{
            var [signature, callbackFunction] = _ref2;
            var numberOfCallbackInputs = signature.split(',').length;
            if (typed.isTypedFunction(callbackFunction)) {
                return [
                    signature,
                    _transformTypedCallbackFunction(callbackFunction, numberOfArrays)
                ];
            } else {
                return [
                    signature,
                    _transformCallbackFunction(callbackFunction, numberOfCallbackInputs, numberOfArrays)
                ];
            }
        }));
        if (typeof typedFunction.name === 'string') {
            return typed(typedFunction.name, signatures);
        } else {
            return typed(signatures);
        }
    }
});
/**
     * Transforms the callback function based on the number of callback inputs and arrays.
     * There are three cases:
     * 1. The callback function has N arguments.
     * 2. The callback function has N+1 arguments.
     * 3. The callback function has 2N+1 arguments.
     *
     * @param {Function} callbackFunction - The callback function to transform.
     * @param {number} numberOfCallbackInputs - The number of callback inputs.
     * @param {number} numberOfArrays - The number of arrays.
     * @returns {Function} The transformed callback function.
     */ function _transformCallbackFunction(callbackFunction, numberOfCallbackInputs, numberOfArrays) {
    if (numberOfCallbackInputs === numberOfArrays) {
        return callbackFunction;
    } else if (numberOfCallbackInputs === numberOfArrays + 1) {
        return function() {
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                args[_key] = arguments[_key];
            }
            var vals = args.slice(0, numberOfArrays);
            var idx = _transformDims(args[numberOfArrays]);
            return callbackFunction(...vals, idx);
        };
    } else if (numberOfCallbackInputs > numberOfArrays + 1) {
        return function() {
            for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){
                args[_key2] = arguments[_key2];
            }
            var vals = args.slice(0, numberOfArrays);
            var idx = _transformDims(args[numberOfArrays]);
            var rest = args.slice(numberOfArrays + 1);
            return callbackFunction(...vals, idx, ...rest);
        };
    } else {
        return callbackFunction;
    }
}
/**
   * Transforms the dimensions by adding 1 to each dimension.
   *
   * @param {Array} dims - The dimensions to transform.
   * @returns {Array} The transformed dimensions.
   */ function _transformDims(dims) {
    return dims.map((dim)=>dim + 1);
}
}}),
"[project]/node_modules/mathjs/lib/esm/expression/transform/filter.transform.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createFilterTransform": (()=>createFilterTransform)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$matrix$2f$filter$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/matrix/filter.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$compileInlineExpression$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/transform/utils/compileInlineExpression.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$transformCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/transform/utils/transformCallback.js [app-client] (ecmascript)");
;
;
;
;
;
var name = 'filter';
var dependencies = [
    'typed'
];
var createFilterTransform = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed } = _ref;
    /**
   * Attach a transform function to math.filter
   * Adds a property transform containing the transform function.
   *
   * This transform adds support for equations as test function for math.filter,
   * so you can do something like 'filter([3, -2, 5], x > 0)'.
   */ function filterTransform(args, math, scope) {
        var filter = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$matrix$2f$filter$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createFilter"])({
            typed
        });
        var transformCallback = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$transformCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createTransformCallback"])({
            typed
        });
        if (args.length === 0) {
            return filter();
        }
        var x = args[0];
        if (args.length === 1) {
            return filter(x);
        }
        var N = args.length - 1;
        var callback = args[N];
        if (x) {
            x = _compileAndEvaluate(x, scope);
        }
        if (callback) {
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSymbolNode"])(callback) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFunctionAssignmentNode"])(callback)) {
                // a function pointer, like filter([3, -2, 5], myTestFunction)
                callback = _compileAndEvaluate(callback, scope);
            } else {
                // an expression like filter([3, -2, 5], x > 0)
                callback = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$compileInlineExpression$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["compileInlineExpression"])(callback, math, scope);
            }
        }
        return filter(x, transformCallback(callback, N));
    }
    filterTransform.rawArgs = true;
    function _compileAndEvaluate(arg, scope) {
        return arg.compile().evaluate(scope);
    }
    return filterTransform;
}, {
    isTransformFunction: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/transform/forEach.transform.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createForEachTransform": (()=>createForEachTransform)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$matrix$2f$forEach$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/matrix/forEach.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$transformCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/transform/utils/transformCallback.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$compileInlineExpression$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/transform/utils/compileInlineExpression.js [app-client] (ecmascript)");
;
;
;
;
;
var name = 'forEach';
var dependencies = [
    'typed'
];
var createForEachTransform = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed } = _ref;
    /**
   * Attach a transform function to math.forEach
   * Adds a property transform containing the transform function.
   *
   * This transform creates a one-based index instead of a zero-based index
   */ var forEach = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$matrix$2f$forEach$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createForEach"])({
        typed
    });
    var transformCallback = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$transformCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createTransformCallback"])({
        typed
    });
    function forEachTransform(args, math, scope) {
        if (args.length === 0) {
            return forEach();
        }
        var x = args[0];
        if (args.length === 1) {
            return forEach(x);
        }
        var N = args.length - 1;
        var callback = args[N];
        if (x) {
            x = _compileAndEvaluate(x, scope);
        }
        if (callback) {
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSymbolNode"])(callback) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFunctionAssignmentNode"])(callback)) {
                // a function pointer, like filter([3, -2, 5], myTestFunction)
                callback = _compileAndEvaluate(callback, scope);
            } else {
                // an expression like filter([3, -2, 5], x > 0)
                callback = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$compileInlineExpression$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["compileInlineExpression"])(callback, math, scope);
            }
        }
        return forEach(x, transformCallback(callback, N));
    }
    forEachTransform.rawArgs = true;
    function _compileAndEvaluate(arg, scope) {
        return arg.compile().evaluate(scope);
    }
    return forEachTransform;
}, {
    isTransformFunction: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/transform/index.transform.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createIndexTransform": (()=>createIndexTransform)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
;
;
var name = 'index';
var dependencies = [
    'Index',
    'getMatrixDataType'
];
var createIndexTransform = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { Index, getMatrixDataType } = _ref;
    /**
   * Attach a transform function to math.index
   * Adds a property transform containing the transform function.
   *
   * This transform creates a one-based index instead of a zero-based index
   */ return function indexTransform() {
        var args = [];
        for(var i = 0, ii = arguments.length; i < ii; i++){
            var arg = arguments[i];
            // change from one-based to zero based, convert BigNumber to number and leave Array of Booleans as is
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isRange"])(arg)) {
                arg.start--;
                arg.end -= arg.step > 0 ? 0 : 2;
            } else if (arg && arg.isSet === true) {
                arg = arg.map(function(v) {
                    return v - 1;
                });
            } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isArray"])(arg) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isMatrix"])(arg)) {
                if (getMatrixDataType(arg) !== 'boolean') {
                    arg = arg.map(function(v) {
                        return v - 1;
                    });
                }
            } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNumber"])(arg)) {
                arg--;
            } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isBigNumber"])(arg)) {
                arg = arg.toNumber() - 1;
            } else if (typeof arg === 'string') {
            // leave as is
            } else {
                throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
            }
            args[i] = arg;
        }
        var res = new Index();
        Index.apply(res, args);
        return res;
    };
}, {
    isTransformFunction: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/transform/map.transform.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createMapTransform": (()=>createMapTransform)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$matrix$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/matrix/map.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$compileInlineExpression$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/transform/utils/compileInlineExpression.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$transformCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/transform/utils/transformCallback.js [app-client] (ecmascript)");
;
;
;
;
;
var name = 'map';
var dependencies = [
    'typed'
];
var createMapTransform = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed } = _ref;
    /**
   * Attach a transform function to math.map
   * Adds a property transform containing the transform function.
   *
   * This transform creates a one-based index instead of a zero-based index
   */ var map = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$matrix$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMap"])({
        typed
    });
    var transformCallback = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$transformCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createTransformCallback"])({
        typed
    });
    function mapTransform(args, math, scope) {
        if (args.length === 0) {
            return map();
        }
        if (args.length === 1) {
            return map(args[0]);
        }
        var N = args.length - 1;
        var X = args.slice(0, N);
        var callback = args[N];
        X = X.map((arg)=>_compileAndEvaluate(arg, scope));
        if (callback) {
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSymbolNode"])(callback) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFunctionAssignmentNode"])(callback)) {
                // a function pointer, like filter([3, -2, 5], myTestFunction)
                callback = _compileAndEvaluate(callback, scope);
            } else {
                // an expression like filter([3, -2, 5], x > 0)
                callback = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$compileInlineExpression$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["compileInlineExpression"])(callback, math, scope);
            }
        }
        return map(...X, transformCallback(callback, N));
        "TURBOPACK unreachable";
        function _compileAndEvaluate(arg, scope) {
            return arg.compile().evaluate(scope);
        }
    }
    mapTransform.rawArgs = true;
    return mapTransform;
}, {
    isTransformFunction: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/transform/utils/dimToZeroBase.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "dimToZeroBase": (()=>dimToZeroBase),
    "isNumberOrBigNumber": (()=>isNumberOrBigNumber)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
;
function dimToZeroBase(dim) {
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNumber"])(dim)) {
        return dim - 1;
    } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isBigNumber"])(dim)) {
        return dim.minus(1);
    } else {
        return dim;
    }
}
function isNumberOrBigNumber(n) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNumber"])(n) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isBigNumber"])(n);
}
}}),
"[project]/node_modules/mathjs/lib/esm/expression/transform/utils/lastDimToZeroBase.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "lastDimToZeroBase": (()=>lastDimToZeroBase)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$dimToZeroBase$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/transform/utils/dimToZeroBase.js [app-client] (ecmascript)");
;
;
function lastDimToZeroBase(args) {
    if (args.length === 2 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isCollection"])(args[0])) {
        args = args.slice();
        var dim = args[1];
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$dimToZeroBase$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNumberOrBigNumber"])(dim)) {
            args[1] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$dimToZeroBase$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dimToZeroBase"])(dim);
        }
    }
    return args;
}
}}),
"[project]/node_modules/mathjs/lib/esm/expression/transform/max.transform.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createMaxTransform": (()=>createMaxTransform)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$errorTransform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$max$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/statistics/max.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$lastDimToZeroBase$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/transform/utils/lastDimToZeroBase.js [app-client] (ecmascript)");
;
;
;
;
var name = 'max';
var dependencies = [
    'typed',
    'config',
    'numeric',
    'larger'
];
var createMaxTransform = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config, numeric, larger } = _ref;
    var max = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$max$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMax"])({
        typed,
        config,
        numeric,
        larger
    });
    /**
   * Attach a transform function to math.max
   * Adds a property transform containing the transform function.
   *
   * This transform changed the last `dim` parameter of function max
   * from one-based to zero based
   */ return typed('max', {
        '...any': function any(args) {
            args = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$lastDimToZeroBase$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lastDimToZeroBase"])(args);
            try {
                return max.apply(null, args);
            } catch (err) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$errorTransform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["errorTransform"])(err);
            }
        }
    });
}, {
    isTransformFunction: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/transform/mean.transform.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createMeanTransform": (()=>createMeanTransform)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$errorTransform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$mean$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/statistics/mean.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$lastDimToZeroBase$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/transform/utils/lastDimToZeroBase.js [app-client] (ecmascript)");
;
;
;
;
var name = 'mean';
var dependencies = [
    'typed',
    'add',
    'divide'
];
var createMeanTransform = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, add, divide } = _ref;
    var mean = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$mean$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMean"])({
        typed,
        add,
        divide
    });
    /**
   * Attach a transform function to math.mean
   * Adds a property transform containing the transform function.
   *
   * This transform changed the last `dim` parameter of function mean
   * from one-based to zero based
   */ return typed('mean', {
        '...any': function any(args) {
            args = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$lastDimToZeroBase$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lastDimToZeroBase"])(args);
            try {
                return mean.apply(null, args);
            } catch (err) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$errorTransform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["errorTransform"])(err);
            }
        }
    });
}, {
    isTransformFunction: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/transform/min.transform.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createMinTransform": (()=>createMinTransform)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$errorTransform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$min$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/statistics/min.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$lastDimToZeroBase$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/transform/utils/lastDimToZeroBase.js [app-client] (ecmascript)");
;
;
;
;
var name = 'min';
var dependencies = [
    'typed',
    'config',
    'numeric',
    'smaller'
];
var createMinTransform = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config, numeric, smaller } = _ref;
    var min = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$min$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMin"])({
        typed,
        config,
        numeric,
        smaller
    });
    /**
   * Attach a transform function to math.min
   * Adds a property transform containing the transform function.
   *
   * This transform changed the last `dim` parameter of function min
   * from one-based to zero based
   */ return typed('min', {
        '...any': function any(args) {
            args = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$lastDimToZeroBase$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lastDimToZeroBase"])(args);
            try {
                return min.apply(null, args);
            } catch (err) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$errorTransform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["errorTransform"])(err);
            }
        }
    });
}, {
    isTransformFunction: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/transform/range.transform.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createRangeTransform": (()=>createRangeTransform)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$matrix$2f$range$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/matrix/range.js [app-client] (ecmascript)");
;
;
var name = 'range';
var dependencies = [
    'typed',
    'config',
    '?matrix',
    '?bignumber',
    'smaller',
    'smallerEq',
    'larger',
    'largerEq',
    'add',
    'isPositive'
];
var createRangeTransform = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config, matrix, bignumber, smaller, smallerEq, larger, largerEq, add, isPositive } = _ref;
    var range = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$matrix$2f$range$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createRange"])({
        typed,
        config,
        matrix,
        bignumber,
        smaller,
        smallerEq,
        larger,
        largerEq,
        add,
        isPositive
    });
    /**
   * Attach a transform function to math.range
   * Adds a property transform containing the transform function.
   *
   * This transform creates a range which includes the end value
   */ return typed('range', {
        '...any': function any(args) {
            var lastIndex = args.length - 1;
            var last = args[lastIndex];
            if (typeof last !== 'boolean') {
                // append a parameter includeEnd=true
                args.push(true);
            }
            return range.apply(null, args);
        }
    });
}, {
    isTransformFunction: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/transform/row.transform.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createRowTransform": (()=>createRowTransform)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$matrix$2f$row$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/matrix/row.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$errorTransform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
;
;
;
;
var name = 'row';
var dependencies = [
    'typed',
    'Index',
    'matrix',
    'range'
];
var createRowTransform = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, Index, matrix, range } = _ref;
    var row = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$matrix$2f$row$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createRow"])({
        typed,
        Index,
        matrix,
        range
    });
    // @see: comment of row itself
    return typed('row', {
        '...any': function any(args) {
            // change last argument from zero-based to one-based
            var lastIndex = args.length - 1;
            var last = args[lastIndex];
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNumber"])(last)) {
                args[lastIndex] = last - 1;
            }
            try {
                return row.apply(null, args);
            } catch (err) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$errorTransform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["errorTransform"])(err);
            }
        }
    });
}, {
    isTransformFunction: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/transform/subset.transform.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createSubsetTransform": (()=>createSubsetTransform)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$errorTransform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$matrix$2f$subset$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/matrix/subset.js [app-client] (ecmascript)");
;
;
;
var name = 'subset';
var dependencies = [
    'typed',
    'matrix',
    'zeros',
    'add'
];
var createSubsetTransform = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, matrix, zeros, add } = _ref;
    var subset = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$matrix$2f$subset$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSubset"])({
        typed,
        matrix,
        zeros,
        add
    });
    /**
   * Attach a transform function to math.subset
   * Adds a property transform containing the transform function.
   *
   * This transform creates a range which includes the end value
   */ return typed('subset', {
        '...any': function any(args) {
            try {
                return subset.apply(null, args);
            } catch (err) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$errorTransform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["errorTransform"])(err);
            }
        }
    });
}, {
    isTransformFunction: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/transform/concat.transform.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createConcatTransform": (()=>createConcatTransform)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$errorTransform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$matrix$2f$concat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/matrix/concat.js [app-client] (ecmascript)");
;
;
;
;
var name = 'concat';
var dependencies = [
    'typed',
    'matrix',
    'isInteger'
];
var createConcatTransform = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, matrix, isInteger } = _ref;
    var concat = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$matrix$2f$concat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createConcat"])({
        typed,
        matrix,
        isInteger
    });
    /**
   * Attach a transform function to math.range
   * Adds a property transform containing the transform function.
   *
   * This transform changed the last `dim` parameter of function concat
   * from one-based to zero based
   */ return typed('concat', {
        '...any': function any(args) {
            // change last argument from one-based to zero-based
            var lastIndex = args.length - 1;
            var last = args[lastIndex];
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNumber"])(last)) {
                args[lastIndex] = last - 1;
            } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isBigNumber"])(last)) {
                args[lastIndex] = last.minus(1);
            }
            try {
                return concat.apply(null, args);
            } catch (err) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$errorTransform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["errorTransform"])(err);
            }
        }
    });
}, {
    isTransformFunction: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/transform/diff.transform.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createDiffTransform": (()=>createDiffTransform)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$errorTransform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$matrix$2f$diff$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/matrix/diff.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$lastDimToZeroBase$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/transform/utils/lastDimToZeroBase.js [app-client] (ecmascript)");
;
;
;
;
var name = 'diff';
var dependencies = [
    'typed',
    'matrix',
    'subtract',
    'number',
    'bignumber'
];
var createDiffTransform = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, matrix, subtract, number, bignumber } = _ref;
    var diff = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$matrix$2f$diff$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createDiff"])({
        typed,
        matrix,
        subtract,
        number,
        bignumber
    });
    /**
   * Attach a transform function to math.diff
   * Adds a property transform containing the transform function.
   *
   * This transform creates a range which includes the end value
   */ return typed(name, {
        '...any': function any(args) {
            args = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$lastDimToZeroBase$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lastDimToZeroBase"])(args);
            try {
                return diff.apply(null, args);
            } catch (err) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$errorTransform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["errorTransform"])(err);
            }
        }
    });
}, {
    isTransformFunction: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/transform/std.transform.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createStdTransform": (()=>createStdTransform)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$std$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/statistics/std.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$errorTransform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$lastDimToZeroBase$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/transform/utils/lastDimToZeroBase.js [app-client] (ecmascript)");
;
;
;
;
var name = 'std';
var dependencies = [
    'typed',
    'map',
    'sqrt',
    'variance'
];
var createStdTransform = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, map, sqrt, variance } = _ref;
    var std = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$std$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createStd"])({
        typed,
        map,
        sqrt,
        variance
    });
    return typed('std', {
        '...any': function any(args) {
            args = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$lastDimToZeroBase$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lastDimToZeroBase"])(args);
            try {
                return std.apply(null, args);
            } catch (err) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$errorTransform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["errorTransform"])(err);
            }
        }
    });
}, {
    isTransformFunction: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/transform/sum.transform.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createSumTransform": (()=>createSumTransform)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$errorTransform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$sum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/statistics/sum.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$lastDimToZeroBase$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/transform/utils/lastDimToZeroBase.js [app-client] (ecmascript)");
;
;
;
;
/**
 * Attach a transform function to math.sum
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `dim` parameter of function sum
 * from one-based to zero based
 */ var name = 'sum';
var dependencies = [
    'typed',
    'config',
    'add',
    'numeric'
];
var createSumTransform = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config, add, numeric } = _ref;
    var sum = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$sum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSum"])({
        typed,
        config,
        add,
        numeric
    });
    return typed(name, {
        '...any': function any(args) {
            args = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$lastDimToZeroBase$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lastDimToZeroBase"])(args);
            try {
                return sum.apply(null, args);
            } catch (err) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$errorTransform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["errorTransform"])(err);
            }
        }
    });
}, {
    isTransformFunction: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/transform/quantileSeq.transform.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createQuantileSeqTransform": (()=>createQuantileSeqTransform)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$quantileSeq$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/statistics/quantileSeq.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$lastDimToZeroBase$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/transform/utils/lastDimToZeroBase.js [app-client] (ecmascript)");
;
;
;
var name = 'quantileSeq';
var dependencies = [
    'typed',
    'bignumber',
    'add',
    'subtract',
    'divide',
    'multiply',
    'partitionSelect',
    'compare',
    'isInteger',
    'smaller',
    'smallerEq',
    'larger'
];
var createQuantileSeqTransform = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, bignumber, add, subtract, divide, multiply, partitionSelect, compare, isInteger, smaller, smallerEq, larger } = _ref;
    var quantileSeq = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$quantileSeq$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createQuantileSeq"])({
        typed,
        bignumber,
        add,
        subtract,
        divide,
        multiply,
        partitionSelect,
        compare,
        isInteger,
        smaller,
        smallerEq,
        larger
    });
    return typed('quantileSeq', {
        'Array | Matrix, number | BigNumber': quantileSeq,
        'Array | Matrix, number | BigNumber, number': (arr, prob, dim)=>quantileSeq(arr, prob, dimToZeroBase(dim)),
        'Array | Matrix, number | BigNumber, boolean': quantileSeq,
        'Array | Matrix, number | BigNumber, boolean, number': (arr, prob, sorted, dim)=>quantileSeq(arr, prob, sorted, dimToZeroBase(dim)),
        'Array | Matrix, Array | Matrix': quantileSeq,
        'Array | Matrix, Array | Matrix, number': (data, prob, dim)=>quantileSeq(data, prob, dimToZeroBase(dim)),
        'Array | Matrix, Array | Matrix, boolean': quantileSeq,
        'Array | Matrix, Array | Matrix, boolean, number': (data, prob, sorted, dim)=>quantileSeq(data, prob, sorted, dimToZeroBase(dim))
    });
    "TURBOPACK unreachable";
    function dimToZeroBase(dim) {
        // TODO: find a better way, maybe lastDimToZeroBase could apply to more cases.
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$lastDimToZeroBase$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lastDimToZeroBase"])([
            [],
            dim
        ])[1];
    }
}, {
    isTransformFunction: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/transform/cumsum.transform.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createCumSumTransform": (()=>createCumSumTransform)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$errorTransform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$cumsum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/statistics/cumsum.js [app-client] (ecmascript)");
;
;
;
;
/**
 * Attach a transform function to math.sum
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `dim` parameter of function sum
 * from one-based to zero based
 */ var name = 'cumsum';
var dependencies = [
    'typed',
    'add',
    'unaryPlus'
];
var createCumSumTransform = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, add, unaryPlus } = _ref;
    var cumsum = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$cumsum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createCumSum"])({
        typed,
        add,
        unaryPlus
    });
    return typed(name, {
        '...any': function any(args) {
            // change last argument dim from one-based to zero-based
            if (args.length === 2 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isCollection"])(args[0])) {
                var dim = args[1];
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNumber"])(dim)) {
                    args[1] = dim - 1;
                } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isBigNumber"])(dim)) {
                    args[1] = dim.minus(1);
                }
            }
            try {
                return cumsum.apply(null, args);
            } catch (err) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$errorTransform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["errorTransform"])(err);
            }
        }
    });
}, {
    isTransformFunction: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/transform/variance.transform.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createVarianceTransform": (()=>createVarianceTransform)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$errorTransform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/transform/utils/errorTransform.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$variance$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/statistics/variance.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$lastDimToZeroBase$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/expression/transform/utils/lastDimToZeroBase.js [app-client] (ecmascript)");
;
;
;
;
var name = 'variance';
var dependencies = [
    'typed',
    'add',
    'subtract',
    'multiply',
    'divide',
    'apply',
    'isNaN'
];
var createVarianceTransform = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, add, subtract, multiply, divide, apply, isNaN } = _ref;
    var variance = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$variance$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createVariance"])({
        typed,
        add,
        subtract,
        multiply,
        divide,
        apply,
        isNaN
    });
    return typed(name, {
        '...any': function any(args) {
            args = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$lastDimToZeroBase$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lastDimToZeroBase"])(args);
            try {
                return variance.apply(null, args);
            } catch (err) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$expression$2f$transform$2f$utils$2f$errorTransform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["errorTransform"])(err);
            }
        }
    });
}, {
    isTransformFunction: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/transform/print.transform.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createPrintTransform": (()=>createPrintTransform)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$string$2f$print$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/string/print.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$print$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/print.js [app-client] (ecmascript)");
;
;
;
var name = 'print';
var dependencies = [
    'typed',
    'matrix',
    'zeros',
    'add'
];
var createPrintTransform = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, matrix, zeros, add } = _ref;
    var print = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$string$2f$print$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createPrint"])({
        typed,
        matrix,
        zeros,
        add
    });
    return typed(name, {
        'string, Object | Array': function string_Object__Array(template, values) {
            return print(_convertTemplateToZeroBasedIndex(template), values);
        },
        'string, Object | Array, number | Object': function string_Object__Array_number__Object(template, values, options) {
            return print(_convertTemplateToZeroBasedIndex(template), values, options);
        }
    });
    "TURBOPACK unreachable";
    function _convertTemplateToZeroBasedIndex(template) {
        return template.replace(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$print$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["printTemplate"], (x)=>{
            var parts = x.slice(1).split('.');
            var result = parts.map(function(part) {
                if (!isNaN(part) && part.length > 0) {
                    return parseInt(part) - 1;
                } else {
                    return part;
                }
            });
            return '$' + result.join('.');
        });
    }
}, {
    isTransformFunction: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/transform/and.transform.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAndTransform": (()=>createAndTransform)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$logical$2f$and$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/logical/and.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
;
;
;
var name = 'and';
var dependencies = [
    'typed',
    'matrix',
    'zeros',
    'add',
    'equalScalar',
    'not',
    'concat'
];
var createAndTransform = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, matrix, equalScalar, zeros, not, concat } = _ref;
    var and = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$logical$2f$and$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnd"])({
        typed,
        matrix,
        equalScalar,
        zeros,
        not,
        concat
    });
    function andTransform(args, math, scope) {
        var condition1 = args[0].compile().evaluate(scope);
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isCollection"])(condition1) && !and(condition1, true)) {
            return false;
        }
        var condition2 = args[1].compile().evaluate(scope);
        return and(condition1, condition2);
    }
    andTransform.rawArgs = true;
    return andTransform;
}, {
    isTransformFunction: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/transform/or.transform.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createOrTransform": (()=>createOrTransform)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$logical$2f$or$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/logical/or.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
;
;
;
var name = 'or';
var dependencies = [
    'typed',
    'matrix',
    'equalScalar',
    'DenseMatrix',
    'concat'
];
var createOrTransform = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, matrix, equalScalar, DenseMatrix, concat } = _ref;
    var or = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$logical$2f$or$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createOr"])({
        typed,
        matrix,
        equalScalar,
        DenseMatrix,
        concat
    });
    function orTransform(args, math, scope) {
        var condition1 = args[0].compile().evaluate(scope);
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isCollection"])(condition1) && or(condition1, false)) {
            return true;
        }
        var condition2 = args[1].compile().evaluate(scope);
        return or(condition1, condition2);
    }
    orTransform.rawArgs = true;
    return orTransform;
}, {
    isTransformFunction: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/transform/bitAnd.transform.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createBitAndTransform": (()=>createBitAndTransform)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$bitwise$2f$bitAnd$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/bitwise/bitAnd.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
;
;
;
var name = 'bitAnd';
var dependencies = [
    'typed',
    'matrix',
    'zeros',
    'add',
    'equalScalar',
    'not',
    'concat'
];
var createBitAndTransform = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, matrix, equalScalar, zeros, not, concat } = _ref;
    var bitAnd = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$bitwise$2f$bitAnd$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createBitAnd"])({
        typed,
        matrix,
        equalScalar,
        zeros,
        not,
        concat
    });
    function bitAndTransform(args, math, scope) {
        var condition1 = args[0].compile().evaluate(scope);
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isCollection"])(condition1)) {
            if (isNaN(condition1)) {
                return NaN;
            }
            if (condition1 === 0 || condition1 === false) {
                return 0;
            }
        }
        var condition2 = args[1].compile().evaluate(scope);
        return bitAnd(condition1, condition2);
    }
    bitAndTransform.rawArgs = true;
    return bitAndTransform;
}, {
    isTransformFunction: true
});
}}),
"[project]/node_modules/mathjs/lib/esm/expression/transform/bitOr.transform.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createBitOrTransform": (()=>createBitOrTransform)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$bitwise$2f$bitOr$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/bitwise/bitOr.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-client] (ecmascript)");
;
;
;
var name = 'bitOr';
var dependencies = [
    'typed',
    'matrix',
    'equalScalar',
    'DenseMatrix',
    'concat'
];
var createBitOrTransform = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, matrix, equalScalar, DenseMatrix, concat } = _ref;
    var bitOr = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$bitwise$2f$bitOr$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createBitOr"])({
        typed,
        matrix,
        equalScalar,
        DenseMatrix,
        concat
    });
    function bitOrTransform(args, math, scope) {
        var condition1 = args[0].compile().evaluate(scope);
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isCollection"])(condition1)) {
            if (isNaN(condition1)) {
                return NaN;
            }
            if (condition1 === -1) {
                return -1;
            }
            if (condition1 === true) {
                return 1;
            }
        }
        var condition2 = args[1].compile().evaluate(scope);
        return bitOr(condition1, condition2);
    }
    bitOrTransform.rawArgs = true;
    return bitOrTransform;
}, {
    isTransformFunction: true
});
}}),
}]);

//# sourceMappingURL=node_modules_mathjs_lib_esm_expression_9640bc36._.js.map