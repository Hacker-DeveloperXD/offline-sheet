module.exports = {

"[project]/node_modules/mathjs/lib/esm/function/utils/clone.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createClone": (()=>createClone)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/object.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
;
var name = 'clone';
var dependencies = [
    'typed'
];
var createClone = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed } = _ref;
    /**
   * Clone an object. Will make a deep copy of the data.
   *
   * Syntax:
   *
   *     math.clone(x)
   *
   * Examples:
   *
   *    math.clone(3.5)                   // returns number 3.5
   *    math.clone(math.complex('2-4i'))  // returns Complex 2 - 4i
   *    math.clone(math.unit(45, 'deg'))  // returns Unit 45 deg
   *    math.clone([[1, 2], [3, 4]])      // returns Array [[1, 2], [3, 4]]
   *    math.clone("hello world")         // returns string "hello world"
   *
   * @param {*} x   Object to be cloned
   * @return {*} A clone of object x
   */ return typed(name, {
        any: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["clone"]
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/utils/isInteger.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createIsInteger": (()=>createIsInteger)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/collection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/number.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
;
;
var name = 'isInteger';
var dependencies = [
    'typed'
];
var createIsInteger = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed } = _ref;
    /**
   * Test whether a value is an integer number.
   * The function supports `number`, `BigNumber`, and `Fraction`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isInteger(x)
   *
   * Examples:
   *
   *    math.isInteger(2)                     // returns true
   *    math.isInteger(0)                     // returns true
   *    math.isInteger(0.5)                   // returns false
   *    math.isInteger(math.bignumber(500))   // returns true
   *    math.isInteger(math.fraction(4))      // returns true
   *    math.isInteger('3')                   // returns true
   *    math.isInteger([3, 0.5, -2])          // returns [true, false, true]
   *    math.isInteger(math.complex('2-4i'))  // throws an error
   *
   * See also:
   *
   *    isNumeric, isPositive, isNegative, isZero
   *
   * @param {number | BigNumber | bigint | Fraction | Array | Matrix} x   Value to be tested
   * @return {boolean}  Returns true when `x` contains a numeric, integer value.
   *                    Throws an error in case of an unknown data type.
   */ return typed(name, {
        number: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isInteger"],
        // TODO: what to do with isInteger(add(0.1, 0.2))  ?
        BigNumber: function BigNumber(x) {
            return x.isInt();
        },
        bigint: function bigint(x) {
            return true;
        },
        Fraction: function Fraction(x) {
            return x.d === 1 && isFinite(x.n);
        },
        'Array | Matrix': typed.referToSelf((self)=>(x)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepMap"])(x, self))
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/utils/isNegative.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createIsNegative": (()=>createIsNegative)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/collection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$nearlyEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/bignumber/nearlyEqual.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/number.js [app-ssr] (ecmascript)");
;
;
;
;
;
var name = 'isNegative';
var dependencies = [
    'typed',
    'config'
];
var createIsNegative = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config } = _ref;
    /**
   * Test whether a value is negative: smaller than zero.
   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isNegative(x)
   *
   * Examples:
   *
   *    math.isNegative(3)                     // returns false
   *    math.isNegative(-2)                    // returns true
   *    math.isNegative(0)                     // returns false
   *    math.isNegative(-0)                    // returns false
   *    math.isNegative(math.bignumber(2))     // returns false
   *    math.isNegative(math.fraction(-2, 5))  // returns true
   *    math.isNegative('-2')                  // returns true
   *    math.isNegative([2, 0, -3])            // returns [false, false, true]
   *
   * See also:
   *
   *    isNumeric, isPositive, isZero, isInteger
   *
   * @param {number | BigNumber | bigint | Fraction | Unit | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is larger than zero.
   *                    Throws an error in case of an unknown data type.
   */ return typed(name, {
        number: (x)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nearlyEqual"])(x, 0, config.relTol, config.absTol) ? false : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isNegativeNumber"])(x),
        BigNumber: (x)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$nearlyEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nearlyEqual"])(x, new x.constructor(0), config.relTol, config.absTol) ? false : x.isNeg() && !x.isZero() && !x.isNaN(),
        bigint: (x)=>x < 0n,
        Fraction: (x)=>x.s < 0,
        // It's enough to decide on the sign
        Unit: typed.referToSelf((self)=>(x)=>typed.find(self, x.valueType())(x.value)),
        'Array | Matrix': typed.referToSelf((self)=>(x)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepMap"])(x, self))
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/utils/isNumeric.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createIsNumeric": (()=>createIsNumeric)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/collection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
;
var name = 'isNumeric';
var dependencies = [
    'typed'
];
var createIsNumeric = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed } = _ref;
    /**
   * Test whether a value is an numeric value.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isNumeric(x)
   *
   * Examples:
   *
   *    math.isNumeric(2)                     // returns true
   *    math.isNumeric('2')                   // returns false
   *    math.hasNumericValue('2')             // returns true
   *    math.isNumeric(0)                     // returns true
   *    math.isNumeric(math.bignumber('42'))  // returns true
   *    math.isNumeric(math.bigint('42'))     // returns true
   *    math.isNumeric(math.fraction(4))      // returns true
   *    math.isNumeric(math.complex('2-4i'))  // returns false
   *    math.isNumeric([2.3, 'foo', false])   // returns [true, false, true]
   *
   * See also:
   *
   *    isZero, isPositive, isNegative, isInteger, hasNumericValue
   *
   * @param {*} x       Value to be tested
   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,
   *                    `Fraction`, or `boolean`. Returns false for other types.
   *                    Throws an error in case of unknown types.
   */ return typed(name, {
        'number | BigNumber | bigint | Fraction | boolean': ()=>true,
        'Complex | Unit | string | null | undefined | Node': ()=>false,
        'Array | Matrix': typed.referToSelf((self)=>(x)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepMap"])(x, self))
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/utils/hasNumericValue.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createHasNumericValue": (()=>createHasNumericValue)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
var name = 'hasNumericValue';
var dependencies = [
    'typed',
    'isNumeric'
];
var createHasNumericValue = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, isNumeric } = _ref;
    /**
   * Test whether a value is an numeric value.
   *
   * In case of a string, true is returned if the string contains a numeric value.
   *
   * Syntax:
   *
   *     math.hasNumericValue(x)
   *
   * Examples:
   *
   *    math.hasNumericValue(2)                     // returns true
   *    math.hasNumericValue('2')                   // returns true
   *    math.isNumeric('2')                         // returns false
   *    math.hasNumericValue(0)                     // returns true
   *    math.hasNumericValue(math.bignumber('500')) // returns true
   *    math.hasNumericValue(math.bigint('42'))     // returns true
   *    math.hasNumericValue(42n)                   // returns true
   *    math.hasNumericValue(math.fraction(4))      // returns true
   *    math.hasNumericValue(math.complex('2-4i'))  // returns false
   *    math.hasNumericValue(false)                 // returns true
   *    math.hasNumericValue([2.3, 'foo', false])   // returns [true, false, true]
   *
   * See also:
   *
   *    isZero, isPositive, isNegative, isInteger, isNumeric
   *
   * @param {*} x       Value to be tested
   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,
   *                    `Fraction`, `Boolean`, or a `String` containing number. Returns false for other types.
   *                    Throws an error in case of unknown types.
   */ return typed(name, {
        boolean: ()=>true,
        string: function string(x) {
            return x.trim().length > 0 && !isNaN(Number(x));
        },
        any: function any(x) {
            return isNumeric(x);
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/utils/isPositive.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createIsPositive": (()=>createIsPositive)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/collection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$nearlyEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/bignumber/nearlyEqual.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/number.js [app-ssr] (ecmascript)");
;
;
;
;
;
var name = 'isPositive';
var dependencies = [
    'typed',
    'config'
];
var createIsPositive = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config } = _ref;
    /**
   * Test whether a value is positive: larger than zero.
   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isPositive(x)
   *
   * Examples:
   *
   *    math.isPositive(3)                     // returns true
   *    math.isPositive(-2)                    // returns false
   *    math.isPositive(0)                     // returns false
   *    math.isPositive(-0)                    // returns false
   *    math.isPositive(0.5)                   // returns true
   *    math.isPositive(math.bignumber(2))     // returns true
   *    math.isPositive(math.fraction(-2, 5))  // returns false
   *    math.isPositive(math.fraction(1, 3))   // returns true
   *    math.isPositive('2')                   // returns true
   *    math.isPositive([2, 0, -3])            // returns [true, false, false]
   *
   * See also:
   *
   *    isNumeric, isZero, isNegative, isInteger
   *
   * @param {number | BigNumber | bigint | Fraction | Unit | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is larger than zero.
   *                    Throws an error in case of an unknown data type.
   */ return typed(name, {
        number: (x)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nearlyEqual"])(x, 0, config.relTol, config.absTol) ? false : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPositiveNumber"])(x),
        BigNumber: (x)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$nearlyEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nearlyEqual"])(x, new x.constructor(0), config.relTol, config.absTol) ? false : !x.isNeg() && !x.isZero() && !x.isNaN(),
        bigint: (x)=>x > 0n,
        Fraction: (x)=>x.s > 0 && x.n > 0,
        Unit: typed.referToSelf((self)=>(x)=>typed.find(self, x.valueType())(x.value)),
        'Array | Matrix': typed.referToSelf((self)=>(x)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepMap"])(x, self))
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/utils/isZero.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createIsZero": (()=>createIsZero)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/collection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
;
var name = 'isZero';
var dependencies = [
    'typed',
    'equalScalar'
];
var createIsZero = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, equalScalar } = _ref;
    /**
   * Test whether a value is zero.
   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,
   * `Complex`, and `Unit`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isZero(x)
   *
   * Examples:
   *
   *    math.isZero(0)                      // returns true
   *    math.isZero(2)                      // returns false
   *    math.isZero(0.5)                    // returns false
   *    math.isZero(math.bignumber(0))      // returns true
   *    math.isZero(math.fraction(0))       // returns true
   *    math.isZero(math.fraction(1,3))     // returns false
   *    math.isZero(math.complex('2 - 4i')) // returns false
   *    math.isZero(math.complex('0i'))     // returns true
   *    math.isZero('0')                    // returns true
   *    math.isZero('2')                    // returns false
   *    math.isZero([2, 0, -3])             // returns [false, true, false]
   *
   * See also:
   *
   *    isNumeric, isPositive, isNegative, isInteger
   *
   * @param {number | BigNumber | bigint | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested
   * @return {boolean}  Returns true when `x` is zero.
   *                    Throws an error in case of an unknown data type.
   */ return typed(name, {
        'number | BigNumber | Complex | Fraction': (x)=>equalScalar(x, 0),
        bigint: (x)=>x === 0n,
        Unit: typed.referToSelf((self)=>(x)=>typed.find(self, x.valueType())(x.value)),
        'Array | Matrix': typed.referToSelf((self)=>(x)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepMap"])(x, self))
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/utils/isNaN.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createIsNaN": (()=>createIsNaN)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/collection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/utils.js [app-ssr] (ecmascript)");
;
;
;
var name = 'isNaN';
var dependencies = [
    'typed'
];
var createIsNaN = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed } = _ref;
    /**
   * Test whether a value is NaN (not a number).
   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isNaN(x)
   *
   * Examples:
   *
   *    math.isNaN(3)                     // returns false
   *    math.isNaN(NaN)                   // returns true
   *    math.isNaN(0)                     // returns false
   *    math.isNaN(math.bignumber(NaN))   // returns true
   *    math.isNaN(math.bignumber(0))     // returns false
   *    math.isNaN(math.fraction(-2, 5))  // returns false
   *    math.isNaN('-2')                  // returns false
   *    math.isNaN([2, 0, -3, NaN])       // returns [false, false, false, true]
   *
   * See also:
   *
   *    isNumeric, isNegative, isPositive, isZero, isInteger
   *
   * @param {number | BigNumber | bigint | Fraction | Unit | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is NaN.
   *                    Throws an error in case of an unknown data type.
   */ return typed(name, {
        number: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isNaNNumber"],
        BigNumber: function BigNumber(x) {
            return x.isNaN();
        },
        bigint: function bigint(x) {
            return false;
        },
        Fraction: function Fraction(x) {
            return false;
        },
        Complex: function Complex(x) {
            return x.isNaN();
        },
        Unit: function Unit(x) {
            return Number.isNaN(x.value);
        },
        'Array | Matrix': typed.referToSelf((self)=>(x)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepMap"])(x, self))
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/utils/typeOf.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createTypeOf": (()=>createTypeOf)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-ssr] (ecmascript)");
;
;
var name = 'typeOf';
var dependencies = [
    'typed'
];
var createTypeOf = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed } = _ref;
    /**
   * Determine the type of an entity.
   *
   * Syntax:
   *
   *    math.typeOf(x)
   *
   * Examples:
   *
   *    // This list is intended to include all relevant types, for testing
   *    // purposes:
   *    math.typeOf(3.5)                      // returns 'number'
   *    math.typeOf(42n)                      // returns 'bigint'
   *    math.typeOf(math.complex('2-4i'))     // returns 'Complex'
   *    math.typeOf(math.unit('45 deg'))      // returns 'Unit'
   *    math.typeOf('hello world')            // returns 'string'
   *    math.typeOf(null)                     // returns 'null'
   *    math.typeOf(true)                     // returns 'boolean'
   *    math.typeOf([1, 2, 3])                // returns 'Array'
   *    math.typeOf(new Date())               // returns 'Date'
   *    math.typeOf(function () {})           // returns 'function'
   *    math.typeOf({a: 2, b: 3})             // returns 'Object'
   *    math.typeOf(/a regexp/)               // returns 'RegExp'
   *    math.typeOf(undefined)                // returns 'undefined'
   *    math.typeOf(math.bignumber('23e99'))  // returns 'BigNumber'
   *    math.typeOf(math.chain(2))            // returns 'Chain'
   *    math.typeOf(math.fraction(1, 3))      // returns 'Fraction'
   *    math.typeOf(math.help('sqrt'))        // returns 'Help'
   *    math.typeOf(math.index(1, 3))         // returns 'Index'
   *    math.typeOf(math.matrix([[1],[3]]))   // returns 'DenseMatrix'
   *    math.typeOf(math.matrix([],'sparse')) // returns 'SparseMatrix'
   *    math.typeOf(new math.Range(0, 10))    // returns 'Range'
   *    math.typeOf(math.evaluate('a=2\na'))  // returns 'ResultSet'
   *    math.typeOf(math.parse('A[2]'))       // returns 'AccessorNode'
   *    math.typeOf(math.parse('[1,2,3]'))    // returns 'ArrayNode'
   *    math.typeOf(math.parse('x=2'))        // returns 'AssignmentNode'
   *    math.typeOf(math.parse('a=2; b=3'))   // returns 'BlockNode'
   *    math.typeOf(math.parse('x<0?-1:1'))   // returns 'ConditionalNode'
   *    math.typeOf(math.parse('2.3'))        // returns 'ConstantNode'
   *    math.typeOf(math.parse('f(x)=x^2'))   // returns 'FunctionAssignmentNode'
   *    math.typeOf(math.parse('sqrt(4)'))    // returns 'FunctionNode'
   *    math.typeOf(math.parse('A[2]').index) // returns 'IndexNode'
   *    math.typeOf(math.parse('{a:2}'))      // returns 'ObjectNode'
   *    math.typeOf(math.parse('(2+3)'))      // returns 'ParenthesisNode'
   *    math.typeOf(math.parse('1:10'))       // returns 'RangeNode'
   *    math.typeOf(math.parse('a<b<c'))      // returns 'RelationalNode'
   *    math.typeOf(math.parse('x'))          // returns 'SymbolNode'
   *
   * @param {*} x     The variable for which to test the type.
   * @return {string} Returns the name of the type. Primitive types are lower case,
   *                  non-primitive types are upper-camel-case.
   *                  For example 'number', 'string', 'Array', 'Date'.
   */ return typed(name, {
        any: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["typeOf"]
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/utils/isPrime.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createIsPrime": (()=>createIsPrime)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/collection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
;
var name = 'isPrime';
var dependencies = [
    'typed'
];
var createIsPrime = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed } = _ref;
    /**
   * Test whether a value is prime: has no divisors other than itself and one.
   * The function supports type `number`, `bignumber`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isPrime(x)
   *
   * Examples:
   *
   *    math.isPrime(3)                     // returns true
   *    math.isPrime(-2)                    // returns false
   *    math.isPrime(0)                     // returns false
   *    math.isPrime(-0)                    // returns false
   *    math.isPrime(0.5)                   // returns false
   *    math.isPrime('2')                   // returns true
   *    math.isPrime([2, 17, 100])           // returns [true, true, false]
   *
   * See also:
   *
   *    isNumeric, isZero, isNegative, isInteger
   *
   * @param {number | BigNumber | bigint | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is larger than zero.
   *                    Throws an error in case of an unknown data type.
   */ return typed(name, {
        number: function number(x) {
            if (x <= 3) {
                return x > 1;
            }
            if (x % 2 === 0 || x % 3 === 0) {
                return false;
            }
            for(var i = 5; i * i <= x; i += 6){
                if (x % i === 0 || x % (i + 2) === 0) {
                    return false;
                }
            }
            return true;
        },
        bigint: function bigint(x) {
            if (x <= 3n) {
                return x > 1n;
            }
            if (x % 2n === 0n || x % 3n === 0n) {
                return false;
            }
            for(var i = 5n; i * i <= x; i += 6n){
                if (x % i === 0n || x % (i + 2n) === 0n) {
                    return false;
                }
            }
            return true;
        },
        BigNumber: function BigNumber(n) {
            if (n.lte(3)) return n.gt(1);
            if (n.mod(2).eq(0) || n.mod(3).eq(0)) return false;
            if (n.lt(Math.pow(2, 32))) {
                var x = n.toNumber();
                for(var i = 5; i * i <= x; i += 6){
                    if (x % i === 0 || x % (i + 2) === 0) {
                        return false;
                    }
                }
                return true;
            }
            function modPow(base, exponent, modulus) {
                // exponent can be huge, use non-recursive variant
                var accumulator = 1;
                while(!exponent.eq(0)){
                    if (exponent.mod(2).eq(0)) {
                        exponent = exponent.div(2);
                        base = base.mul(base).mod(modulus);
                    } else {
                        exponent = exponent.sub(1);
                        accumulator = base.mul(accumulator).mod(modulus);
                    }
                }
                return accumulator;
            }
            // https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test#Deterministic_variants
            var Decimal = n.constructor.clone({
                precision: n.toFixed(0).length * 2
            });
            n = new Decimal(n);
            var r = 0;
            var d = n.sub(1);
            while(d.mod(2).eq(0)){
                d = d.div(2);
                r += 1;
            }
            var bases = null;
            // https://en.wikipedia.org/wiki/Miller–Rabin_primality_test#Testing_against_small_sets_of_bases
            if (n.lt('3317044064679887385961981')) {
                bases = [
                    2,
                    3,
                    5,
                    7,
                    11,
                    13,
                    17,
                    19,
                    23,
                    29,
                    31,
                    37,
                    41
                ].filter((x)=>x < n);
            } else {
                var max = Math.min(n.toNumber() - 2, Math.floor(2 * Math.pow(n.toFixed(0).length * Math.log(10), 2)));
                bases = [];
                for(var _i = 2; _i <= max; _i += 1){
                    bases.push(max);
                }
            }
            for(var _i2 = 0; _i2 < bases.length; _i2 += 1){
                var a = bases[_i2];
                var adn = modPow(n.sub(n).add(a), d, n);
                if (!adn.eq(1)) {
                    for(var _i3 = 0, _x = adn; !_x.eq(n.sub(1)); _i3 += 1, _x = _x.mul(_x).mod(n)){
                        if (_i3 === r - 1) {
                            return false;
                        }
                    }
                }
            }
            return true;
        },
        'Array | Matrix': typed.referToSelf((self)=>(x)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepMap"])(x, self))
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/utils/numeric.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNumeric": (()=>createNumeric)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$noop$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/noop.js [app-ssr] (ecmascript)");
;
;
;
var name = 'numeric';
var dependencies = [
    'number',
    '?bignumber',
    '?fraction'
];
var createNumeric = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { number: _number, bignumber, fraction } = _ref;
    var validInputTypes = {
        string: true,
        number: true,
        BigNumber: true,
        Fraction: true
    };
    // Load the conversion functions for each output type
    var validOutputTypes = {
        number: (x)=>_number(x),
        BigNumber: bignumber ? (x)=>bignumber(x) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$noop$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noBignumber"],
        bigint: (x)=>BigInt(x),
        Fraction: fraction ? (x)=>fraction(x) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$noop$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noFraction"]
    };
    /**
   * Convert a numeric input to a specific numeric type: number, BigNumber, bigint, or Fraction.
   *
   * Syntax:
   *
   *    math.numeric(x)
   *
   * Examples:
   *
   *    math.numeric('4')                           // returns 4
   *    math.numeric('4', 'number')                 // returns 4
   *    math.numeric('4', 'bigint')                 // returns 4n
   *    math.numeric('4', 'BigNumber')              // returns BigNumber 4
   *    math.numeric('4', 'Fraction')               // returns Fraction 4
   *    math.numeric(4, 'Fraction')                 // returns Fraction 4
   *    math.numeric(math.fraction(2, 5), 'number') // returns 0.4
   *
   * See also:
   *
   *    number, fraction, bignumber, bigint, string, format
   *
   * @param {string | number | BigNumber | bigint | Fraction } value
   *              A numeric value or a string containing a numeric value
   * @param {string} outputType
   *              Desired numeric output type.
   *              Available values: 'number', 'BigNumber', or 'Fraction'
   * @return {number | BigNumber | bigint | Fraction}
   *              Returns an instance of the numeric in the requested type
   */ return function numeric(value) {
        var outputType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'number';
        var check = arguments.length > 2 ? arguments[2] : undefined;
        if (check !== undefined) {
            throw new SyntaxError('numeric() takes one or two arguments');
        }
        var inputType = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["typeOf"])(value);
        if (!(inputType in validInputTypes)) {
            throw new TypeError('Cannot convert ' + value + ' of type "' + inputType + '"; valid input types are ' + Object.keys(validInputTypes).join(', '));
        }
        if (!(outputType in validOutputTypes)) {
            throw new TypeError('Cannot convert ' + value + ' to type "' + outputType + '"; valid output types are ' + Object.keys(validOutputTypes).join(', '));
        }
        if (outputType === inputType) {
            return value;
        } else {
            return validOutputTypes[outputType](value);
        }
    };
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/relational/compareUnits.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createCompareUnits": (()=>createCompareUnits)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
var createCompareUnits = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])('compareUnits', [
    'typed'
], (_ref)=>{
    var { typed } = _ref;
    return {
        'Unit, Unit': typed.referToSelf((self)=>(x, y)=>{
                if (!x.equalBase(y)) {
                    throw new Error('Cannot compare units with different base');
                }
                return typed.find(self, [
                    x.valueType(),
                    y.valueType()
                ])(x.value, y.value);
            })
    };
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/relational/equalScalar.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createEqualScalar": (()=>createEqualScalar),
    "createEqualScalarNumber": (()=>createEqualScalarNumber)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$nearlyEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/bignumber/nearlyEqual.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/number.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$complex$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/complex.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$relational$2f$compareUnits$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/relational/compareUnits.js [app-ssr] (ecmascript)");
;
;
;
;
;
var name = 'equalScalar';
var dependencies = [
    'typed',
    'config'
];
var createEqualScalar = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config } = _ref;
    var compareUnits = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$relational$2f$compareUnits$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createCompareUnits"])({
        typed
    });
    /**
   * Test whether two scalar values are nearly equal.
   *
   * @param  {number | BigNumber | bigint | Fraction | boolean | Complex | Unit} x   First value to compare
   * @param  {number | BigNumber | bigint | Fraction | boolean | Complex} y          Second value to compare
   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false
   * @private
   */ return typed(name, {
        'boolean, boolean': function boolean_boolean(x, y) {
            return x === y;
        },
        'number, number': function number_number(x, y) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nearlyEqual"])(x, y, config.relTol, config.absTol);
        },
        'BigNumber, BigNumber': function BigNumber_BigNumber(x, y) {
            return x.eq(y) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$nearlyEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nearlyEqual"])(x, y, config.relTol, config.absTol);
        },
        'bigint, bigint': function bigint_bigint(x, y) {
            return x === y;
        },
        'Fraction, Fraction': function Fraction_Fraction(x, y) {
            return x.equals(y);
        },
        'Complex, Complex': function Complex_Complex(x, y) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$complex$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["complexEquals"])(x, y, config.relTol, config.absTol);
        }
    }, compareUnits);
});
var createEqualScalarNumber = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, [
    'typed',
    'config'
], (_ref2)=>{
    var { typed, config } = _ref2;
    return typed(name, {
        'number, number': function number_number(x, y) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nearlyEqual"])(x, y, config.relTol, config.absTol);
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/relational/compare.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createCompare": (()=>createCompare),
    "createCompareNumber": (()=>createCompareNumber)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$nearlyEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/bignumber/nearlyEqual.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/number.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo03xDSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo03xDSf.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo12xSfs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo12xSfs.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo05xSfSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo05xSfSf.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matrixAlgorithmSuite.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$relational$2f$compareUnits$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/relational/compareUnits.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
var name = 'compare';
var dependencies = [
    'typed',
    'config',
    'matrix',
    'equalScalar',
    'BigNumber',
    'Fraction',
    'DenseMatrix',
    'concat'
];
var createCompare = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config, equalScalar, matrix, BigNumber, Fraction, DenseMatrix, concat } = _ref;
    var matAlgo03xDSf = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo03xDSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo03xDSf"])({
        typed
    });
    var matAlgo05xSfSf = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo05xSfSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo05xSfSf"])({
        typed,
        equalScalar
    });
    var matAlgo12xSfs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo12xSfs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo12xSfs"])({
        typed,
        DenseMatrix
    });
    var matrixAlgorithmSuite = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatrixAlgorithmSuite"])({
        typed,
        matrix,
        concat
    });
    var compareUnits = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$relational$2f$compareUnits$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createCompareUnits"])({
        typed
    });
    /**
   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.
   *
   * x and y are considered equal when the relative difference between x and y
   * is smaller than the configured absTol and relTol. The function cannot be used to
   * compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.compare(x, y)
   *
   * Examples:
   *
   *    math.compare(6, 1)           // returns 1
   *    math.compare(2, 3)           // returns -1
   *    math.compare(7, 7)           // returns 0
   *    math.compare('10', '2')      // returns 1
   *    math.compare('1000', '1e3')  // returns 0
   *
   *    const a = math.unit('5 cm')
   *    const b = math.unit('40 mm')
   *    math.compare(a, b)           // returns 1
   *
   *    math.compare(2, [1, 2, 3])   // returns [1, 0, -1]
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural, compareText
   *
   * @param  {number | BigNumber | bigint | Fraction | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | bigint | Fraction | Unit | string | Array | Matrix} y Second value to compare
   * @return {number | BigNumber | bigint | Fraction | Array | Matrix} Returns the result of the comparison:
   *                                                          1 when x > y, -1 when x < y, and 0 when x == y.
   */ return typed(name, createCompareNumber({
        typed,
        config
    }), {
        'boolean, boolean': function boolean_boolean(x, y) {
            return x === y ? 0 : x > y ? 1 : -1;
        },
        'BigNumber, BigNumber': function BigNumber_BigNumber(x, y) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$nearlyEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nearlyEqual"])(x, y, config.relTol, config.absTol) ? new BigNumber(0) : new BigNumber(x.cmp(y));
        },
        'bigint, bigint': function bigint_bigint(x, y) {
            return x === y ? 0n : x > y ? 1n : -1n;
        },
        'Fraction, Fraction': function Fraction_Fraction(x, y) {
            return new Fraction(x.compare(y));
        },
        'Complex, Complex': function Complex_Complex() {
            throw new TypeError('No ordering relation is defined for complex numbers');
        }
    }, compareUnits, matrixAlgorithmSuite({
        SS: matAlgo05xSfSf,
        DS: matAlgo03xDSf,
        Ss: matAlgo12xSfs
    }));
});
var createCompareNumber = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, [
    'typed',
    'config'
], (_ref2)=>{
    var { typed, config } = _ref2;
    return typed(name, {
        'number, number': function number_number(x, y) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nearlyEqual"])(x, y, config.relTol, config.absTol) ? 0 : x > y ? 1 : -1;
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/relational/compareNatural.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createCompareNatural": (()=>createCompareNatural)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$javascript$2d$natural$2d$sort$2f$naturalSort$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/javascript-natural-sort/naturalSort.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
;
;
var name = 'compareNatural';
var dependencies = [
    'typed',
    'compare'
];
var createCompareNatural = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, compare } = _ref;
    var compareBooleans = compare.signatures['boolean,boolean'];
    /**
   * Compare two values of any type in a deterministic, natural way.
   *
   * For numeric values, the function works the same as `math.compare`.
   * For types of values that can't be compared mathematically,
   * the function compares in a natural way.
   *
   * For numeric values, x and y are considered equal when the relative
   * difference between x and y is smaller than the configured relTol and absTol.
   * The function cannot be used to compare values smaller than
   * approximately 2.22e-16.
   *
   * For Complex numbers, first the real parts are compared. If equal,
   * the imaginary parts are compared.
   *
   * Strings are compared with a natural sorting algorithm, which
   * orders strings in a "logic" way following some heuristics.
   * This differs from the function `compare`, which converts the string
   * into a numeric value and compares that. The function `compareText`
   * on the other hand compares text lexically.
   *
   * Arrays and Matrices are compared value by value until there is an
   * unequal pair of values encountered. Objects are compared by sorted
   * keys until the keys or their values are unequal.
   *
   * Syntax:
   *
   *    math.compareNatural(x, y)
   *
   * Examples:
   *
   *    math.compareNatural(6, 1)              // returns 1
   *    math.compareNatural(2, 3)              // returns -1
   *    math.compareNatural(7, 7)              // returns 0
   *
   *    math.compareNatural('10', '2')         // returns 1
   *    math.compareText('10', '2')            // returns -1
   *    math.compare('10', '2')                // returns 1
   *
   *    math.compareNatural('Answer: 10', 'Answer: 2') // returns 1
   *    math.compareText('Answer: 10', 'Answer: 2')    // returns -1
   *    math.compare('Answer: 10', 'Answer: 2')
   *        // Error: Cannot convert "Answer: 10" to a number
   *
   *    const a = math.unit('5 cm')
   *    const b = math.unit('40 mm')
   *    math.compareNatural(a, b)              // returns 1
   *
   *    const c = math.complex('2 + 3i')
   *    const d = math.complex('2 + 4i')
   *    math.compareNatural(c, d)              // returns -1
   *
   *    math.compareNatural([1, 2, 4], [1, 2, 3]) // returns 1
   *    math.compareNatural([1, 2, 3], [1, 2])    // returns 1
   *    math.compareNatural([1, 5], [1, 2, 3])    // returns 1
   *    math.compareNatural([1, 2], [1, 2])       // returns 0
   *
   *    math.compareNatural({a: 2}, {a: 4})       // returns -1
   *
   * See also:
   *
   *    compare, compareText
   *
   * @param  {*} x First value to compare
   * @param  {*} y Second value to compare
   * @return {number} Returns the result of the comparison:
   *                  1 when x > y, -1 when x < y, and 0 when x == y.
   */ return typed(name, {
        'any, any': _compareNatural
    }); // just to check # args
    "TURBOPACK unreachable";
    function _compareNatural(x, y) {
        var typeX = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["typeOf"])(x);
        var typeY = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["typeOf"])(y);
        var c;
        // numeric types
        if ((typeX === 'number' || typeX === 'BigNumber' || typeX === 'Fraction') && (typeY === 'number' || typeY === 'BigNumber' || typeY === 'Fraction')) {
            c = compare(x, y);
            if (c.toString() !== '0') {
                // c can be number, BigNumber, or Fraction
                return c > 0 ? 1 : -1; // return a number
            } else {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$javascript$2d$natural$2d$sort$2f$naturalSort$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(typeX, typeY);
            }
        }
        // matrix types
        var matTypes = [
            'Array',
            'DenseMatrix',
            'SparseMatrix'
        ];
        if (matTypes.includes(typeX) || matTypes.includes(typeY)) {
            c = compareMatricesAndArrays(_compareNatural, x, y);
            if (c !== 0) {
                return c;
            } else {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$javascript$2d$natural$2d$sort$2f$naturalSort$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(typeX, typeY);
            }
        }
        // in case of different types, order by name of type, i.e. 'BigNumber' < 'Complex'
        if (typeX !== typeY) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$javascript$2d$natural$2d$sort$2f$naturalSort$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(typeX, typeY);
        }
        if (typeX === 'Complex') {
            return compareComplexNumbers(x, y);
        }
        if (typeX === 'Unit') {
            if (x.equalBase(y)) {
                return _compareNatural(x.value, y.value);
            }
            // compare by units
            return compareArrays(_compareNatural, x.formatUnits(), y.formatUnits());
        }
        if (typeX === 'boolean') {
            return compareBooleans(x, y);
        }
        if (typeX === 'string') {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$javascript$2d$natural$2d$sort$2f$naturalSort$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(x, y);
        }
        if (typeX === 'Object') {
            return compareObjects(_compareNatural, x, y);
        }
        if (typeX === 'null') {
            return 0;
        }
        if (typeX === 'undefined') {
            return 0;
        }
        // this should not occur...
        throw new TypeError('Unsupported type of value "' + typeX + '"');
    }
    /**
   * Compare mixed matrix/array types, by converting to same-shaped array.
   * This comparator is non-deterministic regarding input types.
   * @param {Array | SparseMatrix | DenseMatrix | *} x
   * @param {Array | SparseMatrix | DenseMatrix | *} y
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */ function compareMatricesAndArrays(compareNatural, x, y) {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSparseMatrix"])(x) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSparseMatrix"])(y)) {
            return compareArrays(compareNatural, x.toJSON().values, y.toJSON().values);
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSparseMatrix"])(x)) {
            // note: convert to array is expensive
            return compareMatricesAndArrays(compareNatural, x.toArray(), y);
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSparseMatrix"])(y)) {
            // note: convert to array is expensive
            return compareMatricesAndArrays(compareNatural, x, y.toArray());
        }
        // convert DenseArray into Array
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isDenseMatrix"])(x)) {
            return compareMatricesAndArrays(compareNatural, x.toJSON().data, y);
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isDenseMatrix"])(y)) {
            return compareMatricesAndArrays(compareNatural, x, y.toJSON().data);
        }
        // convert scalars to array
        if (!Array.isArray(x)) {
            return compareMatricesAndArrays(compareNatural, [
                x
            ], y);
        }
        if (!Array.isArray(y)) {
            return compareMatricesAndArrays(compareNatural, x, [
                y
            ]);
        }
        return compareArrays(compareNatural, x, y);
    }
    /**
   * Compare two Arrays
   *
   * - First, compares value by value
   * - Next, if all corresponding values are equal,
   *   look at the length: longest array will be considered largest
   *
   * @param {Array} x
   * @param {Array} y
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */ function compareArrays(compareNatural, x, y) {
        // compare each value
        for(var i = 0, ii = Math.min(x.length, y.length); i < ii; i++){
            var v = compareNatural(x[i], y[i]);
            if (v !== 0) {
                return v;
            }
        }
        // compare the size of the arrays
        if (x.length > y.length) {
            return 1;
        }
        if (x.length < y.length) {
            return -1;
        }
        // both Arrays have equal size and content
        return 0;
    }
    /**
   * Compare two objects
   *
   * - First, compare sorted property names
   * - Next, compare the property values
   *
   * @param {Object} x
   * @param {Object} y
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */ function compareObjects(compareNatural, x, y) {
        var keysX = Object.keys(x);
        var keysY = Object.keys(y);
        // compare keys
        keysX.sort(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$javascript$2d$natural$2d$sort$2f$naturalSort$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]);
        keysY.sort(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$javascript$2d$natural$2d$sort$2f$naturalSort$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]);
        var c = compareArrays(compareNatural, keysX, keysY);
        if (c !== 0) {
            return c;
        }
        // compare values
        for(var i = 0; i < keysX.length; i++){
            var v = compareNatural(x[keysX[i]], y[keysY[i]]);
            if (v !== 0) {
                return v;
            }
        }
        return 0;
    }
});
/**
 * Compare two complex numbers, `x` and `y`:
 *
 * - First, compare the real values of `x` and `y`
 * - If equal, compare the imaginary values of `x` and `y`
 *
 * @params {Complex} x
 * @params {Complex} y
 * @returns {number} Returns the comparison result: -1, 0, or 1
 */ function compareComplexNumbers(x, y) {
    if (x.re > y.re) {
        return 1;
    }
    if (x.re < y.re) {
        return -1;
    }
    if (x.im > y.im) {
        return 1;
    }
    if (x.im < y.im) {
        return -1;
    }
    return 0;
}
}}),
"[project]/node_modules/mathjs/lib/esm/function/relational/compareText.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createCompareText": (()=>createCompareText),
    "createCompareTextNumber": (()=>createCompareTextNumber)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/string.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matrixAlgorithmSuite.js [app-ssr] (ecmascript)");
;
;
;
var name = 'compareText';
var dependencies = [
    'typed',
    'matrix',
    'concat'
];
__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["compareText"].signature = 'any, any';
var createCompareText = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, matrix, concat } = _ref;
    var matrixAlgorithmSuite = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatrixAlgorithmSuite"])({
        typed,
        matrix,
        concat
    });
    /**
   * Compare two strings lexically. Comparison is case sensitive.
   * Returns 1 when x > y, -1 when x < y, and 0 when x == y.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.compareText(x, y)
   *
   * Examples:
   *
   *    math.compareText('B', 'A')     // returns 1
   *    math.compareText('2', '10')    // returns 1
   *    math.compare('2', '10')        // returns -1
   *    math.compareNatural('2', '10') // returns -1
   *
   *    math.compareText('B', ['A', 'B', 'C']) // returns [1, 0, -1]
   *
   * See also:
   *
   *    equal, equalText, compare, compareNatural
   *
   * @param  {string | Array | DenseMatrix} x First string to compare
   * @param  {string | Array | DenseMatrix} y Second string to compare
   * @return {number | Array | DenseMatrix} Returns the result of the comparison:
   *                                        1 when x > y, -1 when x < y, and 0 when x == y.
   */ return typed(name, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["compareText"], matrixAlgorithmSuite({
        elop: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["compareText"],
        Ds: true
    }));
});
var createCompareTextNumber = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, [
    'typed'
], (_ref2)=>{
    var { typed } = _ref2;
    return typed(name, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["compareText"]);
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/relational/equal.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createEqual": (()=>createEqual),
    "createEqualNumber": (()=>createEqualNumber)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo03xDSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo03xDSf.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo07xSSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo07xSSf.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo12xSfs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo12xSfs.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matrixAlgorithmSuite.js [app-ssr] (ecmascript)");
;
;
;
;
;
var name = 'equal';
var dependencies = [
    'typed',
    'matrix',
    'equalScalar',
    'DenseMatrix',
    'concat'
];
var createEqual = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, matrix, equalScalar, DenseMatrix, concat } = _ref;
    var matAlgo03xDSf = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo03xDSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo03xDSf"])({
        typed
    });
    var matAlgo07xSSf = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo07xSSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo07xSSf"])({
        typed,
        DenseMatrix
    });
    var matAlgo12xSfs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo12xSfs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo12xSfs"])({
        typed,
        DenseMatrix
    });
    var matrixAlgorithmSuite = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatrixAlgorithmSuite"])({
        typed,
        matrix,
        concat
    });
    /**
   * Test whether two values are equal.
   *
   * The function tests whether the relative difference between x and y is
   * smaller than the configured relTol and absTol. The function cannot be used to
   * compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.
   *
   * Values `null` and `undefined` are compared strictly, thus `null` is only
   * equal to `null` and nothing else, and `undefined` is only equal to
   * `undefined` and nothing else. Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.equal(x, y)
   *
   * Examples:
   *
   *    math.equal(2 + 2, 3)         // returns false
   *    math.equal(2 + 2, 4)         // returns true
   *
   *    const a = math.unit('50 cm')
   *    const b = math.unit('5 m')
   *    math.equal(a, b)             // returns true
   *
   *    const c = [2, 5, 1]
   *    const d = [2, 7, 1]
   *
   *    math.equal(c, d)             // returns [true, false, true]
   *    math.deepEqual(c, d)         // returns false
   *
   *    math.equal("1000", "1e3")    // returns true
   *    math.equal(0, null)          // returns false
   *
   * See also:
   *
   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual, equalText
   *
   * @param  {number | BigNumber | bigint | boolean | Complex | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | bigint | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false
   */ return typed(name, createEqualNumber({
        typed,
        equalScalar
    }), matrixAlgorithmSuite({
        elop: equalScalar,
        SS: matAlgo07xSSf,
        DS: matAlgo03xDSf,
        Ss: matAlgo12xSfs
    }));
});
var createEqualNumber = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, [
    'typed',
    'equalScalar'
], (_ref2)=>{
    var { typed, equalScalar } = _ref2;
    return typed(name, {
        'any, any': function any_any(x, y) {
            // strict equality for null and undefined?
            if (x === null) {
                return y === null;
            }
            if (y === null) {
                return x === null;
            }
            if (x === undefined) {
                return y === undefined;
            }
            if (y === undefined) {
                return x === undefined;
            }
            return equalScalar(x, y);
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/relational/equalText.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createEqualText": (()=>createEqualText)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
var name = 'equalText';
var dependencies = [
    'typed',
    'compareText',
    'isZero'
];
var createEqualText = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, compareText, isZero } = _ref;
    /**
   * Check equality of two strings. Comparison is case sensitive.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.equalText(x, y)
   *
   * Examples:
   *
   *    math.equalText('Hello', 'Hello')     // returns true
   *    math.equalText('a', 'A')             // returns false
   *    math.equal('2e3', '2000')            // returns true
   *    math.equalText('2e3', '2000')        // returns false
   *
   *    math.equalText('B', ['A', 'B', 'C']) // returns [false, true, false]
   *
   * See also:
   *
   *    equal, compareText, compare, compareNatural
   *
   * @param  {string | Array | DenseMatrix} x First string to compare
   * @param  {string | Array | DenseMatrix} y Second string to compare
   * @return {number | Array | DenseMatrix} Returns true if the values are equal, and false if not.
   */ return typed(name, {
        'any, any': function any_any(x, y) {
            return isZero(compareText(x, y));
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/relational/smaller.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createSmaller": (()=>createSmaller),
    "createSmallerNumber": (()=>createSmallerNumber)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$nearlyEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/bignumber/nearlyEqual.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/number.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo03xDSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo03xDSf.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo07xSSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo07xSSf.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo12xSfs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo12xSfs.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matrixAlgorithmSuite.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$relational$2f$compareUnits$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/relational/compareUnits.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
var name = 'smaller';
var dependencies = [
    'typed',
    'config',
    'matrix',
    'DenseMatrix',
    'concat'
];
var createSmaller = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config, matrix, DenseMatrix, concat } = _ref;
    var matAlgo03xDSf = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo03xDSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo03xDSf"])({
        typed
    });
    var matAlgo07xSSf = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo07xSSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo07xSSf"])({
        typed,
        DenseMatrix
    });
    var matAlgo12xSfs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo12xSfs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo12xSfs"])({
        typed,
        DenseMatrix
    });
    var matrixAlgorithmSuite = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatrixAlgorithmSuite"])({
        typed,
        matrix,
        concat
    });
    var compareUnits = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$relational$2f$compareUnits$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createCompareUnits"])({
        typed
    });
    /**
   * Test whether value x is smaller than y.
   *
   * The function returns true when x is smaller than y and the relative
   * difference between x and y is smaller than the configured relTol and absTol. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.smaller(x, y)
   *
   * Examples:
   *
   *    math.smaller(2, 3)            // returns true
   *    math.smaller(5, 2 * 2)        // returns false
   *
   *    const a = math.unit('5 cm')
   *    const b = math.unit('2 inch')
   *    math.smaller(a, b)            // returns true
   *
   * See also:
   *
   *    equal, unequal, smallerEq, smaller, smallerEq, compare
   *
   * @param  {number | BigNumber | bigint | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | bigint | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
   */ return typed(name, createSmallerNumber({
        typed,
        config
    }), {
        'boolean, boolean': (x, y)=>x < y,
        'BigNumber, BigNumber': function BigNumber_BigNumber(x, y) {
            return x.lt(y) && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$nearlyEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nearlyEqual"])(x, y, config.relTol, config.absTol);
        },
        'bigint, bigint': (x, y)=>x < y,
        'Fraction, Fraction': (x, y)=>x.compare(y) === -1,
        'Complex, Complex': function Complex_Complex(x, y) {
            throw new TypeError('No ordering relation is defined for complex numbers');
        }
    }, compareUnits, matrixAlgorithmSuite({
        SS: matAlgo07xSSf,
        DS: matAlgo03xDSf,
        Ss: matAlgo12xSfs
    }));
});
var createSmallerNumber = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, [
    'typed',
    'config'
], (_ref2)=>{
    var { typed, config } = _ref2;
    return typed(name, {
        'number, number': function number_number(x, y) {
            return x < y && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nearlyEqual"])(x, y, config.relTol, config.absTol);
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/relational/smallerEq.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createSmallerEq": (()=>createSmallerEq),
    "createSmallerEqNumber": (()=>createSmallerEqNumber)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$nearlyEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/bignumber/nearlyEqual.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/number.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo03xDSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo03xDSf.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo07xSSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo07xSSf.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo12xSfs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo12xSfs.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matrixAlgorithmSuite.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$relational$2f$compareUnits$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/relational/compareUnits.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
var name = 'smallerEq';
var dependencies = [
    'typed',
    'config',
    'matrix',
    'DenseMatrix',
    'concat'
];
var createSmallerEq = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config, matrix, DenseMatrix, concat } = _ref;
    var matAlgo03xDSf = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo03xDSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo03xDSf"])({
        typed
    });
    var matAlgo07xSSf = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo07xSSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo07xSSf"])({
        typed,
        DenseMatrix
    });
    var matAlgo12xSfs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo12xSfs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo12xSfs"])({
        typed,
        DenseMatrix
    });
    var matrixAlgorithmSuite = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatrixAlgorithmSuite"])({
        typed,
        matrix,
        concat
    });
    var compareUnits = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$relational$2f$compareUnits$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createCompareUnits"])({
        typed
    });
    /**
   * Test whether value x is smaller or equal to y.
   *
   * The function returns true when x is smaller than y or the relative
   * difference between x and y is smaller than the configured relTol and absTol. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.smallerEq(x, y)
   *
   * Examples:
   *
   *    math.smaller(1 + 2, 3)        // returns false
   *    math.smallerEq(1 + 2, 3)      // returns true
   *
   * See also:
   *
   *    equal, unequal, smaller, larger, largerEq, compare
   *
   * @param  {number | BigNumber | bigint | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | bigint | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
   */ return typed(name, createSmallerEqNumber({
        typed,
        config
    }), {
        'boolean, boolean': (x, y)=>x <= y,
        'BigNumber, BigNumber': function BigNumber_BigNumber(x, y) {
            return x.lte(y) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$nearlyEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nearlyEqual"])(x, y, config.relTol, config.absTol);
        },
        'bigint, bigint': (x, y)=>x <= y,
        'Fraction, Fraction': (x, y)=>x.compare(y) !== 1,
        'Complex, Complex': function Complex_Complex() {
            throw new TypeError('No ordering relation is defined for complex numbers');
        }
    }, compareUnits, matrixAlgorithmSuite({
        SS: matAlgo07xSSf,
        DS: matAlgo03xDSf,
        Ss: matAlgo12xSfs
    }));
});
var createSmallerEqNumber = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, [
    'typed',
    'config'
], (_ref2)=>{
    var { typed, config } = _ref2;
    return typed(name, {
        'number, number': function number_number(x, y) {
            return x <= y || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nearlyEqual"])(x, y, config.relTol, config.absTol);
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/relational/larger.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createLarger": (()=>createLarger),
    "createLargerNumber": (()=>createLargerNumber)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$nearlyEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/bignumber/nearlyEqual.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/number.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo03xDSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo03xDSf.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo07xSSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo07xSSf.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo12xSfs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo12xSfs.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matrixAlgorithmSuite.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$relational$2f$compareUnits$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/relational/compareUnits.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
var name = 'larger';
var dependencies = [
    'typed',
    'config',
    'matrix',
    'DenseMatrix',
    'concat'
];
var createLarger = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config, matrix, DenseMatrix, concat } = _ref;
    var matAlgo03xDSf = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo03xDSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo03xDSf"])({
        typed
    });
    var matAlgo07xSSf = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo07xSSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo07xSSf"])({
        typed,
        DenseMatrix
    });
    var matAlgo12xSfs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo12xSfs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo12xSfs"])({
        typed,
        DenseMatrix
    });
    var matrixAlgorithmSuite = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatrixAlgorithmSuite"])({
        typed,
        matrix,
        concat
    });
    var compareUnits = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$relational$2f$compareUnits$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createCompareUnits"])({
        typed
    });
    /**
   * Test whether value x is larger than y.
   *
   * The function returns true when x is larger than y and the relative
   * difference between x and y is larger than the configured relTol and absTol. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.larger(x, y)
   *
   * Examples:
   *
   *    math.larger(2, 3)             // returns false
   *    math.larger(5, 2 + 2)         // returns true
   *
   *    const a = math.unit('5 cm')
   *    const b = math.unit('2 inch')
   *    math.larger(a, b)             // returns false
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, largerEq, compare
   *
   * @param  {number | BigNumber | bigint | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | bigint | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false
   */ return typed(name, createLargerNumber({
        typed,
        config
    }), {
        'boolean, boolean': (x, y)=>x > y,
        'BigNumber, BigNumber': function BigNumber_BigNumber(x, y) {
            return x.gt(y) && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$nearlyEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nearlyEqual"])(x, y, config.relTol, config.absTol);
        },
        'bigint, bigint': (x, y)=>x > y,
        'Fraction, Fraction': (x, y)=>x.compare(y) === 1,
        'Complex, Complex': function Complex_Complex() {
            throw new TypeError('No ordering relation is defined for complex numbers');
        }
    }, compareUnits, matrixAlgorithmSuite({
        SS: matAlgo07xSSf,
        DS: matAlgo03xDSf,
        Ss: matAlgo12xSfs
    }));
});
var createLargerNumber = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, [
    'typed',
    'config'
], (_ref2)=>{
    var { typed, config } = _ref2;
    return typed(name, {
        'number, number': function number_number(x, y) {
            return x > y && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nearlyEqual"])(x, y, config.relTol, config.absTol);
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/relational/largerEq.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createLargerEq": (()=>createLargerEq),
    "createLargerEqNumber": (()=>createLargerEqNumber)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$nearlyEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/bignumber/nearlyEqual.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/number.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo03xDSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo03xDSf.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo07xSSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo07xSSf.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo12xSfs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo12xSfs.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matrixAlgorithmSuite.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$relational$2f$compareUnits$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/relational/compareUnits.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
var name = 'largerEq';
var dependencies = [
    'typed',
    'config',
    'matrix',
    'DenseMatrix',
    'concat'
];
var createLargerEq = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config, matrix, DenseMatrix, concat } = _ref;
    var matAlgo03xDSf = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo03xDSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo03xDSf"])({
        typed
    });
    var matAlgo07xSSf = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo07xSSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo07xSSf"])({
        typed,
        DenseMatrix
    });
    var matAlgo12xSfs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo12xSfs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo12xSfs"])({
        typed,
        DenseMatrix
    });
    var matrixAlgorithmSuite = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatrixAlgorithmSuite"])({
        typed,
        matrix,
        concat
    });
    var compareUnits = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$relational$2f$compareUnits$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createCompareUnits"])({
        typed
    });
    /**
   * Test whether value x is larger or equal to y.
   *
   * The function returns true when x is larger than y or the relative
   * difference between x and y is smaller than the configured relTol and absTol. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.largerEq(x, y)
   *
   * Examples:
   *
   *    math.larger(2, 1 + 1)         // returns false
   *    math.largerEq(2, 1 + 1)       // returns true
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, larger, compare
   *
   * @param  {number | BigNumber | bigint | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | bigint | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false
   */ return typed(name, createLargerEqNumber({
        typed,
        config
    }), {
        'boolean, boolean': (x, y)=>x >= y,
        'BigNumber, BigNumber': function BigNumber_BigNumber(x, y) {
            return x.gte(y) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$nearlyEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nearlyEqual"])(x, y, config.relTol, config.absTol);
        },
        'bigint, bigint': function bigint_bigint(x, y) {
            return x >= y;
        },
        'Fraction, Fraction': (x, y)=>x.compare(y) !== -1,
        'Complex, Complex': function Complex_Complex() {
            throw new TypeError('No ordering relation is defined for complex numbers');
        }
    }, compareUnits, matrixAlgorithmSuite({
        SS: matAlgo07xSSf,
        DS: matAlgo03xDSf,
        Ss: matAlgo12xSfs
    }));
});
var createLargerEqNumber = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, [
    'typed',
    'config'
], (_ref2)=>{
    var { typed, config } = _ref2;
    return typed(name, {
        'number, number': function number_number(x, y) {
            return x >= y || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nearlyEqual"])(x, y, config.relTol, config.absTol);
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/relational/deepEqual.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createDeepEqual": (()=>createDeepEqual)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
var name = 'deepEqual';
var dependencies = [
    'typed',
    'equal'
];
var createDeepEqual = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, equal } = _ref;
    /**
   * Test element wise whether two matrices are equal.
   * The function accepts both matrices and scalar values.
   *
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.deepEqual(x, y)
   *
   * Examples:
   *
   *    math.deepEqual(2, 4)   // returns false
   *
   *    a = [2, 5, 1]
   *    b = [2, 7, 1]
   *
   *    math.deepEqual(a, b)   // returns false
   *    math.equal(a, b)       // returns [true, false, true]
   *
   * See also:
   *
   *    equal, unequal
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
   *            Returns true when the input matrices have the same size and each of their elements is equal.
   */ return typed(name, {
        'any, any': function any_any(x, y) {
            return _deepEqual(x.valueOf(), y.valueOf());
        }
    });
    "TURBOPACK unreachable";
    /**
   * Test whether two arrays have the same size and all elements are equal
   * @param {Array | *} x
   * @param {Array | *} y
   * @return {boolean} Returns true if both arrays are deep equal
   */ function _deepEqual(x, y) {
        if (Array.isArray(x)) {
            if (Array.isArray(y)) {
                var len = x.length;
                if (len !== y.length) {
                    return false;
                }
                for(var i = 0; i < len; i++){
                    if (!_deepEqual(x[i], y[i])) {
                        return false;
                    }
                }
                return true;
            } else {
                return false;
            }
        } else {
            if (Array.isArray(y)) {
                return false;
            } else {
                return equal(x, y);
            }
        }
    }
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/relational/unequal.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createUnequal": (()=>createUnequal),
    "createUnequalNumber": (()=>createUnequalNumber)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo03xDSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo03xDSf.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo07xSSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo07xSSf.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo12xSfs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo12xSfs.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matrixAlgorithmSuite.js [app-ssr] (ecmascript)");
;
;
;
;
;
var name = 'unequal';
var dependencies = [
    'typed',
    'config',
    'equalScalar',
    'matrix',
    'DenseMatrix',
    'concat'
];
var createUnequal = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config, equalScalar, matrix, DenseMatrix, concat } = _ref;
    var matAlgo03xDSf = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo03xDSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo03xDSf"])({
        typed
    });
    var matAlgo07xSSf = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo07xSSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo07xSSf"])({
        typed,
        DenseMatrix
    });
    var matAlgo12xSfs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo12xSfs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo12xSfs"])({
        typed,
        DenseMatrix
    });
    var matrixAlgorithmSuite = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatrixAlgorithmSuite"])({
        typed,
        matrix,
        concat
    });
    /**
   * Test whether two values are unequal.
   *
   * The function tests whether the relative difference between x and y is
   * larger than the configured relTol and absTol. The function cannot be used to compare
   * values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.
   * Strings are compared by their numerical value.
   *
   * Values `null` and `undefined` are compared strictly, thus `null` is unequal
   * with everything except `null`, and `undefined` is unequal with everything
   * except `undefined`.
   *
   * Syntax:
   *
   *    math.unequal(x, y)
   *
   * Examples:
   *
   *    math.unequal(2 + 2, 3)       // returns true
   *    math.unequal(2 + 2, 4)       // returns false
   *
   *    const a = math.unit('50 cm')
   *    const b = math.unit('5 m')
   *    math.unequal(a, b)           // returns false
   *
   *    const c = [2, 5, 1]
   *    const d = [2, 7, 1]
   *
   *    math.unequal(c, d)           // returns [false, true, false]
   *    math.deepEqual(c, d)         // returns false
   *
   *    math.unequal(0, null)        // returns true
   * See also:
   *
   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false
   */ return typed(name, createUnequalNumber({
        typed,
        equalScalar
    }), matrixAlgorithmSuite({
        elop: _unequal,
        SS: matAlgo07xSSf,
        DS: matAlgo03xDSf,
        Ss: matAlgo12xSfs
    }));
    "TURBOPACK unreachable";
    function _unequal(x, y) {
        return !equalScalar(x, y);
    }
});
var createUnequalNumber = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, [
    'typed',
    'equalScalar'
], (_ref2)=>{
    var { typed, equalScalar } = _ref2;
    return typed(name, {
        'any, any': function any_any(x, y) {
            // strict equality for null and undefined?
            if (x === null) {
                return y !== null;
            }
            if (y === null) {
                return x !== null;
            }
            if (x === undefined) {
                return y !== undefined;
            }
            if (y === undefined) {
                return x !== undefined;
            }
            return !equalScalar(x, y);
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/bitwise/bitAnd.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createBitAnd": (()=>createBitAnd)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$bitwise$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/bignumber/bitwise.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo02xDS0$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo02xDS0.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo11xS0s$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo11xS0s.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo06xS0S0$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo06xS0S0.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matrixAlgorithmSuite.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$bitwise$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/bitwise.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
var name = 'bitAnd';
var dependencies = [
    'typed',
    'matrix',
    'equalScalar',
    'concat'
];
var createBitAnd = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, matrix, equalScalar, concat } = _ref;
    var matAlgo02xDS0 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo02xDS0$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo02xDS0"])({
        typed,
        equalScalar
    });
    var matAlgo06xS0S0 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo06xS0S0$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo06xS0S0"])({
        typed,
        equalScalar
    });
    var matAlgo11xS0s = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo11xS0s$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo11xS0s"])({
        typed,
        equalScalar
    });
    var matrixAlgorithmSuite = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatrixAlgorithmSuite"])({
        typed,
        matrix,
        concat
    });
    /**
   * Bitwise AND two values, `x & y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.bitAnd(x, y)
   *
   * Examples:
   *
   *    math.bitAnd(53, 131)               // returns number 1
   *
   *    math.bitAnd([1, 12, 31], 42)       // returns Array [0, 8, 10]
   *
   * See also:
   *
   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | bigint | Array | Matrix} x First value to and
   * @param  {number | BigNumber | bigint | Array | Matrix} y Second value to and
   * @return {number | BigNumber | bigint | Array | Matrix} AND of `x` and `y`
   */ return typed(name, {
        'number, number': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$bitwise$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bitAndNumber"],
        'BigNumber, BigNumber': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$bitwise$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bitAndBigNumber"],
        'bigint, bigint': (x, y)=>x & y
    }, matrixAlgorithmSuite({
        SS: matAlgo06xS0S0,
        DS: matAlgo02xDS0,
        Ss: matAlgo11xS0s
    }));
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/bitwise/bitNot.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createBitNot": (()=>createBitNot)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$bitwise$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/bignumber/bitwise.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/collection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$bitwise$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/bitwise.js [app-ssr] (ecmascript)");
;
;
;
;
var name = 'bitNot';
var dependencies = [
    'typed'
];
var createBitNot = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed } = _ref;
    /**
   * Bitwise NOT value, `~x`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.bitNot(x)
   *
   * Examples:
   *
   *    math.bitNot(1)               // returns number -2
   *
   *    math.bitNot([2, -3, 4])      // returns Array [-3, 2, -5]
   *
   * See also:
   *
   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | bigint | Array | Matrix} x Value to not
   * @return {number | BigNumber | bigint | Array | Matrix} NOT of `x`
   */ return typed(name, {
        number: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$bitwise$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bitNotNumber"],
        BigNumber: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$bitwise$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bitNotBigNumber"],
        bigint: (x)=>~x,
        'Array | Matrix': typed.referToSelf((self)=>(x)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepMap"])(x, self))
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/bitwise/bitOr.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createBitOr": (()=>createBitOr)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$bitwise$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/bignumber/bitwise.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo10xSids$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo10xSids.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo04xSidSid$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo04xSidSid.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo01xDSid$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo01xDSid.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matrixAlgorithmSuite.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$bitwise$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/bitwise.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
var name = 'bitOr';
var dependencies = [
    'typed',
    'matrix',
    'equalScalar',
    'DenseMatrix',
    'concat'
];
var createBitOr = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, matrix, equalScalar, DenseMatrix, concat } = _ref;
    var matAlgo01xDSid = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo01xDSid$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo01xDSid"])({
        typed
    });
    var matAlgo04xSidSid = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo04xSidSid$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo04xSidSid"])({
        typed,
        equalScalar
    });
    var matAlgo10xSids = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo10xSids$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo10xSids"])({
        typed,
        DenseMatrix
    });
    var matrixAlgorithmSuite = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatrixAlgorithmSuite"])({
        typed,
        matrix,
        concat
    });
    /**
   * Bitwise OR two values, `x | y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the lowest print base.
   *
   * Syntax:
   *
   *    math.bitOr(x, y)
   *
   * Examples:
   *
   *    math.bitOr(1, 2)               // returns number 3
   *
   *    math.bitOr([1, 2, 3], 4)       // returns Array [5, 6, 7]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | bigint | Array | Matrix} x First value to or
   * @param  {number | BigNumber | bigint | Array | Matrix} y Second value to or
   * @return {number | BigNumber | bigint | Array | Matrix} OR of `x` and `y`
   */ return typed(name, {
        'number, number': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$bitwise$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bitOrNumber"],
        'BigNumber, BigNumber': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$bitwise$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bitOrBigNumber"],
        'bigint, bigint': (x, y)=>x | y
    }, matrixAlgorithmSuite({
        SS: matAlgo04xSidSid,
        DS: matAlgo01xDSid,
        Ss: matAlgo10xSids
    }));
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/bitwise/bitXor.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createBitXor": (()=>createBitXor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$bitwise$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/bignumber/bitwise.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo03xDSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo03xDSf.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo07xSSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo07xSSf.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo12xSfs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo12xSfs.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matrixAlgorithmSuite.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$bitwise$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/bitwise.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
var name = 'bitXor';
var dependencies = [
    'typed',
    'matrix',
    'DenseMatrix',
    'concat'
];
var createBitXor = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, matrix, DenseMatrix, concat } = _ref;
    var matAlgo03xDSf = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo03xDSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo03xDSf"])({
        typed
    });
    var matAlgo07xSSf = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo07xSSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo07xSSf"])({
        typed,
        DenseMatrix
    });
    var matAlgo12xSfs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo12xSfs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo12xSfs"])({
        typed,
        DenseMatrix
    });
    var matrixAlgorithmSuite = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatrixAlgorithmSuite"])({
        typed,
        matrix,
        concat
    });
    /**
   * Bitwise XOR two values, `x ^ y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.bitXor(x, y)
   *
   * Examples:
   *
   *    math.bitXor(1, 2)               // returns number 3
   *
   *    math.bitXor([2, 3, 4], 4)       // returns Array [6, 7, 0]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitOr, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | bigint | Array | Matrix} x First value to xor
   * @param  {number | BigNumber | bigint | Array | Matrix} y Second value to xor
   * @return {number | BigNumber | bigint | Array | Matrix} XOR of `x` and `y`
   */ return typed(name, {
        'number, number': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$bitwise$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bitXorNumber"],
        'BigNumber, BigNumber': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$bitwise$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bitXor"],
        'bigint, bigint': (x, y)=>x ^ y
    }, matrixAlgorithmSuite({
        SS: matAlgo07xSSf,
        DS: matAlgo03xDSf,
        Ss: matAlgo12xSfs
    }));
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/bitwise/useMatrixForArrayScalar.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createUseMatrixForArrayScalar": (()=>createUseMatrixForArrayScalar)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
var createUseMatrixForArrayScalar = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])('useMatrixForArrayScalar', [
    'typed',
    'matrix'
], (_ref)=>{
    var { typed, matrix } = _ref;
    return {
        'Array, number': typed.referTo('DenseMatrix, number', (selfDn)=>(x, y)=>selfDn(matrix(x), y).valueOf()),
        'Array, BigNumber': typed.referTo('DenseMatrix, BigNumber', (selfDB)=>(x, y)=>selfDB(matrix(x), y).valueOf()),
        'number, Array': typed.referTo('number, DenseMatrix', (selfnD)=>(x, y)=>selfnD(x, matrix(y)).valueOf()),
        'BigNumber, Array': typed.referTo('BigNumber, DenseMatrix', (selfBD)=>(x, y)=>selfBD(x, matrix(y)).valueOf())
    };
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/bitwise/leftShift.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createLeftShift": (()=>createLeftShift)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo02xDS0$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo02xDS0.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo11xS0s$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo11xS0s.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo14xDs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo14xDs.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo01xDSid$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo01xDSid.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo10xSids$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo10xSids.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo08xS0Sid$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo08xS0Sid.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matrixAlgorithmSuite.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$bitwise$2f$useMatrixForArrayScalar$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/bitwise/useMatrixForArrayScalar.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$bitwise$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/bitwise.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$bitwise$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/bignumber/bitwise.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
var name = 'leftShift';
var dependencies = [
    'typed',
    'matrix',
    'equalScalar',
    'zeros',
    'DenseMatrix',
    'concat'
];
var createLeftShift = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, matrix, equalScalar, zeros, DenseMatrix, concat } = _ref;
    var matAlgo01xDSid = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo01xDSid$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo01xDSid"])({
        typed
    });
    var matAlgo02xDS0 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo02xDS0$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo02xDS0"])({
        typed,
        equalScalar
    });
    var matAlgo08xS0Sid = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo08xS0Sid$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo08xS0Sid"])({
        typed,
        equalScalar
    });
    var matAlgo10xSids = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo10xSids$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo10xSids"])({
        typed,
        DenseMatrix
    });
    var matAlgo11xS0s = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo11xS0s$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo11xS0s"])({
        typed,
        equalScalar
    });
    var matAlgo14xDs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo14xDs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo14xDs"])({
        typed
    });
    var matrixAlgorithmSuite = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatrixAlgorithmSuite"])({
        typed,
        matrix,
        concat
    });
    var useMatrixForArrayScalar = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$bitwise$2f$useMatrixForArrayScalar$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createUseMatrixForArrayScalar"])({
        typed,
        matrix
    });
    /**
   * Bitwise left logical shift of a value x by y number of bits, `x << y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.leftShift(x, y)
   *
   * Examples:
   *
   *    math.leftShift(1, 2)               // returns number 4
   *
   *    math.leftShift([1, 2, 4], 4)       // returns Array [16, 32, 64]
   *
   * See also:
   *
   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | bigint | Array | Matrix} x Value to be shifted
   * @param  {number | BigNumber | bigint} y Amount of shifts
   * @return {number | BigNumber | bigint | Array | Matrix} `x` shifted left `y` times
   */ return typed(name, {
        'number, number': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$bitwise$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["leftShiftNumber"],
        'BigNumber, BigNumber': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$bitwise$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["leftShiftBigNumber"],
        'bigint, bigint': (x, y)=>x << y,
        'SparseMatrix, number | BigNumber': typed.referToSelf((self)=>(x, y)=>{
                // check scalar
                if (equalScalar(y, 0)) {
                    return x.clone();
                }
                return matAlgo11xS0s(x, y, self, false);
            }),
        'DenseMatrix, number | BigNumber': typed.referToSelf((self)=>(x, y)=>{
                // check scalar
                if (equalScalar(y, 0)) {
                    return x.clone();
                }
                return matAlgo14xDs(x, y, self, false);
            }),
        'number | BigNumber, SparseMatrix': typed.referToSelf((self)=>(x, y)=>{
                // check scalar
                if (equalScalar(x, 0)) {
                    return zeros(y.size(), y.storage());
                }
                return matAlgo10xSids(y, x, self, true);
            }),
        'number | BigNumber, DenseMatrix': typed.referToSelf((self)=>(x, y)=>{
                // check scalar
                if (equalScalar(x, 0)) {
                    return zeros(y.size(), y.storage());
                }
                return matAlgo14xDs(y, x, self, true);
            })
    }, useMatrixForArrayScalar, matrixAlgorithmSuite({
        SS: matAlgo08xS0Sid,
        DS: matAlgo01xDSid,
        SD: matAlgo02xDS0
    }));
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/bitwise/rightArithShift.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createRightArithShift": (()=>createRightArithShift)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$bitwise$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/bignumber/bitwise.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo02xDS0$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo02xDS0.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo11xS0s$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo11xS0s.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo14xDs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo14xDs.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo01xDSid$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo01xDSid.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo10xSids$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo10xSids.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo08xS0Sid$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo08xS0Sid.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matrixAlgorithmSuite.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$bitwise$2f$useMatrixForArrayScalar$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/bitwise/useMatrixForArrayScalar.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$bitwise$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/bitwise.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
var name = 'rightArithShift';
var dependencies = [
    'typed',
    'matrix',
    'equalScalar',
    'zeros',
    'DenseMatrix',
    'concat'
];
var createRightArithShift = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, matrix, equalScalar, zeros, DenseMatrix, concat } = _ref;
    var matAlgo01xDSid = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo01xDSid$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo01xDSid"])({
        typed
    });
    var matAlgo02xDS0 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo02xDS0$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo02xDS0"])({
        typed,
        equalScalar
    });
    var matAlgo08xS0Sid = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo08xS0Sid$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo08xS0Sid"])({
        typed,
        equalScalar
    });
    var matAlgo10xSids = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo10xSids$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo10xSids"])({
        typed,
        DenseMatrix
    });
    var matAlgo11xS0s = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo11xS0s$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo11xS0s"])({
        typed,
        equalScalar
    });
    var matAlgo14xDs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo14xDs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo14xDs"])({
        typed
    });
    var matrixAlgorithmSuite = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatrixAlgorithmSuite"])({
        typed,
        matrix,
        concat
    });
    var useMatrixForArrayScalar = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$bitwise$2f$useMatrixForArrayScalar$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createUseMatrixForArrayScalar"])({
        typed,
        matrix
    });
    /**
   * Bitwise right arithmetic shift of a value x by y number of bits, `x >> y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.rightArithShift(x, y)
   *
   * Examples:
   *
   *    math.rightArithShift(4, 2)               // returns number 1
   *
   *    math.rightArithShift([16, -32, 64], 4)   // returns Array [1, -2, 4]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | bigint | Array | Matrix} x Value to be shifted
   * @param  {number | BigNumber | bigint} y Amount of shifts
   * @return {number | BigNumber | bigint | Array | Matrix} `x` zero-filled shifted right `y` times
   */ return typed(name, {
        'number, number': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$bitwise$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["rightArithShiftNumber"],
        'BigNumber, BigNumber': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$bignumber$2f$bitwise$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["rightArithShiftBigNumber"],
        'bigint, bigint': (x, y)=>x >> y,
        'SparseMatrix, number | BigNumber': typed.referToSelf((self)=>(x, y)=>{
                // check scalar
                if (equalScalar(y, 0)) {
                    return x.clone();
                }
                return matAlgo11xS0s(x, y, self, false);
            }),
        'DenseMatrix, number | BigNumber': typed.referToSelf((self)=>(x, y)=>{
                // check scalar
                if (equalScalar(y, 0)) {
                    return x.clone();
                }
                return matAlgo14xDs(x, y, self, false);
            }),
        'number | BigNumber, SparseMatrix': typed.referToSelf((self)=>(x, y)=>{
                // check scalar
                if (equalScalar(x, 0)) {
                    return zeros(y.size(), y.storage());
                }
                return matAlgo10xSids(y, x, self, true);
            }),
        'number | BigNumber, DenseMatrix': typed.referToSelf((self)=>(x, y)=>{
                // check scalar
                if (equalScalar(x, 0)) {
                    return zeros(y.size(), y.storage());
                }
                return matAlgo14xDs(y, x, self, true);
            })
    }, useMatrixForArrayScalar, matrixAlgorithmSuite({
        SS: matAlgo08xS0Sid,
        DS: matAlgo01xDSid,
        SD: matAlgo02xDS0
    }));
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/bitwise/rightLogShift.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createRightLogShift": (()=>createRightLogShift)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo02xDS0$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo02xDS0.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo11xS0s$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo11xS0s.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo14xDs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo14xDs.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo01xDSid$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo01xDSid.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo10xSids$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo10xSids.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo08xS0Sid$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo08xS0Sid.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matrixAlgorithmSuite.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$bitwise$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/bitwise.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$bitwise$2f$useMatrixForArrayScalar$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/bitwise/useMatrixForArrayScalar.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
var name = 'rightLogShift';
var dependencies = [
    'typed',
    'matrix',
    'equalScalar',
    'zeros',
    'DenseMatrix',
    'concat'
];
var createRightLogShift = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, matrix, equalScalar, zeros, DenseMatrix, concat } = _ref;
    var matAlgo01xDSid = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo01xDSid$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo01xDSid"])({
        typed
    });
    var matAlgo02xDS0 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo02xDS0$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo02xDS0"])({
        typed,
        equalScalar
    });
    var matAlgo08xS0Sid = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo08xS0Sid$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo08xS0Sid"])({
        typed,
        equalScalar
    });
    var matAlgo10xSids = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo10xSids$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo10xSids"])({
        typed,
        DenseMatrix
    });
    var matAlgo11xS0s = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo11xS0s$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo11xS0s"])({
        typed,
        equalScalar
    });
    var matAlgo14xDs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo14xDs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo14xDs"])({
        typed
    });
    var matrixAlgorithmSuite = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatrixAlgorithmSuite"])({
        typed,
        matrix,
        concat
    });
    var useMatrixForArrayScalar = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$bitwise$2f$useMatrixForArrayScalar$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createUseMatrixForArrayScalar"])({
        typed,
        matrix
    });
    /**
   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.rightLogShift(x, y)
   *
   * Examples:
   *
   *    math.rightLogShift(4, 2)               // returns number 1
   *
   *    math.rightLogShift([16, 32, 64], 4)    // returns Array [1, 2, 4]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift
   *
   * @param  {number | Array | Matrix} x Value to be shifted
   * @param  {number} y Amount of shifts
   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times
   */ return typed(name, {
        'number, number': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$bitwise$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["rightLogShiftNumber"],
        // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift
        'SparseMatrix, number | BigNumber': typed.referToSelf((self)=>(x, y)=>{
                // check scalar
                if (equalScalar(y, 0)) {
                    return x.clone();
                }
                return matAlgo11xS0s(x, y, self, false);
            }),
        'DenseMatrix, number | BigNumber': typed.referToSelf((self)=>(x, y)=>{
                // check scalar
                if (equalScalar(y, 0)) {
                    return x.clone();
                }
                return matAlgo14xDs(x, y, self, false);
            }),
        'number | BigNumber, SparseMatrix': typed.referToSelf((self)=>(x, y)=>{
                // check scalar
                if (equalScalar(x, 0)) {
                    return zeros(y.size(), y.storage());
                }
                return matAlgo10xSids(y, x, self, true);
            }),
        'number | BigNumber, DenseMatrix': typed.referToSelf((self)=>(x, y)=>{
                // check scalar
                if (equalScalar(x, 0)) {
                    return zeros(y.size(), y.storage());
                }
                return matAlgo14xDs(y, x, self, true);
            })
    }, useMatrixForArrayScalar, matrixAlgorithmSuite({
        SS: matAlgo08xS0Sid,
        DS: matAlgo01xDSid,
        SD: matAlgo02xDS0
    }));
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/complex/arg.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createArg": (()=>createArg)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/collection.js [app-ssr] (ecmascript)");
;
;
var name = 'arg';
var dependencies = [
    'typed'
];
var createArg = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed } = _ref;
    /**
   * Compute the argument of a complex value.
   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.arg(x)
   *
   * Examples:
   *
   *    const a = math.complex(2, 2)
   *    math.arg(a) / math.pi          // returns number 0.25
   *
   *    const b = math.complex('2 + 3i')
   *    math.arg(b)                    // returns number 0.982793723247329
   *    math.atan2(3, 2)               // returns number 0.982793723247329
   *
   * See also:
   *
   *    re, im, conj, abs
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Array | Matrix} The argument of x
   */ return typed(name, {
        number: function number(x) {
            return Math.atan2(0, x);
        },
        BigNumber: function BigNumber(x) {
            return x.constructor.atan2(0, x);
        },
        Complex: function Complex(x) {
            return x.arg();
        },
        // TODO: implement BigNumber support for function arg
        'Array | Matrix': typed.referToSelf((self)=>(x)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepMap"])(x, self))
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/complex/conj.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createConj": (()=>createConj)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/collection.js [app-ssr] (ecmascript)");
;
;
var name = 'conj';
var dependencies = [
    'typed'
];
var createConj = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed } = _ref;
    /**
   * Compute the complex conjugate of a complex value.
   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.conj(x)
   *
   * Examples:
   *
   *    math.conj(math.complex('2 + 3i'))  // returns Complex 2 - 3i
   *    math.conj(math.complex('2 - 3i'))  // returns Complex 2 + 3i
   *    math.conj(math.complex('-5.2i'))  // returns Complex 5.2i
   *
   * See also:
   *
   *    re, im, arg, abs
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            The complex conjugate of x
   */ return typed(name, {
        'number | BigNumber | Fraction': (x)=>x,
        Complex: (x)=>x.conjugate(),
        'Array | Matrix': typed.referToSelf((self)=>(x)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepMap"])(x, self))
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/complex/im.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createIm": (()=>createIm)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/collection.js [app-ssr] (ecmascript)");
;
;
var name = 'im';
var dependencies = [
    'typed'
];
var createIm = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed } = _ref;
    /**
   * Get the imaginary part of a complex number.
   * For a complex number `a + bi`, the function returns `b`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.im(x)
   *
   * Examples:
   *
   *    const a = math.complex(2, 3)
   *    math.re(a)                     // returns number 2
   *    math.im(a)                     // returns number 3
   *
   *    math.re(math.complex('-5.2i')) // returns number -5.2
   *    math.re(math.complex(2.4))     // returns number 0
   *
   * See also:
   *
   *    re, conj, abs, arg
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Array | Matrix} The imaginary part of x
   */ return typed(name, {
        number: ()=>0,
        'BigNumber | Fraction': (x)=>x.mul(0),
        Complex: (x)=>x.im,
        'Array | Matrix': typed.referToSelf((self)=>(x)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepMap"])(x, self))
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/complex/re.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createRe": (()=>createRe)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/collection.js [app-ssr] (ecmascript)");
;
;
var name = 're';
var dependencies = [
    'typed'
];
var createRe = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed } = _ref;
    /**
   * Get the real part of a complex number.
   * For a complex number `a + bi`, the function returns `a`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.re(x)
   *
   * Examples:
   *
   *    const a = math.complex(2, 3)
   *    math.re(a)                     // returns number 2
   *    math.im(a)                     // returns number 3
   *
   *    math.re(math.complex('-5.2i')) // returns number 0
   *    math.re(math.complex(2.4))     // returns number 2.4
   *
   * See also:
   *
   *    im, conj, abs, arg
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Array | Matrix} The real part of x
   */ return typed(name, {
        'number | BigNumber | Fraction': (x)=>x,
        Complex: (x)=>x.re,
        'Array | Matrix': typed.referToSelf((self)=>(x)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepMap"])(x, self))
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/logical/not.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNot": (()=>createNot)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/collection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$logical$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/logical.js [app-ssr] (ecmascript)");
;
;
;
var name = 'not';
var dependencies = [
    'typed'
];
var createNot = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed } = _ref;
    /**
   * Logical `not`. Flips boolean value of a given parameter.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.not(x)
   *
   * Examples:
   *
   *    math.not(2)      // returns false
   *    math.not(0)      // returns true
   *    math.not(true)   // returns false
   *
   *    a = [2, -7, 0]
   *    math.not(a)      // returns [false, false, true]
   *
   * See also:
   *
   *    and, or, xor
   *
   * @param  {number | BigNumber | bigint | Complex | Unit | Array | Matrix} x First value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when input is a zero or empty value.
   */ return typed(name, {
        'null | undefined': ()=>true,
        number: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$logical$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["notNumber"],
        Complex: function Complex(x) {
            return x.re === 0 && x.im === 0;
        },
        BigNumber: function BigNumber(x) {
            return x.isZero() || x.isNaN();
        },
        bigint: (x)=>!x,
        Unit: typed.referToSelf((self)=>(x)=>typed.find(self, x.valueType())(x.value)),
        'Array | Matrix': typed.referToSelf((self)=>(x)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepMap"])(x, self))
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/logical/or.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createOr": (()=>createOr)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo03xDSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo03xDSf.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo12xSfs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo12xSfs.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo05xSfSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo05xSfSf.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matrixAlgorithmSuite.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$logical$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/logical.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
var name = 'or';
var dependencies = [
    'typed',
    'matrix',
    'equalScalar',
    'DenseMatrix',
    'concat'
];
var createOr = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, matrix, equalScalar, DenseMatrix, concat } = _ref;
    var matAlgo03xDSf = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo03xDSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo03xDSf"])({
        typed
    });
    var matAlgo05xSfSf = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo05xSfSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo05xSfSf"])({
        typed,
        equalScalar
    });
    var matAlgo12xSfs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo12xSfs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo12xSfs"])({
        typed,
        DenseMatrix
    });
    var matrixAlgorithmSuite = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatrixAlgorithmSuite"])({
        typed,
        matrix,
        concat
    });
    /**
   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.or(x, y)
   *
   * Examples:
   *
   *    math.or(2, 4)   // returns true
   *
   *    a = [2, 5, 0]
   *    b = [0, 22, 0]
   *    c = 0
   *
   *    math.or(a, b)   // returns [true, true, false]
   *    math.or(b, c)   // returns [false, true, false]
   *
   * See also:
   *
   *    and, not, xor
   *
   * @param  {number | BigNumber | bigint | Complex | Unit | Array | Matrix} x First value to check
   * @param  {number | BigNumber | bigint | Complex | Unit | Array | Matrix} y Second value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.
   */ return typed(name, {
        'number, number': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$logical$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["orNumber"],
        'Complex, Complex': function Complex_Complex(x, y) {
            return x.re !== 0 || x.im !== 0 || y.re !== 0 || y.im !== 0;
        },
        'BigNumber, BigNumber': function BigNumber_BigNumber(x, y) {
            return !x.isZero() && !x.isNaN() || !y.isZero() && !y.isNaN();
        },
        'bigint, bigint': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$logical$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["orNumber"],
        'Unit, Unit': typed.referToSelf((self)=>(x, y)=>self(x.value || 0, y.value || 0))
    }, matrixAlgorithmSuite({
        SS: matAlgo05xSfSf,
        DS: matAlgo03xDSf,
        Ss: matAlgo12xSfs
    }));
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/logical/xor.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createXor": (()=>createXor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo03xDSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo03xDSf.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo07xSSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo07xSSf.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo12xSfs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo12xSfs.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matrixAlgorithmSuite.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$logical$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/logical.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
var name = 'xor';
var dependencies = [
    'typed',
    'matrix',
    'DenseMatrix',
    'concat'
];
var createXor = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, matrix, DenseMatrix, concat } = _ref;
    var matAlgo03xDSf = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo03xDSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo03xDSf"])({
        typed
    });
    var matAlgo07xSSf = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo07xSSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo07xSSf"])({
        typed,
        DenseMatrix
    });
    var matAlgo12xSfs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo12xSfs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo12xSfs"])({
        typed,
        DenseMatrix
    });
    var matrixAlgorithmSuite = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatrixAlgorithmSuite"])({
        typed,
        matrix,
        concat
    });
    /**
   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.xor(x, y)
   *
   * Examples:
   *
   *    math.xor(2, 4)   // returns false
   *
   *    a = [2, 0, 0]
   *    b = [2, 7, 0]
   *    c = 0
   *
   *    math.xor(a, b)   // returns [false, true, false]
   *    math.xor(a, c)   // returns [true, false, false]
   *
   * See also:
   *
   *    and, not, or
   *
   * @param  {number | BigNumber | bigint | Complex | Unit | Array | Matrix} x First value to check
   * @param  {number | BigNumber | bigint | Complex | Unit | Array | Matrix} y Second value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when one and only one input is defined with a nonzero/nonempty value.
   */ return typed(name, {
        'number, number': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$logical$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["xorNumber"],
        'Complex, Complex': function Complex_Complex(x, y) {
            return (x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0);
        },
        'bigint, bigint': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$logical$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["xorNumber"],
        'BigNumber, BigNumber': function BigNumber_BigNumber(x, y) {
            return (!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN());
        },
        'Unit, Unit': typed.referToSelf((self)=>(x, y)=>self(x.value || 0, y.value || 0))
    }, matrixAlgorithmSuite({
        SS: matAlgo07xSSf,
        DS: matAlgo03xDSf,
        Ss: matAlgo12xSfs
    }));
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/logical/and.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAnd": (()=>createAnd)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo02xDS0$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo02xDS0.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo11xS0s$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo11xS0s.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo14xDs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo14xDs.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo06xS0S0$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo06xS0S0.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matrixAlgorithmSuite.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$logical$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/logical.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
var name = 'and';
var dependencies = [
    'typed',
    'matrix',
    'equalScalar',
    'zeros',
    'not',
    'concat'
];
var createAnd = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, matrix, equalScalar, zeros, not, concat } = _ref;
    var matAlgo02xDS0 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo02xDS0$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo02xDS0"])({
        typed,
        equalScalar
    });
    var matAlgo06xS0S0 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo06xS0S0$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo06xS0S0"])({
        typed,
        equalScalar
    });
    var matAlgo11xS0s = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo11xS0s$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo11xS0s"])({
        typed,
        equalScalar
    });
    var matAlgo14xDs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo14xDs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo14xDs"])({
        typed
    });
    var matrixAlgorithmSuite = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatrixAlgorithmSuite"])({
        typed,
        matrix,
        concat
    });
    /**
   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.and(x, y)
   *
   * Examples:
   *
   *    math.and(2, 4)   // returns true
   *
   *    a = [2, 0, 0]
   *    b = [3, 7, 0]
   *    c = 0
   *
   *    math.and(a, b)   // returns [true, false, false]
   *    math.and(a, c)   // returns [false, false, false]
   *
   * See also:
   *
   *    not, or, xor
   *
   * @param  {number | BigNumber | bigint | Complex | Unit | Array | Matrix} x First value to check
   * @param  {number | BigNumber | bigint | Complex | Unit | Array | Matrix} y Second value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when both inputs are defined with a nonzero/nonempty value.
   */ return typed(name, {
        'number, number': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$logical$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["andNumber"],
        'Complex, Complex': function Complex_Complex(x, y) {
            return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);
        },
        'BigNumber, BigNumber': function BigNumber_BigNumber(x, y) {
            return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();
        },
        'bigint, bigint': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$logical$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["andNumber"],
        'Unit, Unit': typed.referToSelf((self)=>(x, y)=>self(x.value || 0, y.value || 0)),
        'SparseMatrix, any': typed.referToSelf((self)=>(x, y)=>{
                // check scalar
                if (not(y)) {
                    // return zero matrix
                    return zeros(x.size(), x.storage());
                }
                return matAlgo11xS0s(x, y, self, false);
            }),
        'DenseMatrix, any': typed.referToSelf((self)=>(x, y)=>{
                // check scalar
                if (not(y)) {
                    // return zero matrix
                    return zeros(x.size(), x.storage());
                }
                return matAlgo14xDs(x, y, self, false);
            }),
        'any, SparseMatrix': typed.referToSelf((self)=>(x, y)=>{
                // check scalar
                if (not(x)) {
                    // return zero matrix
                    return zeros(x.size(), x.storage());
                }
                return matAlgo11xS0s(y, x, self, true);
            }),
        'any, DenseMatrix': typed.referToSelf((self)=>(x, y)=>{
                // check scalar
                if (not(x)) {
                    // return zero matrix
                    return zeros(x.size(), x.storage());
                }
                return matAlgo14xDs(y, x, self, true);
            }),
        'Array, any': typed.referToSelf((self)=>(x, y)=>{
                // use matrix implementation
                return self(matrix(x), y).valueOf();
            }),
        'any, Array': typed.referToSelf((self)=>(x, y)=>{
                // use matrix implementation
                return self(x, matrix(y)).valueOf();
            })
    }, matrixAlgorithmSuite({
        SS: matAlgo06xS0S0,
        DS: matAlgo02xDS0
    }));
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/numeric/solveODE.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createSolveODE": (()=>createSolveODE)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$defineProperty$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/defineProperty.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
function ownKeys(e, r) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e);
        r && (o = o.filter(function(r) {
            return Object.getOwnPropertyDescriptor(e, r).enumerable;
        })), t.push.apply(t, o);
    }
    return t;
}
function _objectSpread(e) {
    for(var r = 1; r < arguments.length; r++){
        var t = null != arguments[r] ? arguments[r] : {};
        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$defineProperty$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(e, r, t[r]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {
            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
        });
    }
    return e;
}
;
;
var name = 'solveODE';
var dependencies = [
    'typed',
    'add',
    'subtract',
    'multiply',
    'divide',
    'max',
    'map',
    'abs',
    'isPositive',
    'isNegative',
    'larger',
    'smaller',
    'matrix',
    'bignumber',
    'unaryMinus'
];
var createSolveODE = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, add, subtract, multiply, divide, max, map, abs, isPositive, isNegative, larger, smaller, matrix, bignumber, unaryMinus } = _ref;
    /**
     * Numerical Integration of Ordinary Differential Equations
     *
     * Two variable step methods are provided:
     * - "RK23": Bogacki–Shampine method
     * - "RK45": Dormand-Prince method RK5(4)7M (default)
     *
     * The arguments are expected as follows.
     *
     * - `func` should be the forcing function `f(t, y)`
     * - `tspan` should be a vector of two numbers or units `[tStart, tEnd]`
     * - `y0` the initial state values, should be a scalar or a flat array
     * - `options` should be an object with the following information:
     *   - `method` ('RK45'): ['RK23', 'RK45']
     *   - `tol` (1e-3): Numeric tolerance of the method, the solver keeps the error estimates less than this value
     *   - `firstStep`: Initial step size
     *   - `minStep`: minimum step size of the method
     *   - `maxStep`: maximum step size of the method
     *   - `minDelta` (0.2): minimum ratio of change for the step
     *   - `maxDelta` (5): maximum ratio of change for the step
     *   - `maxIter` (1e4): maximum number of iterations
     *
     * The returned value is an object with `{t, y}` please note that even though `t` means time, it can represent any other independant variable like `x`:
     * - `t` an array of size `[n]`
     * - `y` the states array can be in two ways
     *   - **if `y0` is a scalar:** returns an array-like of size `[n]`
     *   - **if `y0` is a flat array-like of size [m]:** returns an array like of size `[n, m]`
     *
     * Syntax:
     *
     *     math.solveODE(func, tspan, y0)
     *     math.solveODE(func, tspan, y0, options)
     *
     * Examples:
     *
     *     function func(t, y) {return y}
     *     const tspan = [0, 4]
     *     const y0 = 1
     *     math.solveODE(func, tspan, y0)
     *     math.solveODE(func, tspan, [1, 2])
     *     math.solveODE(func, tspan, y0, { method:"RK23", maxStep:0.1 })
     *
     * See also:
     *
     *     derivative, simplifyCore
     *
     * @param {function} func The forcing function f(t,y)
     * @param {Array | Matrix} tspan The time span
     * @param {number | BigNumber | Unit | Array | Matrix} y0 The initial value
     * @param {Object} [options] Optional configuration options
     * @return {Object} Return an object with t and y values as arrays
     */ function _rk(butcherTableau) {
        // generates an adaptive runge kutta method from it's butcher tableau
        return function(f, tspan, y0, options) {
            // adaptive runge kutta methods
            var wrongTSpan = !(tspan.length === 2 && (tspan.every(isNumOrBig) || tspan.every(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isUnit"])));
            if (wrongTSpan) {
                throw new Error('"tspan" must be an Array of two numeric values or two units [tStart, tEnd]');
            }
            var t0 = tspan[0]; // initial time
            var tf = tspan[1]; // final time
            var isForwards = larger(tf, t0);
            var firstStep = options.firstStep;
            if (firstStep !== undefined && !isPositive(firstStep)) {
                throw new Error('"firstStep" must be positive');
            }
            var maxStep = options.maxStep;
            if (maxStep !== undefined && !isPositive(maxStep)) {
                throw new Error('"maxStep" must be positive');
            }
            var minStep = options.minStep;
            if (minStep && isNegative(minStep)) {
                throw new Error('"minStep" must be positive or zero');
            }
            var timeVars = [
                t0,
                tf,
                firstStep,
                minStep,
                maxStep
            ].filter((x)=>x !== undefined);
            if (!(timeVars.every(isNumOrBig) || timeVars.every(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isUnit"]))) {
                throw new Error('Inconsistent type of "t" dependant variables');
            }
            var steps = 1; // divide time in this number of steps
            var tol = options.tol ? options.tol : 1e-4; // define a tolerance (must be an option)
            var minDelta = options.minDelta ? options.minDelta : 0.2;
            var maxDelta = options.maxDelta ? options.maxDelta : 5;
            var maxIter = options.maxIter ? options.maxIter : 10000; // stop inifite evaluation if something goes wrong
            var hasBigNumbers = [
                t0,
                tf,
                ...y0,
                maxStep,
                minStep
            ].some(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isBigNumber"]);
            var [a, c, b, bp] = hasBigNumbers ? [
                bignumber(butcherTableau.a),
                bignumber(butcherTableau.c),
                bignumber(butcherTableau.b),
                bignumber(butcherTableau.bp)
            ] : [
                butcherTableau.a,
                butcherTableau.c,
                butcherTableau.b,
                butcherTableau.bp
            ];
            var h = firstStep ? isForwards ? firstStep : unaryMinus(firstStep) : divide(subtract(tf, t0), steps); // define the first step size
            var t = [
                t0
            ]; // start the time array
            var y = [
                y0
            ]; // start the solution array
            var deltaB = subtract(b, bp); // b - bp
            var n = 0;
            var iter = 0;
            var ongoing = _createOngoing(isForwards);
            var trimStep = _createTrimStep(isForwards);
            // iterate unitil it reaches either the final time or maximum iterations
            while(ongoing(t[n], tf)){
                var k = [];
                // trim the time step so that it doesn't overshoot
                h = trimStep(t[n], tf, h);
                // calculate the first value of k
                k.push(f(t[n], y[n]));
                // calculate the rest of the values of k
                for(var i = 1; i < c.length; ++i){
                    k.push(f(add(t[n], multiply(c[i], h)), add(y[n], multiply(h, a[i], k))));
                }
                // estimate the error by comparing solutions of different orders
                var TE = max(abs(map(multiply(deltaB, k), (X)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isUnit"])(X) ? X.value : X)));
                if (TE < tol && tol / TE > 1 / 4) {
                    // push solution if within tol
                    t.push(add(t[n], h));
                    y.push(add(y[n], multiply(h, b, k)));
                    n++;
                }
                // estimate the delta value that will affect the step size
                var delta = 0.84 * (tol / TE) ** (1 / 5);
                if (smaller(delta, minDelta)) {
                    delta = minDelta;
                } else if (larger(delta, maxDelta)) {
                    delta = maxDelta;
                }
                delta = hasBigNumbers ? bignumber(delta) : delta;
                h = multiply(h, delta);
                if (maxStep && larger(abs(h), maxStep)) {
                    h = isForwards ? maxStep : unaryMinus(maxStep);
                } else if (minStep && smaller(abs(h), minStep)) {
                    h = isForwards ? minStep : unaryMinus(minStep);
                }
                iter++;
                if (iter > maxIter) {
                    throw new Error('Maximum number of iterations reached, try changing options');
                }
            }
            return {
                t,
                y
            };
        };
    }
    function _rk23(f, tspan, y0, options) {
        // Bogacki–Shampine method
        // Define the butcher table
        var a = [
            [],
            [
                1 / 2
            ],
            [
                0,
                3 / 4
            ],
            [
                2 / 9,
                1 / 3,
                4 / 9
            ]
        ];
        var c = [
            null,
            1 / 2,
            3 / 4,
            1
        ];
        var b = [
            2 / 9,
            1 / 3,
            4 / 9,
            0
        ];
        var bp = [
            7 / 24,
            1 / 4,
            1 / 3,
            1 / 8
        ];
        var butcherTableau = {
            a,
            c,
            b,
            bp
        };
        // Solve an adaptive step size rk method
        return _rk(butcherTableau)(f, tspan, y0, options);
    }
    function _rk45(f, tspan, y0, options) {
        // Dormand Prince method
        // Define the butcher tableau
        var a = [
            [],
            [
                1 / 5
            ],
            [
                3 / 40,
                9 / 40
            ],
            [
                44 / 45,
                -56 / 15,
                32 / 9
            ],
            [
                19372 / 6561,
                -25360 / 2187,
                64448 / 6561,
                -212 / 729
            ],
            [
                9017 / 3168,
                -355 / 33,
                46732 / 5247,
                49 / 176,
                -5103 / 18656
            ],
            [
                35 / 384,
                0,
                500 / 1113,
                125 / 192,
                -2187 / 6784,
                11 / 84
            ]
        ];
        var c = [
            null,
            1 / 5,
            3 / 10,
            4 / 5,
            8 / 9,
            1,
            1
        ];
        var b = [
            35 / 384,
            0,
            500 / 1113,
            125 / 192,
            -2187 / 6784,
            11 / 84,
            0
        ];
        var bp = [
            5179 / 57600,
            0,
            7571 / 16695,
            393 / 640,
            -92097 / 339200,
            187 / 2100,
            1 / 40
        ];
        var butcherTableau = {
            a,
            c,
            b,
            bp
        };
        // Solve an adaptive step size rk method
        return _rk(butcherTableau)(f, tspan, y0, options);
    }
    function _solveODE(f, tspan, y0, opt) {
        var method = opt.method ? opt.method : 'RK45';
        var methods = {
            RK23: _rk23,
            RK45: _rk45
        };
        if (method.toUpperCase() in methods) {
            var methodOptions = _objectSpread({}, opt); // clone the options object
            delete methodOptions.method; // delete the method as it won't be needed
            return methods[method.toUpperCase()](f, tspan, y0, methodOptions);
        } else {
            // throw an error indicating there is no such method
            var methodsWithQuotes = Object.keys(methods).map((x)=>"\"".concat(x, "\""));
            // generates a string of methods like: "BDF", "RK23" and "RK45"
            var availableMethodsString = "".concat(methodsWithQuotes.slice(0, -1).join(', '), " and ").concat(methodsWithQuotes.slice(-1));
            throw new Error("Unavailable method \"".concat(method, "\". Available methods are ").concat(availableMethodsString));
        }
    }
    function _createOngoing(isForwards) {
        // returns the correct function to test if it's still iterating
        return isForwards ? smaller : larger;
    }
    function _createTrimStep(isForwards) {
        var outOfBounds = isForwards ? larger : smaller;
        return function(t, tf, h) {
            var next = add(t, h);
            return outOfBounds(next, tf) ? subtract(tf, t) : h;
        };
    }
    function isNumOrBig(x) {
        // checks if it's a number or bignumber
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isBigNumber"])(x) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isNumber"])(x);
    }
    function _matrixSolveODE(f, T, y0, options) {
        // receives matrices and returns matrices
        var sol = _solveODE(f, T.toArray(), y0.toArray(), options);
        return {
            t: matrix(sol.t),
            y: matrix(sol.y)
        };
    }
    return typed('solveODE', {
        'function, Array, Array, Object': _solveODE,
        'function, Matrix, Matrix, Object': _matrixSolveODE,
        'function, Array, Array': (f, T, y0)=>_solveODE(f, T, y0, {}),
        'function, Matrix, Matrix': (f, T, y0)=>_matrixSolveODE(f, T, y0, {}),
        'function, Array, number | BigNumber | Unit': (f, T, y0)=>{
            var sol = _solveODE(f, T, [
                y0
            ], {});
            return {
                t: sol.t,
                y: sol.y.map((Y)=>Y[0])
            };
        },
        'function, Matrix, number | BigNumber | Unit': (f, T, y0)=>{
            var sol = _solveODE(f, T.toArray(), [
                y0
            ], {});
            return {
                t: matrix(sol.t),
                y: matrix(sol.y.map((Y)=>Y[0]))
            };
        },
        'function, Array, number | BigNumber | Unit, Object': (f, T, y0, options)=>{
            var sol = _solveODE(f, T, [
                y0
            ], options);
            return {
                t: sol.t,
                y: sol.y.map((Y)=>Y[0])
            };
        },
        'function, Matrix, number | BigNumber | Unit, Object': (f, T, y0, options)=>{
            var sol = _solveODE(f, T.toArray(), [
                y0
            ], options);
            return {
                t: matrix(sol.t),
                y: matrix(sol.y.map((Y)=>Y[0]))
            };
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/special/erf.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* eslint-disable no-loss-of-precision */ __turbopack_context__.s({
    "createErf": (()=>createErf)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/collection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/number.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
;
;
var name = 'erf';
var dependencies = [
    'typed'
];
var createErf = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed } = _ref;
    /**
   * Compute the erf function of a value using a rational Chebyshev
   * approximations for different intervals of x.
   *
   * This is a translation of W. J. Cody's Fortran implementation from 1987
   * ( https://www.netlib.org/specfun/erf ). See the AMS publication
   * "Rational Chebyshev Approximations for the Error Function" by W. J. Cody
   * for an explanation of this process.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.erf(x)
   *
   * Examples:
   *
   *    math.erf(0.2)    // returns 0.22270258921047847
   *    math.erf(-0.5)   // returns -0.5204998778130465
   *    math.erf(4)      // returns 0.9999999845827421
   *
   * See also:
   *    zeta
   *
   * @param {number | Array | Matrix} x   A real number
   * @return {number | Array | Matrix}    The erf of `x`
   */ return typed('name', {
        number: function number(x) {
            var y = Math.abs(x);
            if (y >= MAX_NUM) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sign"])(x);
            }
            if (y <= THRESH) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sign"])(x) * erf1(y);
            }
            if (y <= 4.0) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sign"])(x) * (1 - erfc2(y));
            }
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sign"])(x) * (1 - erfc3(y));
        },
        'Array | Matrix': typed.referToSelf((self)=>(n)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepMap"])(n, self))
    });
    "TURBOPACK unreachable";
    /**
   * Approximates the error function erf() for x <= 0.46875 using this function:
   *               n
   * erf(x) = x * sum (p_j * x^(2j)) / (q_j * x^(2j))
   *              j=0
   */ function erf1(y) {
        var ysq = y * y;
        var xnum = P[0][4] * ysq;
        var xden = ysq;
        var i;
        for(i = 0; i < 3; i += 1){
            xnum = (xnum + P[0][i]) * ysq;
            xden = (xden + Q[0][i]) * ysq;
        }
        return y * (xnum + P[0][3]) / (xden + Q[0][3]);
    }
    /**
   * Approximates the complement of the error function erfc() for
   * 0.46875 <= x <= 4.0 using this function:
   *                       n
   * erfc(x) = e^(-x^2) * sum (p_j * x^j) / (q_j * x^j)
   *                      j=0
   */ function erfc2(y) {
        var xnum = P[1][8] * y;
        var xden = y;
        var i;
        for(i = 0; i < 7; i += 1){
            xnum = (xnum + P[1][i]) * y;
            xden = (xden + Q[1][i]) * y;
        }
        var result = (xnum + P[1][7]) / (xden + Q[1][7]);
        var ysq = parseInt(y * 16) / 16;
        var del = (y - ysq) * (y + ysq);
        return Math.exp(-ysq * ysq) * Math.exp(-del) * result;
    }
    /**
   * Approximates the complement of the error function erfc() for x > 4.0 using
   * this function:
   *
   * erfc(x) = (e^(-x^2) / x) * [ 1/sqrt(pi) +
   *               n
   *    1/(x^2) * sum (p_j * x^(-2j)) / (q_j * x^(-2j)) ]
   *              j=0
   */ function erfc3(y) {
        var ysq = 1 / (y * y);
        var xnum = P[2][5] * ysq;
        var xden = ysq;
        var i;
        for(i = 0; i < 4; i += 1){
            xnum = (xnum + P[2][i]) * ysq;
            xden = (xden + Q[2][i]) * ysq;
        }
        var result = ysq * (xnum + P[2][4]) / (xden + Q[2][4]);
        result = (SQRPI - result) / y;
        ysq = parseInt(y * 16) / 16;
        var del = (y - ysq) * (y + ysq);
        return Math.exp(-ysq * ysq) * Math.exp(-del) * result;
    }
});
/**
 * Upper bound for the first approximation interval, 0 <= x <= THRESH
 * @constant
 */ var THRESH = 0.46875;
/**
 * Constant used by W. J. Cody's Fortran77 implementation to denote sqrt(pi)
 * @constant
 */ var SQRPI = 5.6418958354775628695e-1;
/**
 * Coefficients for each term of the numerator sum (p_j) for each approximation
 * interval (see W. J. Cody's paper for more details)
 * @constant
 */ var P = [
    [
        3.16112374387056560e00,
        1.13864154151050156e02,
        3.77485237685302021e02,
        3.20937758913846947e03,
        1.85777706184603153e-1
    ],
    [
        5.64188496988670089e-1,
        8.88314979438837594e00,
        6.61191906371416295e01,
        2.98635138197400131e02,
        8.81952221241769090e02,
        1.71204761263407058e03,
        2.05107837782607147e03,
        1.23033935479799725e03,
        2.15311535474403846e-8
    ],
    [
        3.05326634961232344e-1,
        3.60344899949804439e-1,
        1.25781726111229246e-1,
        1.60837851487422766e-2,
        6.58749161529837803e-4,
        1.63153871373020978e-2
    ]
];
/**
 * Coefficients for each term of the denominator sum (q_j) for each approximation
 * interval (see W. J. Cody's paper for more details)
 * @constant
 */ var Q = [
    [
        2.36012909523441209e01,
        2.44024637934444173e02,
        1.28261652607737228e03,
        2.84423683343917062e03
    ],
    [
        1.57449261107098347e01,
        1.17693950891312499e02,
        5.37181101862009858e02,
        1.62138957456669019e03,
        3.29079923573345963e03,
        4.36261909014324716e03,
        3.43936767414372164e03,
        1.23033935480374942e03
    ],
    [
        2.56852019228982242e00,
        1.87295284992346047e00,
        5.27905102951428412e-1,
        6.05183413124413191e-2,
        2.33520497626869185e-3
    ]
];
/**
 * Maximum/minimum safe numbers to input to erf() (in ES6+, this number is
 * Number.[MAX|MIN]_SAFE_INTEGER). erf() for all numbers beyond this limit will
 * return 1
 */ var MAX_NUM = Math.pow(2, 53);
}}),
"[project]/node_modules/mathjs/lib/esm/function/special/zeta.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createZeta": (()=>createZeta)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
var name = 'zeta';
var dependencies = [
    'typed',
    'config',
    'multiply',
    'pow',
    'divide',
    'factorial',
    'equal',
    'smallerEq',
    'isNegative',
    'gamma',
    'sin',
    'subtract',
    'add',
    '?Complex',
    '?BigNumber',
    'pi'
];
var createZeta = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config, multiply, pow, divide, factorial, equal, smallerEq, isNegative, gamma, sin, subtract, add, Complex, BigNumber: _BigNumber, pi } = _ref;
    /**
   * Compute the Riemann Zeta function of a value using an infinite series for
   * all of the complex plane using Riemann's Functional equation.
   *
   * Based off the paper by Xavier Gourdon and Pascal Sebah
   * ( http://numbers.computation.free.fr/Constants/Miscellaneous/zetaevaluations.pdf )
   *
   * Implementation and slight modification by Anik Patel
   *
   * Note: the implementation is accurate up to about 6 digits.
   *
   * Syntax:
   *
   *    math.zeta(n)
   *
   * Examples:
   *
   *    math.zeta(5)       // returns 1.0369277551433895
   *    math.zeta(-0.5)    // returns -0.2078862249773449
   *    math.zeta(math.i)  // returns 0.0033002236853253153 - 0.4181554491413212i
   *
   * See also:
   *    erf
   *
   * @param {number | Complex | BigNumber} s   A Real, Complex or BigNumber parameter to the Riemann Zeta Function
   * @return {number | Complex | BigNumber}    The Riemann Zeta of `s`
   */ return typed(name, {
        number: (s)=>zetaNumeric(s, (value)=>value, ()=>20),
        BigNumber: (s)=>zetaNumeric(s, (value)=>new _BigNumber(value), ()=>{
                // relTol is for example 1e-12. Extract the positive exponent 12 from that
                return Math.abs(Math.log10(config.relTol));
            }),
        Complex: zetaComplex
    });
    "TURBOPACK unreachable";
    /**
   * @param {number | BigNumber} s
   * @param {(value: number) => number | BigNumber} createValue
   * @param {(value: number | BigNumber | Complex) => number} determineDigits
   * @returns {number | BigNumber}
   */ function zetaNumeric(s, createValue, determineDigits) {
        if (equal(s, 0)) {
            return createValue(-0.5);
        }
        if (equal(s, 1)) {
            return createValue(NaN);
        }
        if (!isFinite(s)) {
            return isNegative(s) ? createValue(NaN) : createValue(1);
        }
        return zeta(s, createValue, determineDigits, (s)=>s);
    }
    /**
   * @param {Complex} s
   * @returns {Complex}
   */ function zetaComplex(s) {
        if (s.re === 0 && s.im === 0) {
            return new Complex(-0.5);
        }
        if (s.re === 1) {
            return new Complex(NaN, NaN);
        }
        if (s.re === Infinity && s.im === 0) {
            return new Complex(1);
        }
        if (s.im === Infinity || s.re === -Infinity) {
            return new Complex(NaN, NaN);
        }
        return zeta(s, (value)=>value, (s)=>Math.round(1.3 * 15 + 0.9 * Math.abs(s.im)), (s)=>s.re);
    }
    /**
   * @param {number | BigNumber | Complex} s
   * @param {(value: number) => number | BigNumber | Complex} createValue
   * @param {(value: number | BigNumber | Complex) => number} determineDigits
   * @param {(value: number | BigNumber | Complex) => number} getRe
   * @returns {*|number}
   */ function zeta(s, createValue, determineDigits, getRe) {
        var n = determineDigits(s);
        if (getRe(s) > -(n - 1) / 2) {
            return f(s, createValue(n), createValue);
        } else {
            // Function Equation for reflection to x < 1
            var c = multiply(pow(2, s), pow(createValue(pi), subtract(s, 1)));
            c = multiply(c, sin(multiply(divide(createValue(pi), 2), s)));
            c = multiply(c, gamma(subtract(1, s)));
            return multiply(c, zeta(subtract(1, s), createValue, determineDigits, getRe));
        }
    }
    /**
   * Calculate a portion of the sum
   * @param {number | BigNumber} k   a positive integer
   * @param {number | BigNumber} n   a positive integer
   * @return {number}    the portion of the sum
   **/ function d(k, n) {
        var S = k;
        for(var j = k; smallerEq(j, n); j = add(j, 1)){
            var factor = divide(multiply(factorial(add(n, subtract(j, 1))), pow(4, j)), multiply(factorial(subtract(n, j)), factorial(multiply(2, j))));
            S = add(S, factor);
        }
        return multiply(n, S);
    }
    /**
   * Calculate the positive Riemann Zeta function
   * @param {number} s   a real or complex number with s.re > 1
   * @param {number} n   a positive integer
   * @param {(number) => number | BigNumber | Complex} createValue
   * @return {number}    Riemann Zeta of s
   **/ function f(s, n, createValue) {
        var c = divide(1, multiply(d(createValue(0), n), subtract(1, pow(2, subtract(1, s)))));
        var S = createValue(0);
        for(var k = createValue(1); smallerEq(k, n); k = add(k, 1)){
            S = add(S, divide(multiply((-1) ** (k - 1), d(k, n)), pow(k, s)));
        }
        return multiply(c, S);
    }
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/statistics/mode.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createMode": (()=>createMode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
;
var name = 'mode';
var dependencies = [
    'typed',
    'isNaN',
    'isNumeric'
];
var createMode = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, isNaN, isNumeric } = _ref;
    /**
  * Computes the mode of a set of numbers or a list with values(numbers or characters).
  * If there are multiple modes, it returns a list of those values.
  *
  * Syntax:
  *
  *     math.mode(a, b, c, ...)
  *     math.mode(A)
  *
  * Examples:
  *
  *     math.mode(2, 1, 4, 3, 1)                            // returns [1]
  *     math.mode([1, 2.7, 3.2, 4, 2.7])                    // returns [2.7]
  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]
  *     math.mode('a','a','b','c')                           // returns ["a"]
  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, "abc"]
  *
  * See also:
  *
  *     median,
  *     mean
  *
  * @param {... *} args  A single matrix
  * @return {*} The mode of all values
  */ return typed(name, {
        'Array | Matrix': _mode,
        '...': function _(args) {
            return _mode(args);
        }
    });
    "TURBOPACK unreachable";
    /**
   * Calculates the mode in an 1-dimensional array
   * @param {Array} values
   * @return {Array} mode
   * @private
   */ function _mode(values) {
        values = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(values.valueOf());
        var num = values.length;
        if (num === 0) {
            throw new Error('Cannot calculate mode of an empty array');
        }
        var count = {};
        var mode = [];
        var max = 0;
        for(var i = 0; i < values.length; i++){
            var value = values[i];
            if (isNumeric(value) && isNaN(value)) {
                throw new Error('Cannot calculate mode of an array containing NaN values');
            }
            if (!(value in count)) {
                count[value] = 0;
            }
            count[value]++;
            if (count[value] === max) {
                mode.push(value);
            } else if (count[value] > max) {
                max = count[value];
                mode = [
                    value
                ];
            }
        }
        return mode;
    }
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/statistics/utils/improveErrorMessage.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "improveErrorMessage": (()=>improveErrorMessage)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-ssr] (ecmascript)");
;
function improveErrorMessage(err, fnName, value) {
    // TODO: add information with the index (also needs transform in expression parser)
    var details;
    if (String(err).includes('Unexpected type')) {
        details = arguments.length > 2 ? ' (type: ' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["typeOf"])(value) + ', value: ' + JSON.stringify(value) + ')' : ' (type: ' + err.data.actual + ')';
        return new TypeError('Cannot calculate ' + fnName + ', unexpected type of argument' + details);
    }
    if (String(err).includes('complex numbers')) {
        details = arguments.length > 2 ? ' (type: ' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["typeOf"])(value) + ', value: ' + JSON.stringify(value) + ')' : '';
        return new TypeError('Cannot calculate ' + fnName + ', no ordering relation is defined for complex numbers' + details);
    }
    return err;
}
}}),
"[project]/node_modules/mathjs/lib/esm/function/statistics/prod.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createProd": (()=>createProd)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/collection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/number.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$utils$2f$improveErrorMessage$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/statistics/utils/improveErrorMessage.js [app-ssr] (ecmascript)");
;
;
;
;
var name = 'prod';
var dependencies = [
    'typed',
    'config',
    'multiplyScalar',
    'numeric'
];
var createProd = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config, multiplyScalar, numeric } = _ref;
    /**
   * Compute the product of a matrix or a list with values.
   * In case of a multidimensional array or matrix, the sum of all
   * elements will be calculated.
   *
   * Syntax:
   *
   *     math.prod(a, b, c, ...)
   *     math.prod(A)
   *
   * Examples:
   *
   *     math.multiply(2, 3)           // returns 6
   *     math.prod(2, 3)               // returns 6
   *     math.prod(2, 3, 4)            // returns 24
   *     math.prod([2, 3, 4])          // returns 24
   *     math.prod([[2, 5], [4, 3]])   // returns 120
   *
   * See also:
   *
   *    mean, median, min, max, sum, std, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The product of all values
   */ return typed(name, {
        // prod([a, b, c, d, ...])
        'Array | Matrix': _prod,
        // prod([a, b, c, d, ...], dim)
        'Array | Matrix, number | BigNumber': function Array__Matrix_number__BigNumber(array, dim) {
            // TODO: implement prod(A, dim)
            throw new Error('prod(A, dim) is not yet supported');
        // return reduce(arguments[0], arguments[1], math.prod)
        },
        // prod(a, b, c, d, ...)
        '...': function _(args) {
            return _prod(args);
        }
    });
    "TURBOPACK unreachable";
    /**
   * Recursively calculate the product of an n-dimensional array
   * @param {Array} array
   * @return {number} prod
   * @private
   */ function _prod(array) {
        var prod;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepForEach"])(array, function(value) {
            try {
                prod = prod === undefined ? value : multiplyScalar(prod, value);
            } catch (err) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$utils$2f$improveErrorMessage$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["improveErrorMessage"])(err, 'prod', value);
            }
        });
        // make sure returning numeric value: parse a string into a numeric value
        if (typeof prod === 'string') {
            prod = numeric(prod, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeNumberType"])(prod, config));
        }
        if (prod === undefined) {
            throw new Error('Cannot calculate prod of an empty array');
        }
        return prod;
    }
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/statistics/max.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createMax": (()=>createMax)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/collection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/number.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$utils$2f$improveErrorMessage$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/statistics/utils/improveErrorMessage.js [app-ssr] (ecmascript)");
;
;
;
;
var name = 'max';
var dependencies = [
    'typed',
    'config',
    'numeric',
    'larger'
];
var createMax = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config, numeric, larger } = _ref;
    /**
   * Compute the maximum value of a matrix or a  list with values.
   * In case of a multidimensional array, the maximum of the flattened array
   * will be calculated. When `dim` is provided, the maximum over the selected
   * dimension will be calculated. Parameter `dim` is zero-based.
   *
   * Syntax:
   *
   *     math.max(a, b, c, ...)
   *     math.max(A)
   *     math.max(A, dimension)
   *
   * Examples:
   *
   *     math.max(2, 1, 4, 3)                  // returns 4
   *     math.max([2, 1, 4, 3])                // returns 4
   *
   *     // maximum over a specified dimension (zero-based)
   *     math.max([[2, 5], [4, 3], [1, 7]], 0) // returns [4, 7]
   *     math.max([[2, 5], [4, 3], [1, 7]], 1) // returns [5, 4, 7]
   *
   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1
   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5
   *
   * See also:
   *
   *    mean, median, min, prod, std, sum, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The maximum value
   */ return typed(name, {
        // max([a, b, c, d, ...])
        'Array | Matrix': _max,
        // max([a, b, c, d, ...], dim)
        'Array | Matrix, number | BigNumber': function Array__Matrix_number__BigNumber(array, dim) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["reduce"])(array, dim.valueOf(), _largest);
        },
        // max(a, b, c, d, ...)
        '...': function _(args) {
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["containsCollections"])(args)) {
                throw new TypeError('Scalar values expected in function max');
            }
            return _max(args);
        }
    });
    "TURBOPACK unreachable";
    /**
   * Return the largest of two values
   * @param {*} x
   * @param {*} y
   * @returns {*} Returns x when x is largest, or y when y is largest
   * @private
   */ function _largest(x, y) {
        try {
            return larger(x, y) ? x : y;
        } catch (err) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$utils$2f$improveErrorMessage$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["improveErrorMessage"])(err, 'max', y);
        }
    }
    /**
   * Recursively calculate the maximum value in an n-dimensional array
   * @param {Array} array
   * @return {number} max
   * @private
   */ function _max(array) {
        var res;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepForEach"])(array, function(value) {
            try {
                if (isNaN(value) && typeof value === 'number') {
                    res = NaN;
                } else if (res === undefined || larger(value, res)) {
                    res = value;
                }
            } catch (err) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$utils$2f$improveErrorMessage$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["improveErrorMessage"])(err, 'max', value);
            }
        });
        if (res === undefined) {
            throw new Error('Cannot calculate max of an empty array');
        }
        // make sure returning numeric value: parse a string into a numeric value
        if (typeof res === 'string') {
            res = numeric(res, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeNumberType"])(res, config));
        }
        return res;
    }
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/statistics/min.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createMin": (()=>createMin)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/collection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/number.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$utils$2f$improveErrorMessage$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/statistics/utils/improveErrorMessage.js [app-ssr] (ecmascript)");
;
;
;
;
var name = 'min';
var dependencies = [
    'typed',
    'config',
    'numeric',
    'smaller'
];
var createMin = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config, numeric, smaller } = _ref;
    /**
   * Compute the minimum value of a matrix or a  list of values.
   * In case of a multidimensional array, the minimum of the flattened array
   * will be calculated. When `dim` is provided, the minimum over the selected
   * dimension will be calculated. Parameter `dim` is zero-based.
   *
   * Syntax:
   *
   *     math.min(a, b, c, ...)
   *     math.min(A)
   *     math.min(A, dimension)
   *
   * Examples:
   *
   *     math.min(2, 1, 4, 3)                  // returns 1
   *     math.min([2, 1, 4, 3])                // returns 1
   *
   *     // minimum over a specified dimension (zero-based)
   *     math.min([[2, 5], [4, 3], [1, 7]], 0) // returns [1, 3]
   *     math.min([[2, 5], [4, 3], [1, 7]], 1) // returns [2, 3, 1]
   *
   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1
   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5
   *
   * See also:
   *
   *    mean, median, max, prod, std, sum, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The minimum value
   */ return typed(name, {
        // min([a, b, c, d, ...])
        'Array | Matrix': _min,
        // min([a, b, c, d, ...], dim)
        'Array | Matrix, number | BigNumber': function Array__Matrix_number__BigNumber(array, dim) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["reduce"])(array, dim.valueOf(), _smallest);
        },
        // min(a, b, c, d, ...)
        '...': function _(args) {
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["containsCollections"])(args)) {
                throw new TypeError('Scalar values expected in function min');
            }
            return _min(args);
        }
    });
    "TURBOPACK unreachable";
    /**
   * Return the smallest of two values
   * @param {*} x
   * @param {*} y
   * @returns {*} Returns x when x is smallest, or y when y is smallest
   * @private
   */ function _smallest(x, y) {
        try {
            return smaller(x, y) ? x : y;
        } catch (err) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$utils$2f$improveErrorMessage$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["improveErrorMessage"])(err, 'min', y);
        }
    }
    /**
   * Recursively calculate the minimum value in an n-dimensional array
   * @param {Array} array
   * @return {number} min
   * @private
   */ function _min(array) {
        var min;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepForEach"])(array, function(value) {
            try {
                if (isNaN(value) && typeof value === 'number') {
                    min = NaN;
                } else if (min === undefined || smaller(value, min)) {
                    min = value;
                }
            } catch (err) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$utils$2f$improveErrorMessage$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["improveErrorMessage"])(err, 'min', value);
            }
        });
        if (min === undefined) {
            throw new Error('Cannot calculate min of an empty array');
        }
        // make sure returning numeric value: parse a string into a numeric value
        if (typeof min === 'string') {
            min = numeric(min, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeNumberType"])(min, config));
        }
        return min;
    }
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/statistics/sum.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createSum": (()=>createSum)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/collection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/number.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$utils$2f$improveErrorMessage$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/statistics/utils/improveErrorMessage.js [app-ssr] (ecmascript)");
;
;
;
;
var name = 'sum';
var dependencies = [
    'typed',
    'config',
    'add',
    'numeric'
];
var createSum = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config, add, numeric } = _ref;
    /**
   * Compute the sum of a matrix or a list with values.
   * In case of a multidimensional array or matrix, the sum of all
   * elements will be calculated.
   *
   * Syntax:
   *
   *     math.sum(a, b, c, ...)
   *     math.sum(A)
   *     math.sum(A, dimension)
   *
   * Examples:
   *
   *     math.sum(2, 1, 4, 3)               // returns 10
   *     math.sum([2, 1, 4, 3])             // returns 10
   *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22
   *
   * See also:
   *
   *    mean, median, min, max, prod, std, variance, cumsum
   *
   * @param {... *} args  A single matrix or multiple scalar values
   * @return {*} The sum of all values
   */ return typed(name, {
        // sum([a, b, c, d, ...])
        'Array | Matrix': _sum,
        // sum([a, b, c, d, ...], dim)
        'Array | Matrix, number | BigNumber': _nsumDim,
        // sum(a, b, c, d, ...)
        '...': function _(args) {
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["containsCollections"])(args)) {
                throw new TypeError('Scalar values expected in function sum');
            }
            return _sum(args);
        }
    });
    "TURBOPACK unreachable";
    /**
   * Recursively calculate the sum of an n-dimensional array
   * @param {Array | Matrix} array
   * @return {number} sum
   * @private
   */ function _sum(array) {
        var sum;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepForEach"])(array, function(value) {
            try {
                sum = sum === undefined ? value : add(sum, value);
            } catch (err) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$utils$2f$improveErrorMessage$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["improveErrorMessage"])(err, 'sum', value);
            }
        });
        // make sure returning numeric value: parse a string into a numeric value
        if (sum === undefined) {
            sum = numeric(0, config.number);
        }
        if (typeof sum === 'string') {
            sum = numeric(sum, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeNumberType"])(sum, config));
        }
        return sum;
    }
    function _nsumDim(array, dim) {
        try {
            var sum = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["reduce"])(array, dim, add);
            return sum;
        } catch (err) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$utils$2f$improveErrorMessage$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["improveErrorMessage"])(err, 'sum');
        }
    }
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/statistics/cumsum.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createCumSum": (()=>createCumSum)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/collection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$switch$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/switch.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$utils$2f$improveErrorMessage$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/statistics/utils/improveErrorMessage.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$error$2f$IndexError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/error/IndexError.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
var name = 'cumsum';
var dependencies = [
    'typed',
    'add',
    'unaryPlus'
];
var createCumSum = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, add, unaryPlus } = _ref;
    /**
   * Compute the cumulative sum of a matrix or a list with values.
   * In case of a (multi dimensional) array or matrix, the cumulative sums
   * along a specified dimension (defaulting to the first) will be calculated.
   *
   * Syntax:
   *
   *     math.cumsum(a, b, c, ...)
   *     math.cumsum(A)
   *
   * Examples:
   *
   *     math.cumsum(2, 1, 4, 3)               // returns [2, 3, 7, 10]
   *     math.cumsum([2, 1, 4, 3])             // returns [2, 3, 7, 10]
   *     math.cumsum([[1, 2], [3, 4]])         // returns [[1, 2], [4, 6]]
   *     math.cumsum([[1, 2], [3, 4]], 0)      // returns [[1, 2], [4, 6]]
   *     math.cumsum([[1, 2], [3, 4]], 1)      // returns [[1, 3], [3, 7]]
   *     math.cumsum([[2, 5], [4, 3], [1, 7]]) // returns [[2, 5], [6, 8], [7, 15]]
   *
   * See also:
   *
   *    mean, median, min, max, prod, std, variance, sum
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The cumulative sum of all values
   */ return typed(name, {
        // sum([a, b, c, d, ...])
        Array: _cumsum,
        Matrix: function Matrix(matrix) {
            return matrix.create(_cumsum(matrix.valueOf(), matrix.datatype()));
        },
        // sum([a, b, c, d, ...], dim)
        'Array, number | BigNumber': _ncumSumDim,
        'Matrix, number | BigNumber': function Matrix_number__BigNumber(matrix, dim) {
            return matrix.create(_ncumSumDim(matrix.valueOf(), dim), matrix.datatype());
        },
        // cumsum(a, b, c, d, ...)
        '...': function _(args) {
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["containsCollections"])(args)) {
                throw new TypeError('All values expected to be scalar in function cumsum');
            }
            return _cumsum(args);
        }
    });
    "TURBOPACK unreachable";
    /**
     * Recursively calculate the cumulative sum of an n-dimensional array
     * @param {Array} array
     * @return {number} cumsum
     * @private
     */ function _cumsum(array) {
        try {
            return _cumsummap(array);
        } catch (err) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$utils$2f$improveErrorMessage$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["improveErrorMessage"])(err, name);
        }
    }
    function _cumsummap(array) {
        if (array.length === 0) {
            return [];
        }
        var sums = [
            unaryPlus(array[0])
        ]; // unaryPlus converts to number if need be
        for(var i = 1; i < array.length; ++i){
            // Must use add below and not addScalar for the case of summing a
            // 2+-dimensional array along the 0th dimension (the row vectors,
            // or higher-d analogues, are literally added to each other).
            sums.push(add(sums[i - 1], array[i]));
        }
        return sums;
    }
    function _ncumSumDim(array, dim) {
        var size = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["arraySize"])(array);
        if (dim < 0 || dim >= size.length) {
            // TODO: would be more clear when throwing a DimensionError here
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$error$2f$IndexError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["IndexError"](dim, size.length);
        }
        try {
            return _cumsumDimensional(array, dim);
        } catch (err) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$utils$2f$improveErrorMessage$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["improveErrorMessage"])(err, name);
        }
    }
    /* Possible TODO: Refactor _reduce in collection.js to be able to work here as well */ function _cumsumDimensional(mat, dim) {
        var i, ret, tran;
        if (dim <= 0) {
            var initialValue = mat[0][0];
            if (!Array.isArray(initialValue)) {
                return _cumsummap(mat);
            } else {
                tran = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$switch$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["_switch"])(mat);
                ret = [];
                for(i = 0; i < tran.length; i++){
                    ret[i] = _cumsumDimensional(tran[i], dim - 1);
                }
                return ret;
            }
        } else {
            ret = [];
            for(i = 0; i < mat.length; i++){
                ret[i] = _cumsumDimensional(mat[i], dim - 1);
            }
            return ret;
        }
    }
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/statistics/mean.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createMean": (()=>createMean)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/collection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$utils$2f$improveErrorMessage$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/statistics/utils/improveErrorMessage.js [app-ssr] (ecmascript)");
;
;
;
;
var name = 'mean';
var dependencies = [
    'typed',
    'add',
    'divide'
];
var createMean = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, add, divide } = _ref;
    /**
   * Compute the mean value of matrix or a list with values.
   * In case of a multidimensional array, the mean of the flattened array
   * will be calculated. When `dim` is provided, the maximum over the selected
   * dimension will be calculated. Parameter `dim` is zero-based.
   *
   * Syntax:
   *
   *     math.mean(a, b, c, ...)
   *     math.mean(A)
   *     math.mean(A, dimension)
   *
   * Examples:
   *
   *     math.mean(2, 1, 4, 3)                     // returns 2.5
   *     math.mean([1, 2.7, 3.2, 4])               // returns 2.725
   *
   *     math.mean([[2, 5], [6, 3], [1, 7]], 0)    // returns [3, 5]
   *     math.mean([[2, 5], [6, 3], [1, 7]], 1)    // returns [3.5, 4.5, 4]
   *
   * See also:
   *
   *     median, min, max, sum, prod, std, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The mean of all values
   */ return typed(name, {
        // mean([a, b, c, d, ...])
        'Array | Matrix': _mean,
        // mean([a, b, c, d, ...], dim)
        'Array | Matrix, number | BigNumber': _nmeanDim,
        // mean(a, b, c, d, ...)
        '...': function _(args) {
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["containsCollections"])(args)) {
                throw new TypeError('Scalar values expected in function mean');
            }
            return _mean(args);
        }
    });
    "TURBOPACK unreachable";
    /**
   * Calculate the mean value in an n-dimensional array, returning a
   * n-1 dimensional array
   * @param {Array} array
   * @param {number} dim
   * @return {number} mean
   * @private
   */ function _nmeanDim(array, dim) {
        try {
            var sum = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["reduce"])(array, dim, add);
            var s = Array.isArray(array) ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["arraySize"])(array) : array.size();
            return divide(sum, s[dim]);
        } catch (err) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$utils$2f$improveErrorMessage$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["improveErrorMessage"])(err, 'mean');
        }
    }
    /**
   * Recursively calculate the mean value in an n-dimensional array
   * @param {Array} array
   * @return {number} mean
   * @private
   */ function _mean(array) {
        var sum;
        var num = 0;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepForEach"])(array, function(value) {
            try {
                sum = sum === undefined ? value : add(sum, value);
                num++;
            } catch (err) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$utils$2f$improveErrorMessage$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["improveErrorMessage"])(err, 'mean', value);
            }
        });
        if (num === 0) {
            throw new Error('Cannot calculate the mean of an empty array');
        }
        return divide(sum, num);
    }
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/statistics/median.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createMedian": (()=>createMedian)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/collection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$utils$2f$improveErrorMessage$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/statistics/utils/improveErrorMessage.js [app-ssr] (ecmascript)");
;
;
;
;
var name = 'median';
var dependencies = [
    'typed',
    'add',
    'divide',
    'compare',
    'partitionSelect'
];
var createMedian = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, add, divide, compare, partitionSelect } = _ref;
    /**
   * Recursively calculate the median of an n-dimensional array
   * @param {Array} array
   * @return {Number} median
   * @private
   */ function _median(array) {
        try {
            array = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(array.valueOf());
            var num = array.length;
            if (num === 0) {
                throw new Error('Cannot calculate median of an empty array');
            }
            if (num % 2 === 0) {
                // even: return the average of the two middle values
                var mid = num / 2 - 1;
                var right = partitionSelect(array, mid + 1);
                // array now partitioned at mid + 1, take max of left part
                var left = array[mid];
                for(var i = 0; i < mid; ++i){
                    if (compare(array[i], left) > 0) {
                        left = array[i];
                    }
                }
                return middle2(left, right);
            } else {
                // odd: return the middle value
                var m = partitionSelect(array, (num - 1) / 2);
                return middle(m);
            }
        } catch (err) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$utils$2f$improveErrorMessage$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["improveErrorMessage"])(err, 'median');
        }
    }
    // helper function to type check the middle value of the array
    var middle = typed({
        'number | BigNumber | Complex | Unit': function number__BigNumber__Complex__Unit(value) {
            return value;
        }
    });
    // helper function to type check the two middle value of the array
    var middle2 = typed({
        'number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit': function number__BigNumber__Complex__Unit_number__BigNumber__Complex__Unit(left, right) {
            return divide(add(left, right), 2);
        }
    });
    /**
   * Compute the median of a matrix or a list with values. The values are
   * sorted and the middle value is returned. In case of an even number of
   * values, the average of the two middle values is returned.
   * Supported types of values are: Number, BigNumber, Unit
   *
   * In case of a (multi dimensional) array or matrix, the median of all
   * elements will be calculated.
   *
   * Syntax:
   *
   *     math.median(a, b, c, ...)
   *     math.median(A)
   *
   * Examples:
   *
   *     math.median(5, 2, 7)        // returns 5
   *     math.median([3, -1, 5, 7])  // returns 4
   *
   * See also:
   *
   *     mean, min, max, sum, prod, std, variance, quantileSeq
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The median
   */ return typed(name, {
        // median([a, b, c, d, ...])
        'Array | Matrix': _median,
        // median([a, b, c, d, ...], dim)
        'Array | Matrix, number | BigNumber': function Array__Matrix_number__BigNumber(array, dim) {
            // TODO: implement median(A, dim)
            throw new Error('median(A, dim) is not yet supported');
        // return reduce(arguments[0], arguments[1], ...)
        },
        // median(a, b, c, d, ...)
        '...': function _(args) {
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["containsCollections"])(args)) {
                throw new TypeError('Scalar values expected in function median');
            }
            return _median(args);
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/statistics/mad.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createMad": (()=>createMad)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$utils$2f$improveErrorMessage$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/statistics/utils/improveErrorMessage.js [app-ssr] (ecmascript)");
;
;
;
var name = 'mad';
var dependencies = [
    'typed',
    'abs',
    'map',
    'median',
    'subtract'
];
var createMad = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, abs, map, median, subtract } = _ref;
    /**
   * Compute the median absolute deviation of a matrix or a list with values.
   * The median absolute deviation is defined as the median of the absolute
   * deviations from the median.
   *
   * Syntax:
   *
   *     math.mad(a, b, c, ...)
   *     math.mad(A)
   *
   * Examples:
   *
   *     math.mad(10, 20, 30)             // returns 10
   *     math.mad([1, 2, 3])              // returns 1
   *     math.mad([[1, 2, 3], [4, 5, 6]]) // returns 1.5
   *
   * See also:
   *
   *     median, mean, std, abs
   *
   * @param {Array | Matrix} array
   *                        A single matrix or multiple scalar values.
   * @return {*} The median absolute deviation.
   */ return typed(name, {
        // mad([a, b, c, d, ...])
        'Array | Matrix': _mad,
        // mad(a, b, c, d, ...)
        '...': function _(args) {
            return _mad(args);
        }
    });
    "TURBOPACK unreachable";
    function _mad(array) {
        array = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(array.valueOf());
        if (array.length === 0) {
            throw new Error('Cannot calculate median absolute deviation (mad) of an empty array');
        }
        try {
            var med = median(array);
            return median(map(array, function(value) {
                return abs(subtract(value, med));
            }));
        } catch (err) {
            if (err instanceof TypeError && err.message.includes('median')) {
                throw new TypeError(err.message.replace('median', 'mad'));
            } else {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$utils$2f$improveErrorMessage$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["improveErrorMessage"])(err, 'mad');
            }
        }
    }
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/statistics/variance.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createVariance": (()=>createVariance)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/collection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$utils$2f$improveErrorMessage$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/statistics/utils/improveErrorMessage.js [app-ssr] (ecmascript)");
;
;
;
;
var DEFAULT_NORMALIZATION = 'unbiased';
var name = 'variance';
var dependencies = [
    'typed',
    'add',
    'subtract',
    'multiply',
    'divide',
    'apply',
    'isNaN'
];
var createVariance = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, add, subtract, multiply, divide, apply, isNaN } = _ref;
    /**
   * Compute the variance of a matrix or a  list with values.
   * In case of a multidimensional array or matrix, the variance over all
   * elements will be calculated.
   *
   * Additionally, it is possible to compute the variance along the rows
   * or columns of a matrix by specifying the dimension as the second argument.
   *
   * Optionally, the type of normalization can be specified as the final
   * parameter. The parameter `normalization` can be one of the following values:
   *
   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
   * - 'uncorrected'        The sum of squared errors is divided by n
   * - 'biased'             The sum of squared errors is divided by (n + 1)
   *
   *
   * Note that older browser may not like the variable name `var`. In that
   * case, the function can be called as `math['var'](...)` instead of
   * `math.var(...)`.
   *
   * Syntax:
   *
   *     math.variance(a, b, c, ...)
   *     math.variance(A)
   *     math.variance(A, normalization)
   *     math.variance(A, dimension)
   *     math.variance(A, dimension, normalization)
   *
   * Examples:
   *
   *     math.variance(2, 4, 6)                     // returns 4
   *     math.variance([2, 4, 6, 8])                // returns 6.666666666666667
   *     math.variance([2, 4, 6, 8], 'uncorrected') // returns 5
   *     math.variance([2, 4, 6, 8], 'biased')      // returns 4
   *
   *     math.variance([[1, 2, 3], [4, 5, 6]])      // returns 3.5
   *     math.variance([[1, 2, 3], [4, 6, 8]], 0)   // returns [4.5, 8, 12.5]
   *     math.variance([[1, 2, 3], [4, 6, 8]], 1)   // returns [1, 4]
   *     math.variance([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.5, 2]
   *
   * See also:
   *
   *    mean, median, max, min, prod, std, sum
   *
   * @param {Array | Matrix} array
   *                        A single matrix or or multiple scalar values
   * @param {string} [normalization='unbiased']
   *                        Determines how to normalize the variance.
   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
   * @param dimension {number | BigNumber}
   *                        Determines the axis to compute the variance for a matrix
   * @return {*} The variance
   */ return typed(name, {
        // variance([a, b, c, d, ...])
        'Array | Matrix': function Array__Matrix(array) {
            return _var(array, DEFAULT_NORMALIZATION);
        },
        // variance([a, b, c, d, ...], normalization)
        'Array | Matrix, string': _var,
        // variance([a, b, c, c, ...], dim)
        'Array | Matrix, number | BigNumber': function Array__Matrix_number__BigNumber(array, dim) {
            return _varDim(array, dim, DEFAULT_NORMALIZATION);
        },
        // variance([a, b, c, c, ...], dim, normalization)
        'Array | Matrix, number | BigNumber, string': _varDim,
        // variance(a, b, c, d, ...)
        '...': function _(args) {
            return _var(args, DEFAULT_NORMALIZATION);
        }
    });
    "TURBOPACK unreachable";
    /**
   * Recursively calculate the variance of an n-dimensional array
   * @param {Array} array
   * @param {string} normalization
   *                        Determines how to normalize the variance:
   *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)
   *                        - 'uncorrected' The sum of squared errors is divided by n
   *                        - 'biased'      The sum of squared errors is divided by (n + 1)
   * @return {number | BigNumber} variance
   * @private
   */ function _var(array, normalization) {
        var sum;
        var num = 0;
        if (array.length === 0) {
            throw new SyntaxError('Function variance requires one or more parameters (0 provided)');
        }
        // calculate the mean and number of elements
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepForEach"])(array, function(value) {
            try {
                sum = sum === undefined ? value : add(sum, value);
                num++;
            } catch (err) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$utils$2f$improveErrorMessage$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["improveErrorMessage"])(err, 'variance', value);
            }
        });
        if (num === 0) throw new Error('Cannot calculate variance of an empty array');
        var mean = divide(sum, num);
        // calculate the variance
        sum = undefined;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepForEach"])(array, function(value) {
            var diff = subtract(value, mean);
            sum = sum === undefined ? multiply(diff, diff) : add(sum, multiply(diff, diff));
        });
        if (isNaN(sum)) {
            return sum;
        }
        switch(normalization){
            case 'uncorrected':
                return divide(sum, num);
            case 'biased':
                return divide(sum, num + 1);
            case 'unbiased':
                {
                    var zero = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isBigNumber"])(sum) ? sum.mul(0) : 0;
                    return num === 1 ? zero : divide(sum, num - 1);
                }
            default:
                throw new Error('Unknown normalization "' + normalization + '". ' + 'Choose "unbiased" (default), "uncorrected", or "biased".');
        }
    }
    function _varDim(array, dim, normalization) {
        try {
            if (array.length === 0) {
                throw new SyntaxError('Function variance requires one or more parameters (0 provided)');
            }
            return apply(array, dim, (x)=>_var(x, normalization));
        } catch (err) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$statistics$2f$utils$2f$improveErrorMessage$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["improveErrorMessage"])(err, 'variance');
        }
    }
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/statistics/quantileSeq.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createQuantileSeq": (()=>createQuantileSeq)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$matrix$2f$apply$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/matrix/apply.js [app-ssr] (ecmascript)");
;
;
;
;
var name = 'quantileSeq';
var dependencies = [
    'typed',
    '?bignumber',
    'add',
    'subtract',
    'divide',
    'multiply',
    'partitionSelect',
    'compare',
    'isInteger',
    'smaller',
    'smallerEq',
    'larger'
];
var createQuantileSeq = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, bignumber, add, subtract, divide, multiply, partitionSelect, compare, isInteger, smaller, smallerEq, larger } = _ref;
    var apply = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$matrix$2f$apply$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createApply"])({
        typed,
        isInteger
    });
    /**
   * Compute the prob order quantile of a matrix or a list with values.
   * The sequence is sorted and the middle value is returned.
   * Supported types of sequence values are: Number, BigNumber, Unit
   * Supported types of probability are: Number, BigNumber
   *
   * In case of a multidimensional array or matrix, the prob order quantile
   * of all elements will be calculated.
   *
   * Syntax:
   *
   *     math.quantileSeq(A, prob[, sorted])
   *     math.quantileSeq(A, [prob1, prob2, ...][, sorted])
   *     math.quantileSeq(A, N[, sorted])
   *
   * Examples:
   *
   *     math.quantileSeq([3, -1, 5, 7], 0.5)         // returns 4
   *     math.quantileSeq([3, -1, 5, 7], [1/3, 2/3])  // returns [3, 5]
   *     math.quantileSeq([3, -1, 5, 7], 2)           // returns [3, 5]
   *     math.quantileSeq([-1, 3, 5, 7], 0.5, true)   // returns 4
   *
   * See also:
   *
   *     median, mean, min, max, sum, prod, std, variance
   *
   * @param {Array, Matrix} data                A single matrix or Array
   * @param {Number, BigNumber, Array} probOrN  prob is the order of the quantile, while N is
   *                                            the amount of evenly distributed steps of
   *                                            probabilities; only one of these options can
   *                                            be provided
   * @param {Boolean} sorted=false              is data sorted in ascending order
   * @return {Number, BigNumber, Unit, Array}   Quantile(s)
   */ return typed(name, {
        'Array | Matrix, number | BigNumber': (data, p)=>_quantileSeqProbNumber(data, p, false),
        'Array | Matrix, number | BigNumber, number': (data, prob, dim)=>_quantileSeqDim(data, prob, false, dim, _quantileSeqProbNumber),
        'Array | Matrix, number | BigNumber, boolean': _quantileSeqProbNumber,
        'Array | Matrix, number | BigNumber, boolean, number': (data, prob, sorted, dim)=>_quantileSeqDim(data, prob, sorted, dim, _quantileSeqProbNumber),
        'Array | Matrix, Array | Matrix': (data, p)=>_quantileSeqProbCollection(data, p, false),
        'Array | Matrix, Array | Matrix, number': (data, prob, dim)=>_quantileSeqDim(data, prob, false, dim, _quantileSeqProbCollection),
        'Array | Matrix, Array | Matrix, boolean': _quantileSeqProbCollection,
        'Array | Matrix, Array | Matrix, boolean, number': (data, prob, sorted, dim)=>_quantileSeqDim(data, prob, sorted, dim, _quantileSeqProbCollection)
    });
    "TURBOPACK unreachable";
    function _quantileSeqDim(data, prob, sorted, dim, fn) {
        return apply(data, dim, (x)=>fn(x, prob, sorted));
    }
    function _quantileSeqProbNumber(data, probOrN, sorted) {
        var probArr;
        var dataArr = data.valueOf();
        if (smaller(probOrN, 0)) {
            throw new Error('N/prob must be non-negative');
        }
        if (smallerEq(probOrN, 1)) {
            // quantileSeq([a, b, c, d, ...], prob[,sorted])
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isNumber"])(probOrN) ? _quantileSeq(dataArr, probOrN, sorted) : bignumber(_quantileSeq(dataArr, probOrN, sorted));
        }
        if (larger(probOrN, 1)) {
            // quantileSeq([a, b, c, d, ...], N[,sorted])
            if (!isInteger(probOrN)) {
                throw new Error('N must be a positive integer');
            }
            // largest possible Array length is 2^32-1
            // 2^32 < 10^15, thus safe conversion guaranteed
            if (larger(probOrN, 4294967295)) {
                throw new Error('N must be less than or equal to 2^32-1, as that is the maximum length of an Array');
            }
            var nPlusOne = add(probOrN, 1);
            probArr = [];
            for(var i = 0; smaller(i, probOrN); i++){
                var prob = divide(i + 1, nPlusOne);
                probArr.push(_quantileSeq(dataArr, prob, sorted));
            }
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isNumber"])(probOrN) ? probArr : bignumber(probArr);
        }
    }
    /**
   * Calculate the prob order quantile of an n-dimensional array.
   *
   * @param {Array, Matrix} array
   * @param {Array, Matrix} prob
   * @param {Boolean} sorted
   * @return {Number, BigNumber, Unit} prob order quantile
   * @private
   */ function _quantileSeqProbCollection(data, probOrN, sorted) {
        var dataArr = data.valueOf();
        // quantileSeq([a, b, c, d, ...], [prob1, prob2, ...][,sorted])
        var probOrNArr = probOrN.valueOf();
        var probArr = [];
        for(var i = 0; i < probOrNArr.length; ++i){
            probArr.push(_quantileSeq(dataArr, probOrNArr[i], sorted));
        }
        return probArr;
    }
    /**
   * Calculate the prob order quantile of an n-dimensional array.
   *
   * @param {Array} array
   * @param {Number, BigNumber} prob
   * @param {Boolean} sorted
   * @return {Number, BigNumber, Unit} prob order quantile
   * @private
   */ function _quantileSeq(array, prob, sorted) {
        var flat = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(array);
        var len = flat.length;
        if (len === 0) {
            throw new Error('Cannot calculate quantile of an empty sequence');
        }
        var index = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isNumber"])(prob) ? prob * (len - 1) : prob.times(len - 1);
        var integerPart = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isNumber"])(prob) ? Math.floor(index) : index.floor().toNumber();
        var fracPart = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isNumber"])(prob) ? index % 1 : index.minus(integerPart);
        if (isInteger(index)) {
            return sorted ? flat[index] : partitionSelect(flat, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isNumber"])(prob) ? index : index.valueOf());
        }
        var left;
        var right;
        if (sorted) {
            left = flat[integerPart];
            right = flat[integerPart + 1];
        } else {
            right = partitionSelect(flat, integerPart + 1);
            // max of partition is kth largest
            left = flat[integerPart];
            for(var i = 0; i < integerPart; ++i){
                if (compare(flat[i], left) > 0) {
                    left = flat[i];
                }
            }
        }
        // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]
        return add(multiply(left, subtract(1, fracPart)), multiply(right, fracPart));
    }
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/statistics/std.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createStd": (()=>createStd)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-ssr] (ecmascript)");
;
;
var name = 'std';
var dependencies = [
    'typed',
    'map',
    'sqrt',
    'variance'
];
var createStd = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, map, sqrt, variance } = _ref;
    /**
   * Compute the standard deviation of a matrix or a  list with values.
   * The standard deviations is defined as the square root of the variance:
   * `std(A) = sqrt(variance(A))`.
   * In case of a (multi dimensional) array or matrix, the standard deviation
   * over all elements will be calculated by default, unless an axis is specified
   * in which case the standard deviation will be computed along that axis.
   *
   * Additionally, it is possible to compute the standard deviation along the rows
   * or columns of a matrix by specifying the dimension as the second argument.
   *
   * Optionally, the type of normalization can be specified as the final
   * parameter. The parameter `normalization` can be one of the following values:
   *
   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
   * - 'uncorrected'        The sum of squared errors is divided by n
   * - 'biased'             The sum of squared errors is divided by (n + 1)
   *
   *
   * Syntax:
   *
   *     math.std(a, b, c, ...)
   *     math.std(A)
   *     math.std(A, normalization)
   *     math.std(A, dimension)
   *     math.std(A, dimension, normalization)
   *
   * Examples:
   *
   *     math.std(2, 4, 6)                     // returns 2
   *     math.std([2, 4, 6, 8])                // returns 2.581988897471611
   *     math.std([2, 4, 6, 8], 'uncorrected') // returns 2.23606797749979
   *     math.std([2, 4, 6, 8], 'biased')      // returns 2
   *
   *     math.std([[1, 2, 3], [4, 5, 6]])      // returns 1.8708286933869707
   *     math.std([[1, 2, 3], [4, 6, 8]], 0)    // returns [2.1213203435596424, 2.8284271247461903, 3.5355339059327378]
   *     math.std([[1, 2, 3], [4, 6, 8]], 1)    // returns [1, 2]
   *     math.std([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.7071067811865476, 1.4142135623730951]
   *
   * See also:
   *
   *    mean, median, max, min, prod, sum, variance
   *
   * @param {Array | Matrix} array
   *                        A single matrix or or multiple scalar values
   * @param {string} [normalization='unbiased']
   *                        Determines how to normalize the variance.
   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
   * @param dimension {number | BigNumber}
   *                        Determines the axis to compute the standard deviation for a matrix
   * @return {*} The standard deviation
   */ return typed(name, {
        // std([a, b, c, d, ...])
        'Array | Matrix': _std,
        // std([a, b, c, d, ...], normalization)
        'Array | Matrix, string': _std,
        // std([a, b, c, c, ...], dim)
        'Array | Matrix, number | BigNumber': _std,
        // std([a, b, c, c, ...], dim, normalization)
        'Array | Matrix, number | BigNumber, string': _std,
        // std(a, b, c, d, ...)
        '...': function _(args) {
            return _std(args);
        }
    });
    "TURBOPACK unreachable";
    function _std(array, normalization) {
        if (array.length === 0) {
            throw new SyntaxError('Function std requires one or more parameters (0 provided)');
        }
        try {
            var v = variance.apply(null, arguments);
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isCollection"])(v)) {
                return map(v, sqrt);
            } else {
                return sqrt(v);
            }
        } catch (err) {
            if (err instanceof TypeError && err.message.includes(' variance')) {
                throw new TypeError(err.message.replace(' variance', ' std'));
            } else {
                throw err;
            }
        }
    }
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/statistics/corr.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createCorr": (()=>createCorr)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
var name = 'corr';
var dependencies = [
    'typed',
    'matrix',
    'mean',
    'sqrt',
    'sum',
    'add',
    'subtract',
    'multiply',
    'pow',
    'divide'
];
var createCorr = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, matrix, sqrt, sum, add, subtract, multiply, pow, divide } = _ref;
    /**
   * Compute the correlation coefficient of a two list with values, For matrices, the matrix correlation coefficient is calculated.
   *
   * Syntax:
   *
   *     math.corr(A, B)
   *
   * Examples:
   *
   *     math.corr([1, 2, 3, 4, 5], [4, 5, 6, 7, 8])     // returns 1
   *     math.corr([1, 2.2, 3, 4.8, 5], [4, 5.3, 6.6, 7, 8])     //returns 0.9569941688503644
   *     math.corr([[1, 2.2, 3, 4.8, 5], [4, 5.3, 6.6, 7, 8]],[[1, 2.2, 3, 4.8, 5], [4, 5.3, 6.6, 7, 8]])   // returns [1,1]
   *
   * See also:
   *
   *     median, mean, min, max, sum, prod, std, variance
   *
   * @param {Array | Matrix} A The first array or matrix to compute correlation coefficient
   * @param {Array | Matrix} B The second array or matrix to compute correlation coefficient
   * @return {*} The correlation coefficient
   */ return typed(name, {
        'Array, Array': function Array_Array(A, B) {
            return _corr(A, B);
        },
        'Matrix, Matrix': function Matrix_Matrix(A, B) {
            var res = _corr(A.toArray(), B.toArray());
            return Array.isArray(res) ? matrix(res) : res;
        }
    });
    "TURBOPACK unreachable";
    /**
   * Calculate the correlation coefficient between two arrays or matrices.
   * @param {Array | Matrix} A
   * @param {Array | Matrix} B
   * @return {*} correlation coefficient
   * @private
   */ function _corr(A, B) {
        var correlations = [];
        if (Array.isArray(A[0]) && Array.isArray(B[0])) {
            if (A.length !== B.length) {
                throw new SyntaxError('Dimension mismatch. Array A and B must have the same length.');
            }
            for(var i = 0; i < A.length; i++){
                if (A[i].length !== B[i].length) {
                    throw new SyntaxError('Dimension mismatch. Array A and B must have the same number of elements.');
                }
                correlations.push(correlation(A[i], B[i]));
            }
            return correlations;
        } else {
            if (A.length !== B.length) {
                throw new SyntaxError('Dimension mismatch. Array A and B must have the same number of elements.');
            }
            return correlation(A, B);
        }
    }
    function correlation(A, B) {
        var n = A.length;
        var sumX = sum(A);
        var sumY = sum(B);
        var sumXY = A.reduce((acc, x, index)=>add(acc, multiply(x, B[index])), 0);
        var sumXSquare = sum(A.map((x)=>pow(x, 2)));
        var sumYSquare = sum(B.map((y)=>pow(y, 2)));
        var numerator = subtract(multiply(n, sumXY), multiply(sumX, sumY));
        var denominator = sqrt(multiply(subtract(multiply(n, sumXSquare), pow(sumX, 2)), subtract(multiply(n, sumYSquare), pow(sumY, 2))));
        return divide(numerator, denominator);
    }
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/string/format.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createFormat": (()=>createFormat)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/string.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
;
var name = 'format';
var dependencies = [
    'typed'
];
var createFormat = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed } = _ref;
    /**
   * Format a value of any type into a string.
   *
   * Syntax:
   *
   *    math.format(value)
   *    math.format(value, options)
   *    math.format(value, precision)
   *    math.format(value, callback)
   *
   * Where:
   *
   *  - `value: *`
   *    The value to be formatted
   *  - `options: Object`
   *    An object with formatting options. Available options:
   *    - `notation: string`
   *      Number notation. Choose from:
   *      - `'fixed'`
   *        Always use regular number notation.
   *        For example `'123.40'` and `'14000000'`
   *      - `'exponential'`
   *        Always use exponential notation.
   *        For example `'1.234e+2'` and `'1.4e+7'`
   *      - `'engineering'`
   *        Always use engineering notation: always have exponential notation,
   *        and select the exponent to be a multiple of `3`.
   *        For example `'123.4e+0'` and `'14.0e+6'`
   *      - `'auto'` (default)
   *        Regular number notation for numbers having an absolute value between
   *        `lower` and `upper` bounds, and uses exponential notation elsewhere.
   *        Lower bound is included, upper bound is excluded.
   *        For example `'123.4'` and `'1.4e7'`.
   *      - `'bin'`, `'oct'`, or `'hex'`
   *        Format the number using binary, octal, or hexadecimal notation.
   *        For example `'0b1101'` and `'0x10fe'`.
   *    - `wordSize: number | BigNumber`
   *      The word size in bits to use for formatting in binary, octal, or
   *      hexadecimal notation. To be used only with `'bin'`, `'oct'`, or `'hex'`
   *      values for `notation` option. When this option is defined the value
   *      is formatted as a signed twos complement integer of the given word
   *      size and the size suffix is appended to the output.
   *      For example `format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'`.
   *      Default value is undefined.
   *    - `precision: number | BigNumber`
   *      Limit the number of digits of the formatted value.
   *      For regular numbers, must be a number between `0` and `16`.
   *      For bignumbers, the maximum depends on the configured precision,
   *      see function `config()`.
   *      In case of notations `'exponential'`, `'engineering'`, and `'auto'`,
   *      `precision` defines the total number of significant digits returned.
   *      In case of notation `'fixed'`, `precision` defines the number of
   *      significant digits after the decimal point.
   *      `precision` is undefined by default.
   *    - `lowerExp: number`
   *      Exponent determining the lower boundary for formatting a value with
   *      an exponent when `notation='auto'`. Default value is `-3`.
   *    - `upperExp: number`
   *      Exponent determining the upper boundary for formatting a value with
   *      an exponent when `notation='auto'`. Default value is `5`.
   *    - `fraction: string`. Available values: `'ratio'` (default) or `'decimal'`.
   *      For example `format(fraction(1, 3))` will output `'1/3'` when `'ratio'`
   *      is configured, and will output `'0.(3)'` when `'decimal'` is configured.
   *    - `truncate: number`. Specifies the maximum allowed length of the
   *      returned string. If it had been longer, the excess characters
   *      are deleted and replaced with `'...'`.
   * - `callback: function`
   *   A custom formatting function, invoked for all numeric elements in `value`,
   *   for example all elements of a matrix, or the real and imaginary
   *   parts of a complex number. This callback can be used to override the
   *   built-in numeric notation with any type of formatting. Function `callback`
   *   is called with `value` as parameter and must return a string.
   *
   * When `value` is an Object:
   *
   * - When the object contains a property `format` being a function, this function
   *   is invoked as `value.format(options)` and the result is returned.
   * - When the object has its own `toString` method, this method is invoked
   *   and the result is returned.
   * - In other cases the function will loop over all object properties and
   *   return JSON object notation like '{"a": 2, "b": 3}'.
   *
   * When value is a function:
   *
   * - When the function has a property `syntax`, it returns this
   *   syntax description.
   * - In other cases, a string `'function'` is returned.
   *
   * Examples:
   *
   *    math.format(6.4)                                        // returns '6.4'
   *    math.format(1240000)                                    // returns '1.24e+6'
   *    math.format(1/3)                                        // returns '0.3333333333333333'
   *    math.format(1/3, 3)                                     // returns '0.333'
   *    math.format(21385, 2)                                   // returns '21000'
   *    math.format(12e8, {notation: 'fixed'})                  // returns '1200000000'
   *    math.format(2.3,  {notation: 'fixed', precision: 4})    // returns '2.3000'
   *    math.format(52.8, {notation: 'exponential'})            // returns '5.28e+1'
   *    math.format(12400, {notation: 'engineering'})           // returns '12.4e+3'
   *    math.format(2000, {lowerExp: -2, upperExp: 2})          // returns '2e+3'
   *
   *    function formatCurrency(value) {
   *      // return currency notation with two digits:
   *      return '$' + value.toFixed(2)
   *
   *      // you could also use math.format inside the callback:
   *      // return '$' + math.format(value, {notation: 'fixed', precision: 2})
   *    }
   *    math.format([2.1, 3, 0.016], formatCurrency)            // returns '[$2.10, $3.00, $0.02]'
   *
   * See also:
   *
   *    print
   *
   * @param {*} value                               Value to be stringified
   * @param {Object | Function | number} [options]  Formatting options
   * @return {string} The formatted value
   */ return typed(name, {
        any: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["format"],
        'any, Object | function | number | BigNumber': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["format"]
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/string/bin.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createBin": (()=>createBin)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
var name = 'bin';
var dependencies = [
    'typed',
    'format'
];
var createBin = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, format } = _ref;
    return typed(name, {
        'number | BigNumber': function number__BigNumber(n) {
            return format(n, {
                notation: 'bin'
            });
        },
        'number | BigNumber, number | BigNumber': function number__BigNumber_number__BigNumber(n, wordSize) {
            return format(n, {
                notation: 'bin',
                wordSize
            });
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/string/oct.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createOct": (()=>createOct)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
var name = 'oct';
var dependencies = [
    'typed',
    'format'
];
var createOct = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, format } = _ref;
    return typed(name, {
        'number | BigNumber': function number__BigNumber(n) {
            return format(n, {
                notation: 'oct'
            });
        },
        'number | BigNumber, number | BigNumber': function number__BigNumber_number__BigNumber(n, wordSize) {
            return format(n, {
                notation: 'oct',
                wordSize
            });
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/string/hex.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createHex": (()=>createHex)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
var name = 'hex';
var dependencies = [
    'typed',
    'format'
];
var createHex = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, format } = _ref;
    return typed(name, {
        'number | BigNumber': function number__BigNumber(n) {
            return format(n, {
                notation: 'hex'
            });
        },
        'number | BigNumber, number | BigNumber': function number__BigNumber_number__BigNumber(n, wordSize) {
            return format(n, {
                notation: 'hex',
                wordSize
            });
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/string/print.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createPrint": (()=>createPrint)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/string.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$print$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/print.js [app-ssr] (ecmascript)");
;
;
;
;
var name = 'print';
var dependencies = [
    'typed'
];
var createPrint = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed } = _ref;
    /**
   * Interpolate values into a string template.
   *
   * Syntax:
   *
   *     math.print(template, values)
   *     math.print(template, values, precision)
   *     math.print(template, values, options)
   *
   * Example usage:
   *
   *     // the following outputs: 'Lucy is 5 years old'
   *     math.print('Lucy is $age years old', {age: 5})
   *
   *     // the following outputs: 'The value of pi is 3.141592654'
   *     math.print('The value of pi is $pi', {pi: math.pi}, 10)
   *
   *     // the following outputs: 'hello Mary! The date is 2013-03-23'
   *     math.print('Hello $user.name! The date is $date', {
   *       user: {
   *         name: 'Mary',
   *       },
   *       date: new Date(2013, 2, 23).toISOString().substring(0, 10)
   *     })
   *
   *     // the following outputs: 'My favorite fruits are apples and bananas !'
   *     math.print('My favorite fruits are $0 and $1 !', [
   *       'apples',
   *       'bananas'
   *     ])
   *
   * See also:
   *
   *     format
   *
   * @param {string} template           A string containing variable placeholders.
   * @param {Object | Array | Matrix}   values An object or array containing variables
   *                                    which will be filled in in the template.
   * @param {number | Object} [options] Formatting options,
   *                                    or the number of digits to format numbers.
   *                                    See function math.format for a description
   *                                    of all options.
   * @return {string} Interpolated string
   */ return typed(name, {
        // note: Matrix will be converted automatically to an Array
        'string, Object | Array': _print,
        'string, Object | Array, number | Object': _print
    });
});
/**
 * Interpolate values into a string template.
 * @param {string} template
 * @param {Object} values
 * @param {number | Object} [options]
 * @returns {string} Interpolated string
 * @private
 */ function _print(template, values, options) {
    return template.replace(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$print$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["printTemplate"], function(original, key) {
        var keys = key.split('.');
        var value = values[keys.shift()];
        if (value !== undefined && value.isMatrix) {
            value = value.toArray();
        }
        while(keys.length && value !== undefined){
            var k = keys.shift();
            value = k ? value[k] : value + '.';
        }
        if (value !== undefined) {
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isString"])(value)) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$string$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["format"])(value, options);
            } else {
                return value;
            }
        }
        return original;
    });
}
}}),
"[project]/node_modules/mathjs/lib/esm/function/unit/to.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createTo": (()=>createTo)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matrixAlgorithmSuite.js [app-ssr] (ecmascript)");
;
;
var name = 'to';
var dependencies = [
    'typed',
    'matrix',
    'concat'
];
var createTo = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, matrix, concat } = _ref;
    var matrixAlgorithmSuite = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatrixAlgorithmSuite"])({
        typed,
        matrix,
        concat
    });
    /**
   * Change the unit of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.to(x, unit)
   *
   * Examples:
   *
   *    math.to(math.unit('2 inch'), 'cm')             // returns Unit 5.08 cm
   *    math.to(math.unit('2 inch'), math.unit('cm'))  // returns Unit 5.08 cm
   *    math.to(math.unit(16, 'bytes'), 'bits')        // returns Unit 128 bits
   *
   * See also:
   *
   *    unit
   *
   * @param {Unit | Array | Matrix} x     The unit to be converted.
   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like "cm"
   *                                      or a unit without value.
   * @return {Unit | Array | Matrix} value with changed, fixed unit.
   */ return typed(name, {
        'Unit, Unit | string': (x, unit)=>x.to(unit)
    }, matrixAlgorithmSuite({
        Ds: true
    }));
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/trigonometry/acos.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAcos": (()=>createAcos)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
var name = 'acos';
var dependencies = [
    'typed',
    'config',
    'Complex'
];
var createAcos = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config, Complex } = _ref;
    /**
   * Calculate the inverse cosine of a value.
   *
   * To avoid confusion with the matrix arccosine, this function does not
   * apply to matrices.
   *
   * Syntax:
   *
   *    math.acos(x)
   *
   * Examples:
   *
   *    math.acos(0.5)           // returns number 1.0471975511965979
   *    math.acos(math.cos(1.5)) // returns number 1.5
   *
   *    math.acos(2)             // returns Complex 0 + 1.3169578969248166 i
   *
   * See also:
   *
   *    cos, atan, asin
   *
   * @param {number | BigNumber | Complex} x  Function input
   * @return {number | BigNumber | Complex} The arc cosine of x
   */ return typed(name, {
        number: function number(x) {
            if (x >= -1 && x <= 1 || config.predictable) {
                return Math.acos(x);
            } else {
                return new Complex(x, 0).acos();
            }
        },
        Complex: function Complex(x) {
            return x.acos();
        },
        BigNumber: function BigNumber(x) {
            return x.acos();
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/trigonometry/acosh.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAcosh": (()=>createAcosh)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/trigonometry.js [app-ssr] (ecmascript)");
;
;
var name = 'acosh';
var dependencies = [
    'typed',
    'config',
    'Complex'
];
var createAcosh = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config, Complex } = _ref;
    /**
   * Calculate the hyperbolic arccos of a value,
   * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acosh(x)
   *
   * Examples:
   *
   *    math.acosh(1.5)       // returns 0.9624236501192069
   *
   * See also:
   *
   *    cosh, asinh, atanh
   *
   * @param {number | BigNumber | Complex} x  Function input
   * @return {number | BigNumber | Complex} Hyperbolic arccosine of x
   */ return typed(name, {
        number: function number(x) {
            if (x >= 1 || config.predictable) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["acoshNumber"])(x);
            }
            if (x <= -1) {
                return new Complex(Math.log(Math.sqrt(x * x - 1) - x), Math.PI);
            }
            return new Complex(x, 0).acosh();
        },
        Complex: function Complex(x) {
            return x.acosh();
        },
        BigNumber: function BigNumber(x) {
            return x.acosh();
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/trigonometry/acot.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAcot": (()=>createAcot)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/trigonometry.js [app-ssr] (ecmascript)");
;
;
var name = 'acot';
var dependencies = [
    'typed',
    'BigNumber'
];
var createAcot = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, BigNumber: _BigNumber } = _ref;
    /**
   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.
   *
   * To avoid confusion with the matrix arccotanget, this function does not
   * apply to matrices.
   *
   * Syntax:
   *
   *    math.acot(x)
   *
   * Examples:
   *
   *    math.acot(0.5)           // returns number 1.1071487177940904
   *    math.acot(2)             // returns number 0.4636476090008061
   *    math.acot(math.cot(1.5)) // returns number 1.5
   *
   * See also:
   *
   *    cot, atan
   *
   * @param {number | BigNumber| Complex} x   Function input
   * @return {number | BigNumber| Complex} The arc cotangent of x
   */ return typed(name, {
        number: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["acotNumber"],
        Complex: function Complex(x) {
            return x.acot();
        },
        BigNumber: function BigNumber(x) {
            return new _BigNumber(1).div(x).atan();
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/trigonometry/acoth.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAcoth": (()=>createAcoth)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/trigonometry.js [app-ssr] (ecmascript)");
;
;
var name = 'acoth';
var dependencies = [
    'typed',
    'config',
    'Complex',
    'BigNumber'
];
var createAcoth = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config, Complex, BigNumber: _BigNumber } = _ref;
    /**
   * Calculate the inverse hyperbolic tangent of a value,
   * defined as `acoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.
   *
   * To avoid confusion with the matrix inverse hyperbolic tangent, this
   * function does not apply to matrices.
   *
   * Syntax:
   *
   *    math.acoth(x)
   *
   * Examples:
   *
   *    math.acoth(0.5)       // returns 0.8047189562170503
   *
   * See also:
   *
   *    acsch, asech
   *
   * @param {number | BigNumber | Complex} x  Function input
   * @return {number | BigNumber | Complex} Hyperbolic arccotangent of x
   */ return typed(name, {
        number: function number(x) {
            if (x >= 1 || x <= -1 || config.predictable) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["acothNumber"])(x);
            }
            return new Complex(x, 0).acoth();
        },
        Complex: function Complex(x) {
            return x.acoth();
        },
        BigNumber: function BigNumber(x) {
            return new _BigNumber(1).div(x).atanh();
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/trigonometry/acsc.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAcsc": (()=>createAcsc)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/trigonometry.js [app-ssr] (ecmascript)");
;
;
var name = 'acsc';
var dependencies = [
    'typed',
    'config',
    'Complex',
    'BigNumber'
];
var createAcsc = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config, Complex, BigNumber: _BigNumber } = _ref;
    /**
   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.
   *
   * To avoid confusion with the matrix arccosecant, this function does not
   * apply to matrices.
   *
   * Syntax:
   *
   *    math.acsc(x)
   *
   * Examples:
   *
   *    math.acsc(2)             // returns 0.5235987755982989
   *    math.acsc(0.5)           // returns Complex 1.5707963267948966 -1.3169578969248166i
   *    math.acsc(math.csc(1.5)) // returns number ~1.5
   *
   * See also:
   *
   *    csc, asin, asec
   *
   * @param {number | BigNumber | Complex} x   Function input
   * @return {number | BigNumber | Complex} The arc cosecant of x
   */ return typed(name, {
        number: function number(x) {
            if (x <= -1 || x >= 1 || config.predictable) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["acscNumber"])(x);
            }
            return new Complex(x, 0).acsc();
        },
        Complex: function Complex(x) {
            return x.acsc();
        },
        BigNumber: function BigNumber(x) {
            return new _BigNumber(1).div(x).asin();
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/trigonometry/acsch.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAcsch": (()=>createAcsch)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/trigonometry.js [app-ssr] (ecmascript)");
;
;
var name = 'acsch';
var dependencies = [
    'typed',
    'BigNumber'
];
var createAcsch = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, BigNumber: _BigNumber } = _ref;
    /**
   * Calculate the inverse hyperbolic cosecant of a value,
   * defined as `acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))`.
   *
   * To avoid confusion with the matrix inverse hyperbolic cosecant, this function
   * does not apply to matrices.
   *
   * Syntax:
   *
   *    math.acsch(x)
   *
   * Examples:
   *
   *    math.acsch(0.5)       // returns 1.4436354751788103
   *
   * See also:
   *
   *    asech, acoth
   *
   * @param {number | BigNumber | Complex} x  Function input
   * @return {number | BigNumber | Complex} Hyperbolic arccosecant of x
   */ return typed(name, {
        number: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["acschNumber"],
        Complex: function Complex(x) {
            return x.acsch();
        },
        BigNumber: function BigNumber(x) {
            return new _BigNumber(1).div(x).asinh();
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/trigonometry/asec.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAsec": (()=>createAsec)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/trigonometry.js [app-ssr] (ecmascript)");
;
;
var name = 'asec';
var dependencies = [
    'typed',
    'config',
    'Complex',
    'BigNumber'
];
var createAsec = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config, Complex, BigNumber: _BigNumber } = _ref;
    /**
   * Calculate the inverse secant of a value. Defined as `asec(x) = acos(1/x)`.
   *
   * To avoid confusion with the matrix arcsecant, this function does not
   * apply to matrices.
   *
   * Syntax:
   *
   *    math.asec(x)
   *
   * Examples:
   *
   *    math.asec(2)             // returns 1.0471975511965979
   *    math.asec(math.sec(1.5)) // returns 1.5
   *
   *    math.asec(0.5)           // returns Complex 0 + 1.3169578969248166i
   *
   * See also:
   *
   *    acos, acot, acsc
   *
   * @param {number | BigNumber | Complex} x  Function input
   * @return {number | BigNumber | Complex} The arc secant of x
   */ return typed(name, {
        number: function number(x) {
            if (x <= -1 || x >= 1 || config.predictable) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["asecNumber"])(x);
            }
            return new Complex(x, 0).asec();
        },
        Complex: function Complex(x) {
            return x.asec();
        },
        BigNumber: function BigNumber(x) {
            return new _BigNumber(1).div(x).acos();
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/trigonometry/asech.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAsech": (()=>createAsech)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/trigonometry.js [app-ssr] (ecmascript)");
;
;
var name = 'asech';
var dependencies = [
    'typed',
    'config',
    'Complex',
    'BigNumber'
];
var createAsech = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config, Complex, BigNumber: _BigNumber } = _ref;
    /**
   * Calculate the hyperbolic arcsecant of a value,
   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.
   *
   * To avoid confusion with the matrix hyperbolic arcsecant, this function
   * does not apply to matrices.
   *
   * Syntax:
   *
   *    math.asech(x)
   *
   * Examples:
   *
   *    math.asech(0.5)       // returns 1.3169578969248166
   *
   * See also:
   *
   *    acsch, acoth
   *
   * @param {number | BigNumber | Complex} x  Function input
   * @return {number | BigNumber | Complex} Hyperbolic arcsecant of x
   */ return typed(name, {
        number: function number(x) {
            if (x <= 1 && x >= -1 || config.predictable) {
                var xInv = 1 / x;
                if (xInv > 0 || config.predictable) {
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["asechNumber"])(x);
                }
                var ret = Math.sqrt(xInv * xInv - 1);
                return new Complex(Math.log(ret - xInv), Math.PI);
            }
            return new Complex(x, 0).asech();
        },
        Complex: function Complex(x) {
            return x.asech();
        },
        BigNumber: function BigNumber(x) {
            return new _BigNumber(1).div(x).acosh();
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/trigonometry/asin.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAsin": (()=>createAsin)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
var name = 'asin';
var dependencies = [
    'typed',
    'config',
    'Complex'
];
var createAsin = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config, Complex } = _ref;
    /**
   * Calculate the inverse sine of a value.
   *
   * To avoid confusion with the matric arcsine, this function does not apply
   * to matrices.
   *
   * Syntax:
   *
   *    math.asin(x)
   *
   * Examples:
   *
   *    math.asin(0.5)           // returns number 0.5235987755982989
   *    math.asin(math.sin(1.5)) // returns number ~1.5
   *
   *    math.asin(2)             // returns Complex 1.5707963267948966 -1.3169578969248166i
   *
   * See also:
   *
   *    sin, atan, acos
   *
   * @param {number | BigNumber | Complex} x   Function input
   * @return {number | BigNumber | Complex} The arc sine of x
   */ return typed(name, {
        number: function number(x) {
            if (x >= -1 && x <= 1 || config.predictable) {
                return Math.asin(x);
            } else {
                return new Complex(x, 0).asin();
            }
        },
        Complex: function Complex(x) {
            return x.asin();
        },
        BigNumber: function BigNumber(x) {
            return x.asin();
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/trigonometry/asinh.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAsinh": (()=>createAsinh)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/trigonometry.js [app-ssr] (ecmascript)");
;
;
var name = 'asinh';
var dependencies = [
    'typed'
];
var createAsinh = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed } = _ref;
    /**
   * Calculate the hyperbolic arcsine of a value,
   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.
   *
   * To avoid confusion with the matrix hyperbolic arcsine, this function
   * does not apply to matrices.
   *
   * Syntax:
   *
   *    math.asinh(x)
   *
   * Examples:
   *
   *    math.asinh(0.5)       // returns 0.48121182505960347
   *
   * See also:
   *
   *    acosh, atanh
   *
   * @param {number | BigNumber | Complex} x  Function input
   * @return {number | BigNumber | Complex} Hyperbolic arcsine of x
   */ return typed('asinh', {
        number: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["asinhNumber"],
        Complex: function Complex(x) {
            return x.asinh();
        },
        BigNumber: function BigNumber(x) {
            return x.asinh();
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/trigonometry/atan.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAtan": (()=>createAtan)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
var name = 'atan';
var dependencies = [
    'typed'
];
var createAtan = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed } = _ref;
    /**
   * Calculate the inverse tangent of a value.
   *
   * To avoid confusion with matrix arctangent, this function does not apply
   * to matrices.
   *
   * Syntax:
   *
   *    math.atan(x)
   *
   * Examples:
   *
   *    math.atan(0.5)           // returns number 0.4636476090008061
   *    math.atan(2)             // returns number 1.1071487177940904
   *    math.atan(math.tan(1.5)) // returns number 1.5
   *
   * See also:
   *
   *    tan, asin, acos
   *
   * @param {number | BigNumber | Complex} x   Function input
   * @return {number | BigNumber | Complex} The arc tangent of x
   */ return typed('atan', {
        number: function number(x) {
            return Math.atan(x);
        },
        Complex: function Complex(x) {
            return x.atan();
        },
        BigNumber: function BigNumber(x) {
            return x.atan();
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/trigonometry/atan2.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAtan2": (()=>createAtan2)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo02xDS0$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo02xDS0.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo03xDSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo03xDSf.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo09xS0Sf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo09xS0Sf.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo11xS0s$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo11xS0s.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo12xSfs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo12xSfs.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/type/matrix/utils/matrixAlgorithmSuite.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
var name = 'atan2';
var dependencies = [
    'typed',
    'matrix',
    'equalScalar',
    'BigNumber',
    'DenseMatrix',
    'concat'
];
var createAtan2 = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, matrix, equalScalar, BigNumber, DenseMatrix, concat } = _ref;
    var matAlgo02xDS0 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo02xDS0$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo02xDS0"])({
        typed,
        equalScalar
    });
    var matAlgo03xDSf = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo03xDSf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo03xDSf"])({
        typed
    });
    var matAlgo09xS0Sf = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo09xS0Sf$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo09xS0Sf"])({
        typed,
        equalScalar
    });
    var matAlgo11xS0s = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo11xS0s$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo11xS0s"])({
        typed,
        equalScalar
    });
    var matAlgo12xSfs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matAlgo12xSfs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatAlgo12xSfs"])({
        typed,
        DenseMatrix
    });
    var matrixAlgorithmSuite = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$type$2f$matrix$2f$utils$2f$matrixAlgorithmSuite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMatrixAlgorithmSuite"])({
        typed,
        matrix,
        concat
    });
    /**
   * Calculate the inverse tangent function with two arguments, y/x.
   * By providing two arguments, the right quadrant of the computed angle can be
   * determined.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.atan2(y, x)
   *
   * Examples:
   *
   *    math.atan2(2, 2) / math.pi       // returns number 0.25
   *
   *    const angle = math.unit(60, 'deg') // returns Unit 60 deg
   *    const x = math.cos(angle)
   *    const y = math.sin(angle)
   *
   *    math.atan(2)             // returns number 1.1071487177940904
   *
   * See also:
   *
   *    tan, atan, sin, cos
   *
   * @param {number | Array | Matrix} y  Second dimension
   * @param {number | Array | Matrix} x  First dimension
   * @return {number | Array | Matrix} Four-quadrant inverse tangent
   */ return typed(name, {
        'number, number': Math.atan2,
        // Complex numbers doesn't seem to have a reasonable implementation of
        // atan2(). Even Matlab removed the support, after they only calculated
        // the atan only on base of the real part of the numbers and ignored
        // the imaginary.
        'BigNumber, BigNumber': (y, x)=>BigNumber.atan2(y, x)
    }, matrixAlgorithmSuite({
        scalar: 'number | BigNumber',
        SS: matAlgo09xS0Sf,
        DS: matAlgo03xDSf,
        SD: matAlgo02xDS0,
        Ss: matAlgo11xS0s,
        sS: matAlgo12xSfs
    }));
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/trigonometry/atanh.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAtanh": (()=>createAtanh)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/trigonometry.js [app-ssr] (ecmascript)");
;
;
var name = 'atanh';
var dependencies = [
    'typed',
    'config',
    'Complex'
];
var createAtanh = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config, Complex } = _ref;
    /**
   * Calculate the hyperbolic arctangent of a value,
   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.
   *
   * To avoid confusion with the matrix hyperbolic arctangent, this function
   * does not apply to matrices.
   *
   * Syntax:
   *
   *    math.atanh(x)
   *
   * Examples:
   *
   *    math.atanh(0.5)       // returns 0.5493061443340549
   *
   * See also:
   *
   *    acosh, asinh
   *
   * @param {number | BigNumber | Complex} x  Function input
   * @return {number | BigNumber | Complex} Hyperbolic arctangent of x
   */ return typed(name, {
        number: function number(x) {
            if (x <= 1 && x >= -1 || config.predictable) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["atanhNumber"])(x);
            }
            return new Complex(x, 0).atanh();
        },
        Complex: function Complex(x) {
            return x.atanh();
        },
        BigNumber: function BigNumber(x) {
            return x.atanh();
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/trigonometry/trigUnit.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createTrigUnit": (()=>createTrigUnit)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
var createTrigUnit = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])('trigUnit', [
    'typed'
], (_ref)=>{
    var { typed } = _ref;
    return {
        Unit: typed.referToSelf((self)=>(x)=>{
                if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
                    throw new TypeError('Unit in function cot is no angle');
                }
                return typed.find(self, x.valueType())(x.value);
            })
    };
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/trigonometry/cos.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createCos": (()=>createCos)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$trigonometry$2f$trigUnit$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/trigonometry/trigUnit.js [app-ssr] (ecmascript)");
;
;
var name = 'cos';
var dependencies = [
    'typed'
];
var createCos = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed } = _ref;
    var trigUnit = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$trigonometry$2f$trigUnit$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createTrigUnit"])({
        typed
    });
    /**
   * Calculate the cosine of a value.
   *
   * To avoid confusion with the matrix cosine, this function does not
   * apply to matrices.
   *
   * Syntax:
   *
   *    math.cos(x)
   *
   * Examples:
   *
   *    math.cos(2)                      // returns number -0.4161468365471422
   *    math.cos(math.pi / 4)            // returns number  0.7071067811865475
   *    math.cos(math.unit(180, 'deg'))  // returns number -1
   *    math.cos(math.unit(60, 'deg'))   // returns number  0.5
   *
   *    const angle = 0.2
   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1
   *
   * See also:
   *
   *    cos, tan
   *
   * @param {number | BigNumber | Complex | Unit} x  Function input
   * @return {number | BigNumber | Complex} Cosine of x
   */ return typed(name, {
        number: Math.cos,
        'Complex | BigNumber': (x)=>x.cos()
    }, trigUnit);
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/trigonometry/cosh.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createCosh": (()=>createCosh)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/number.js [app-ssr] (ecmascript)");
;
;
var name = 'cosh';
var dependencies = [
    'typed'
];
var createCosh = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed } = _ref;
    /**
   * Calculate the hyperbolic cosine of a value,
   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.
   *
   * To avoid confusion with the matrix hyperbolic cosine, this function does
   * not apply to matrices.
   *
   * Syntax:
   *
   *    math.cosh(x)
   *
   * Examples:
   *
   *    math.cosh(0.5)       // returns number 1.1276259652063807
   *
   * See also:
   *
   *    sinh, tanh
   *
   * @param {number | BigNumber | Complex} x  Function input
   * @return {number | BigNumber | Complex} Hyperbolic cosine of x
   */ return typed(name, {
        number: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["cosh"],
        'Complex | BigNumber': (x)=>x.cosh()
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/trigonometry/cot.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createCot": (()=>createCot)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/trigonometry.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$trigonometry$2f$trigUnit$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/trigonometry/trigUnit.js [app-ssr] (ecmascript)");
;
;
;
var name = 'cot';
var dependencies = [
    'typed',
    'BigNumber'
];
var createCot = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, BigNumber: _BigNumber } = _ref;
    var trigUnit = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$trigonometry$2f$trigUnit$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createTrigUnit"])({
        typed
    });
    /**
   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.
   *
   * To avoid confusion with the matrix cotangent, this function does not
   * apply to matrices.
   *
   * Syntax:
   *
   *    math.cot(x)
   *
   * Examples:
   *
   *    math.cot(2)      // returns number -0.45765755436028577
   *    1 / math.tan(2)  // returns number -0.45765755436028577
   *
   * See also:
   *
   *    tan, sec, csc
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Cotangent of x
   */ return typed(name, {
        number: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["cotNumber"],
        Complex: (x)=>x.cot(),
        BigNumber: (x)=>new _BigNumber(1).div(x.tan())
    }, trigUnit);
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/trigonometry/coth.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createCoth": (()=>createCoth)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/trigonometry.js [app-ssr] (ecmascript)");
;
;
var name = 'coth';
var dependencies = [
    'typed',
    'BigNumber'
];
var createCoth = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, BigNumber: _BigNumber } = _ref;
    /**
   * Calculate the hyperbolic cotangent of a value,
   * defined as `coth(x) = 1 / tanh(x)`.
   *
   * To avoid confusion with the matrix hyperbolic cotangent, this function
   * does not apply to matrices.
   *
   * Syntax:
   *
   *    math.coth(x)
   *
   * Examples:
   *
   *    // coth(x) = 1 / tanh(x)
   *    math.coth(2)         // returns 1.0373147207275482
   *    1 / math.tanh(2)     // returns 1.0373147207275482
   *
   * See also:
   *
   *    sinh, tanh, cosh
   *
   * @param {number | BigNumber | Complex} x  Function input
   * @return {number | BigNumber | Complex} Hyperbolic cotangent of x
   */ return typed(name, {
        number: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["cothNumber"],
        Complex: (x)=>x.coth(),
        BigNumber: (x)=>new _BigNumber(1).div(x.tanh())
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/trigonometry/csc.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createCsc": (()=>createCsc)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/trigonometry.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$trigonometry$2f$trigUnit$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/trigonometry/trigUnit.js [app-ssr] (ecmascript)");
;
;
;
var name = 'csc';
var dependencies = [
    'typed',
    'BigNumber'
];
var createCsc = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, BigNumber: _BigNumber } = _ref;
    var trigUnit = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$trigonometry$2f$trigUnit$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createTrigUnit"])({
        typed
    });
    /**
   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.
   *
   * To avoid confusion with the matrix cosecant, this function does not
   * apply to matrices.
   *
   * Syntax:
   *
   *    math.csc(x)
   *
   * Examples:
   *
   *    math.csc(2)      // returns number 1.099750170294617
   *    1 / math.sin(2)  // returns number 1.099750170294617
   *
   * See also:
   *
   *    sin, sec, cot
   *
   * @param {number | BigNumber | Complex | Unit} x  Function input
   * @return {number | BigNumber | Complex} Cosecant of x
   */ return typed(name, {
        number: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["cscNumber"],
        Complex: (x)=>x.csc(),
        BigNumber: (x)=>new _BigNumber(1).div(x.sin())
    }, trigUnit);
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/trigonometry/csch.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createCsch": (()=>createCsch)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/trigonometry.js [app-ssr] (ecmascript)");
;
;
var name = 'csch';
var dependencies = [
    'typed',
    'BigNumber'
];
var createCsch = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, BigNumber: _BigNumber } = _ref;
    /**
   * Calculate the hyperbolic cosecant of a value,
   * defined as `csch(x) = 1 / sinh(x)`.
   *
   * To avoid confusion with the matrix hyperbolic cosecant, this function
   * does not apply to matrices.
   *
   * Syntax:
   *
   *    math.csch(x)
   *
   * Examples:
   *
   *    // csch(x) = 1/ sinh(x)
   *    math.csch(0.5)       // returns 1.9190347513349437
   *    1 / math.sinh(0.5)   // returns 1.9190347513349437
   *
   * See also:
   *
   *    sinh, sech, coth
   *
   * @param {number | BigNumber | Complex} x  Function input
   * @return {number | BigNumber | Complex} Hyperbolic cosecant of x
   */ return typed(name, {
        number: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["cschNumber"],
        Complex: (x)=>x.csch(),
        BigNumber: (x)=>new _BigNumber(1).div(x.sinh())
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/trigonometry/sec.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createSec": (()=>createSec)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/trigonometry.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$trigonometry$2f$trigUnit$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/trigonometry/trigUnit.js [app-ssr] (ecmascript)");
;
;
;
var name = 'sec';
var dependencies = [
    'typed',
    'BigNumber'
];
var createSec = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, BigNumber: _BigNumber } = _ref;
    var trigUnit = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$trigonometry$2f$trigUnit$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createTrigUnit"])({
        typed
    });
    /**
   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.
   *
   * To avoid confusion with the matrix secant, this function does not
   * apply to matrices.
   *
   * Syntax:
   *
   *    math.sec(x)
   *
   * Examples:
   *
   *    math.sec(2)      // returns number -2.4029979617223822
   *    1 / math.cos(2)  // returns number -2.4029979617223822
   *
   * See also:
   *
   *    cos, csc, cot
   *
   * @param {number | BigNumber | Complex | Unit} x  Function input
   * @return {number | BigNumber | Complex} Secant of x
   */ return typed(name, {
        number: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["secNumber"],
        Complex: (x)=>x.sec(),
        BigNumber: (x)=>new _BigNumber(1).div(x.cos())
    }, trigUnit);
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/trigonometry/sech.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createSech": (()=>createSech)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/trigonometry.js [app-ssr] (ecmascript)");
;
;
var name = 'sech';
var dependencies = [
    'typed',
    'BigNumber'
];
var createSech = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, BigNumber: _BigNumber } = _ref;
    /**
   * Calculate the hyperbolic secant of a value,
   * defined as `sech(x) = 1 / cosh(x)`.
   *
   * To avoid confusion with the matrix hyperbolic secant, this function does
   * not apply to matrices.
   *
   * Syntax:
   *
   *    math.sech(x)
   *
   * Examples:
   *
   *    // sech(x) = 1/ cosh(x)
   *    math.sech(0.5)       // returns 0.886818883970074
   *    1 / math.cosh(0.5)   // returns 0.886818883970074
   *
   * See also:
   *
   *    cosh, csch, coth
   *
   * @param {number | BigNumber | Complex} x  Function input
   * @return {number | BigNumber | Complex} Hyperbolic secant of x
   */ return typed(name, {
        number: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sechNumber"],
        Complex: (x)=>x.sech(),
        BigNumber: (x)=>new _BigNumber(1).div(x.cosh())
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/trigonometry/sin.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createSin": (()=>createSin)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$trigonometry$2f$trigUnit$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/trigonometry/trigUnit.js [app-ssr] (ecmascript)");
;
;
var name = 'sin';
var dependencies = [
    'typed'
];
var createSin = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed } = _ref;
    var trigUnit = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$trigonometry$2f$trigUnit$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createTrigUnit"])({
        typed
    });
    /**
   * Calculate the sine of a value.
   *
   * To avoid confusion with the matrix sine, this function does not apply
   * to matrices.
   *
   * Syntax:
   *
   *    math.sin(x)
   *
   * Examples:
   *
   *    math.sin(2)                      // returns number 0.9092974268256813
   *    math.sin(math.pi / 4)            // returns number 0.7071067811865475
   *    math.sin(math.unit(90, 'deg'))   // returns number 1
   *    math.sin(math.unit(30, 'deg'))   // returns number 0.5
   *
   *    const angle = 0.2
   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1
   *
   * See also:
   *
   *    cos, tan
   *
   * @param {number | BigNumber | Complex | Unit} x  Function input
   * @return {number | BigNumber | Complex} Sine of x
   */ return typed(name, {
        number: Math.sin,
        'Complex | BigNumber': (x)=>x.sin()
    }, trigUnit);
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/trigonometry/sinh.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createSinh": (()=>createSinh)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/trigonometry.js [app-ssr] (ecmascript)");
;
;
var name = 'sinh';
var dependencies = [
    'typed'
];
var createSinh = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed } = _ref;
    /**
   * Calculate the hyperbolic sine of a value,
   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.
   *
   * To avoid confusion with the matrix hyperbolic sine, this function does
   * not apply to matrices.
   *
   * Syntax:
   *
   *    math.sinh(x)
   *
   * Examples:
   *
   *    math.sinh(0.5)       // returns number 0.5210953054937474
   *
   * See also:
   *
   *    cosh, tanh
   *
   * @param {number | BigNumber | Complex} x  Function input
   * @return {number | BigNumber | Complex} Hyperbolic sine of x
   */ return typed(name, {
        number: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sinhNumber"],
        'Complex | BigNumber': (x)=>x.sinh()
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/trigonometry/tan.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createTan": (()=>createTan)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$trigonometry$2f$trigUnit$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/trigonometry/trigUnit.js [app-ssr] (ecmascript)");
;
;
var name = 'tan';
var dependencies = [
    'typed'
];
var createTan = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed } = _ref;
    var trigUnit = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$trigonometry$2f$trigUnit$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createTrigUnit"])({
        typed
    });
    /**
   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.
   *
   * To avoid confusion with the matrix tangent, this function does not apply
   * to matrices.
   *
   * Syntax:
   *
   *    math.tan(x)
   *
   * Examples:
   *
   *    math.tan(0.5)                    // returns number 0.5463024898437905
   *    math.sin(0.5) / math.cos(0.5)    // returns number 0.5463024898437905
   *    math.tan(math.pi / 4)            // returns number 1
   *    math.tan(math.unit(45, 'deg'))   // returns number 1
   *
   * See also:
   *
   *    atan, sin, cos
   *
   * @param {number | BigNumber | Complex | Unit} x  Function input
   * @return {number | BigNumber | Complex} Tangent of x
   */ return typed(name, {
        number: Math.tan,
        'Complex | BigNumber': (x)=>x.tan()
    }, trigUnit);
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/trigonometry/tanh.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createTanh": (()=>createTanh)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/number.js [app-ssr] (ecmascript)");
;
;
var name = 'tanh';
var dependencies = [
    'typed'
];
var createTanh = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed } = _ref;
    /**
   * Calculate the hyperbolic tangent of a value,
   * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.
   *
   * To avoid confusion with matrix hyperbolic tangent, this function does
   * not apply to matrices.
   *
   * Syntax:
   *
   *    math.tanh(x)
   *
   * Examples:
   *
   *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)
   *    math.tanh(0.5)                   // returns 0.46211715726000974
   *    math.sinh(0.5) / math.cosh(0.5)  // returns 0.46211715726000974
   *    1 / math.coth(0.5)               // returns 0.46211715726000974
   *
   * See also:
   *
   *    sinh, cosh, coth
   *
   * @param {number | BigNumber | Complex} x  Function input
   * @return {number | BigNumber | Complex} Hyperbolic tangent of x
   */ return typed('tanh', {
        number: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tanh"],
        'Complex | BigNumber': (x)=>x.tanh()
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/set/setCartesian.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createSetCartesian": (()=>createSetCartesian)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
;
var name = 'setCartesian';
var dependencies = [
    'typed',
    'size',
    'subset',
    'compareNatural',
    'Index',
    'DenseMatrix'
];
var createSetCartesian = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, size, subset, compareNatural, Index, DenseMatrix } = _ref;
    /**
   * Create the cartesian product of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays
   * and the values will be sorted in ascending order before the operation.
   *
   * Syntax:
   *
   *    math.setCartesian(set1, set2)
   *
   * Examples:
   *
   *    math.setCartesian([1, 2], [3, 4])        // returns [[1, 3], [1, 4], [2, 3], [2, 4]]
   *    math.setCartesian([4, 3], [2, 1])        // returns [[3, 1], [3, 2], [4, 1], [4, 2]]
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference, setPowerset
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The cartesian product of two (multi)sets
   */ return typed(name, {
        'Array | Matrix, Array | Matrix': function Array__Matrix_Array__Matrix(a1, a2) {
            var result = [];
            if (subset(size(a1), new Index(0)) !== 0 && subset(size(a2), new Index(0)) !== 0) {
                // if any of them is empty, return empty
                var b1 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural);
                var b2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural);
                result = [];
                for(var i = 0; i < b1.length; i++){
                    for(var j = 0; j < b2.length; j++){
                        result.push([
                            b1[i],
                            b2[j]
                        ]);
                    }
                }
            }
            // return an array, if both inputs were arrays
            if (Array.isArray(a1) && Array.isArray(a2)) {
                return result;
            }
            // return a matrix otherwise
            return new DenseMatrix(result);
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/set/setDifference.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createSetDifference": (()=>createSetDifference)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
;
var name = 'setDifference';
var dependencies = [
    'typed',
    'size',
    'subset',
    'compareNatural',
    'Index',
    'DenseMatrix'
];
var createSetDifference = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, size, subset, compareNatural, Index, DenseMatrix } = _ref;
    /**
   * Create the difference of two (multi)sets: every element of set1, that is not the element of set2.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setDifference(set1, set2)
   *
   * Examples:
   *
   *    math.setDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2]
   *    math.setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2]
   *
   * See also:
   *
   *    setUnion, setIntersect, setSymDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The difference of two (multi)sets
   */ return typed(name, {
        'Array | Matrix, Array | Matrix': function Array__Matrix_Array__Matrix(a1, a2) {
            var result;
            if (subset(size(a1), new Index(0)) === 0) {
                // empty-anything=empty
                result = [];
            } else if (subset(size(a2), new Index(0)) === 0) {
                // anything-empty=anything
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(a1.toArray());
            } else {
                var b1 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["identify"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
                var b2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["identify"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
                result = [];
                var inb2;
                for(var i = 0; i < b1.length; i++){
                    inb2 = false;
                    for(var j = 0; j < b2.length; j++){
                        if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
                            // the identifier is always a decimal int
                            inb2 = true;
                            break;
                        }
                    }
                    if (!inb2) {
                        result.push(b1[i]);
                    }
                }
            }
            // return an array, if both inputs were arrays
            if (Array.isArray(a1) && Array.isArray(a2)) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["generalize"])(result);
            }
            // return a matrix otherwise
            return new DenseMatrix((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["generalize"])(result));
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/set/setDistinct.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createSetDistinct": (()=>createSetDistinct)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
;
var name = 'setDistinct';
var dependencies = [
    'typed',
    'size',
    'subset',
    'compareNatural',
    'Index',
    'DenseMatrix'
];
var createSetDistinct = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, size, subset, compareNatural, Index, DenseMatrix } = _ref;
    /**
   * Collect the distinct elements of a multiset.
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setDistinct(set)
   *
   * Examples:
   *
   *    math.setDistinct([1, 1, 1, 2, 2, 3])        // returns [1, 2, 3]
   *
   * See also:
   *
   *    setMultiplicity
   *
   * @param {Array | Matrix}    a  A multiset
   * @return {Array | Matrix}    A set containing the distinc elements of the multiset
   */ return typed(name, {
        'Array | Matrix': function Array__Matrix(a) {
            var result;
            if (subset(size(a), new Index(0)) === 0) {
                // if empty, return empty
                result = [];
            } else {
                var b = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
                result = [];
                result.push(b[0]);
                for(var i = 1; i < b.length; i++){
                    if (compareNatural(b[i], b[i - 1]) !== 0) {
                        result.push(b[i]);
                    }
                }
            }
            // return an array, if the input was an array
            if (Array.isArray(a)) {
                return result;
            }
            // return a matrix otherwise
            return new DenseMatrix(result);
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/set/setIntersect.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createSetIntersect": (()=>createSetIntersect)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
;
var name = 'setIntersect';
var dependencies = [
    'typed',
    'size',
    'subset',
    'compareNatural',
    'Index',
    'DenseMatrix'
];
var createSetIntersect = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, size, subset, compareNatural, Index, DenseMatrix } = _ref;
    /**
   * Create the intersection of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setIntersect(set1, set2)
   *
   * Examples:
   *
   *    math.setIntersect([1, 2, 3, 4], [3, 4, 5, 6])            // returns [3, 4]
   *    math.setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [3, 4]
   *
   * See also:
   *
   *    setUnion, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The intersection of two (multi)sets
   */ return typed(name, {
        'Array | Matrix, Array | Matrix': function Array__Matrix_Array__Matrix(a1, a2) {
            var result;
            if (subset(size(a1), new Index(0)) === 0 || subset(size(a2), new Index(0)) === 0) {
                // of any of them is empty, return empty
                result = [];
            } else {
                var b1 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["identify"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
                var b2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["identify"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
                result = [];
                for(var i = 0; i < b1.length; i++){
                    for(var j = 0; j < b2.length; j++){
                        if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
                            // the identifier is always a decimal int
                            result.push(b1[i]);
                            break;
                        }
                    }
                }
            }
            // return an array, if both inputs were arrays
            if (Array.isArray(a1) && Array.isArray(a2)) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["generalize"])(result);
            }
            // return a matrix otherwise
            return new DenseMatrix((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["generalize"])(result));
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/set/setIsSubset.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createSetIsSubset": (()=>createSetIsSubset)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
;
var name = 'setIsSubset';
var dependencies = [
    'typed',
    'size',
    'subset',
    'compareNatural',
    'Index'
];
var createSetIsSubset = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, size, subset, compareNatural, Index } = _ref;
    /**
   * Check whether a (multi)set is a subset of another (multi)set. (Every element of set1 is the element of set2.)
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setIsSubset(set1, set2)
   *
   * Examples:
   *
   *    math.setIsSubset([1, 2], [3, 4, 5, 6])        // returns false
   *    math.setIsSubset([3, 4], [3, 4, 5, 6])        // returns true
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {boolean} Returns true when a1 is a subset of a2, returns false otherwise
   */ return typed(name, {
        'Array | Matrix, Array | Matrix': function Array__Matrix_Array__Matrix(a1, a2) {
            if (subset(size(a1), new Index(0)) === 0) {
                // empty is a subset of anything
                return true;
            } else if (subset(size(a2), new Index(0)) === 0) {
                // anything is not a subset of empty
                return false;
            }
            var b1 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["identify"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
            var b2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["identify"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
            var inb2;
            for(var i = 0; i < b1.length; i++){
                inb2 = false;
                for(var j = 0; j < b2.length; j++){
                    if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
                        // the identifier is always a decimal int
                        inb2 = true;
                        break;
                    }
                }
                if (inb2 === false) {
                    return false;
                }
            }
            return true;
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/set/setMultiplicity.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createSetMultiplicity": (()=>createSetMultiplicity)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
;
var name = 'setMultiplicity';
var dependencies = [
    'typed',
    'size',
    'subset',
    'compareNatural',
    'Index'
];
var createSetMultiplicity = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, size, subset, compareNatural, Index } = _ref;
    /**
   * Count the multiplicity of an element in a multiset.
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setMultiplicity(element, set)
   *
   * Examples:
   *
   *    math.setMultiplicity(1, [1, 2, 2, 4])    // returns 1
   *    math.setMultiplicity(2, [1, 2, 2, 4])    // returns 2
   *
   * See also:
   *
   *    setDistinct, setSize
   *
   * @param {number | BigNumber | Fraction | Complex} e  An element in the multiset
   * @param {Array | Matrix}     a  A multiset
   * @return {number}            The number of how many times the multiset contains the element
   */ return typed(name, {
        'number | BigNumber | Fraction | Complex, Array | Matrix': function number__BigNumber__Fraction__Complex_Array__Matrix(e, a) {
            if (subset(size(a), new Index(0)) === 0) {
                // if empty, return 0
                return 0;
            }
            var b = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(Array.isArray(a) ? a : a.toArray());
            var count = 0;
            for(var i = 0; i < b.length; i++){
                if (compareNatural(b[i], e) === 0) {
                    count++;
                }
            }
            return count;
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/set/setPowerset.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createSetPowerset": (()=>createSetPowerset)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
;
var name = 'setPowerset';
var dependencies = [
    'typed',
    'size',
    'subset',
    'compareNatural',
    'Index'
];
var createSetPowerset = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, size, subset, compareNatural, Index } = _ref;
    /**
   * Create the powerset of a (multi)set. (The powerset contains very possible subsets of a (multi)set.)
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setPowerset(set)
   *
   * Examples:
   *
   *    math.setPowerset([1, 2, 3])        // returns [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]
   *
   * See also:
   *
   *    setCartesian
   *
   * @param {Array | Matrix}    a  A (multi)set
   * @return {Array}    The powerset of the (multi)set
   */ return typed(name, {
        'Array | Matrix': function Array__Matrix(a) {
            if (subset(size(a), new Index(0)) === 0) {
                // if empty, return empty
                return [];
            }
            var b = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
            var result = [];
            var number = 0;
            while(number.toString(2).length <= b.length){
                result.push(_subset(b, number.toString(2).split('').reverse()));
                number++;
            }
            // can not return a matrix, because of the different size of the subarrays
            return _sort(result);
        }
    });
    "TURBOPACK unreachable";
    // create subset
    function _subset(array, bitarray) {
        var result = [];
        for(var i = 0; i < bitarray.length; i++){
            if (bitarray[i] === '1') {
                result.push(array[i]);
            }
        }
        return result;
    }
    // sort subsests by length
    function _sort(array) {
        var temp = [];
        for(var i = array.length - 1; i > 0; i--){
            for(var j = 0; j < i; j++){
                if (array[j].length > array[j + 1].length) {
                    temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                }
            }
        }
        return array;
    }
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/set/setSize.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createSetSize": (()=>createSetSize)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
;
var name = 'setSize';
var dependencies = [
    'typed',
    'compareNatural'
];
var createSetSize = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, compareNatural } = _ref;
    /**
   * Count the number of elements of a (multi)set. When a second parameter is 'true', count only the unique values.
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setSize(set)
   *    math.setSize(set, unique)
   *
   * Examples:
   *
   *    math.setSize([1, 2, 2, 4])          // returns 4
   *    math.setSize([1, 2, 2, 4], true)    // returns 3
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference
   *
   * @param {Array | Matrix} a  A multiset
   * @param {boolean} [unique]  If true, only the unique values are counted. False by default
   * @return {number}           The number of elements of the (multi)set
   */ return typed(name, {
        'Array | Matrix': function Array__Matrix(a) {
            return Array.isArray(a) ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(a).length : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(a.toArray()).length;
        },
        'Array | Matrix, boolean': function Array__Matrix_boolean(a, unique) {
            if (unique === false || a.length === 0) {
                return Array.isArray(a) ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(a).length : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(a.toArray()).length;
            } else {
                var b = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
                var count = 1;
                for(var i = 1; i < b.length; i++){
                    if (compareNatural(b[i], b[i - 1]) !== 0) {
                        count++;
                    }
                }
                return count;
            }
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/set/setSymDifference.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createSetSymDifference": (()=>createSetSymDifference)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
;
var name = 'setSymDifference';
var dependencies = [
    'typed',
    'size',
    'concat',
    'subset',
    'setDifference',
    'Index'
];
var createSetSymDifference = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, size, concat, subset, setDifference, Index } = _ref;
    /**
   * Create the symmetric difference of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setSymDifference(set1, set2)
   *
   * Examples:
   *
   *    math.setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 5, 6]
   *    math.setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 5, 6]
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The symmetric difference of two (multi)sets
   */ return typed(name, {
        'Array | Matrix, Array | Matrix': function Array__Matrix_Array__Matrix(a1, a2) {
            if (subset(size(a1), new Index(0)) === 0) {
                // if any of them is empty, return the other one
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(a2);
            } else if (subset(size(a2), new Index(0)) === 0) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(a1);
            }
            var b1 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(a1);
            var b2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(a2);
            return concat(setDifference(b1, b2), setDifference(b2, b1));
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/set/setUnion.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createSetUnion": (()=>createSetUnion)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
;
var name = 'setUnion';
var dependencies = [
    'typed',
    'size',
    'concat',
    'subset',
    'setIntersect',
    'setSymDifference',
    'Index'
];
var createSetUnion = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, size, concat, subset, setIntersect, setSymDifference, Index } = _ref;
    /**
   * Create the union of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setUnion(set1, set2)
   *
   * Examples:
   *
   *    math.setUnion([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 3, 4, 5, 6]
   *    math.setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 3, 4, 5, 6]
   *
   * See also:
   *
   *    setIntersect, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The union of two (multi)sets
   */ return typed(name, {
        'Array | Matrix, Array | Matrix': function Array__Matrix_Array__Matrix(a1, a2) {
            if (subset(size(a1), new Index(0)) === 0) {
                // if any of them is empty, return the other one
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(a2);
            } else if (subset(size(a2), new Index(0)) === 0) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(a1);
            }
            var b1 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(a1);
            var b2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(a2);
            return concat(setSymDifference(b1, b2), setIntersect(b1, b2));
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/geometry/distance.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createDistance": (()=>createDistance)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
;
var name = 'distance';
var dependencies = [
    'typed',
    'addScalar',
    'subtractScalar',
    'divideScalar',
    'multiplyScalar',
    'deepEqual',
    'sqrt',
    'abs'
];
var createDistance = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, addScalar, subtractScalar, multiplyScalar, divideScalar, deepEqual, sqrt, abs } = _ref;
    /**
    * Calculates:
    *    The eucledian distance between two points in N-dimensional spaces.
    *    Distance between point and a line in 2 and 3 dimensional spaces.
    *    Pairwise distance between a set of 2D or 3D points
    * NOTE:
    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c
    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)
    *
    * Syntax:
    *
    *    math.distance([x1,y1], [x2,y2])
    *    math.distance({pointOneX, pointOneY}, {pointTwoX, pointTwoY})
    *    math.distance([x1,y1,z1], [x2,y2,z2])
    *    math.distance({pointOneX, pointOneY, pointOneZ}, {pointTwoX, pointTwoY, pointTwoZ})
    *    math.distance([x1,y1,z1,a1], [x2,y2,z2,a2])
    *    math.distance([[x1,y1], [x2,y2], [x3,y3]])
    *    math.distance([[x1,y1,z1], [x2,y2,z2], [x3,y3,z3]])
    *    math.distance([pointX,pointY], [a,b,c])
    *    math.distance([pointX,pointY], [lineOnePtX,lineOnePtY], [lineTwoPtX,lineTwoPtY])
    *    math.distance({pointX, pointY}, {lineOnePtX, lineOnePtY}, {lineTwoPtX, lineTwoPtY})
    *    math.distance([pointX,pointY,pointZ], [x0, y0, z0, a, b, c])
    *    math.distance({pointX, pointY, pointZ}, {x0, y0, z0, a, b, c})
    *
    * Examples:
    *    math.distance([0,0], [4,4])                     // Returns 5.656854249492381
    *    math.distance(
    *     {pointOneX: 0, pointOneY: 0},
    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951
    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.7416573867739413
    *    math.distance(
    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},
    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3
    *    math.distance([1, 0, 1, 0], [0, -1, 0, -1])     // Returns 2
    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]
    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]
    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387
    *    math.distance([0, 0], [3, 0], [0, 4])        // Returns 2.4
    *    math.distance(
    *     {pointX: 0, pointY: 0},
    *     {lineOnePtX: 3, lineOnePtY: 0},
    *     {lineTwoPtX: 0, lineTwoPtY: 4})                // Returns 2.4
    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857
    *    math.distance(
    *     {pointX: 2, pointY: 3, pointZ: 1},
    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1})       // Returns 2.3204774044612857
    *
    * @param {Array | Matrix | Object} x    Co-ordinates of first point
    * @param {Array | Matrix | Object} y    Co-ordinates of second point
    * @return {Number | BigNumber} Returns the distance from two/three points
  */ return typed(name, {
        'Array, Array, Array': function Array_Array_Array(x, y, z) {
            // Point to Line 2D (x=Point, y=LinePoint1, z=LinePoint2)
            if (x.length === 2 && y.length === 2 && z.length === 2) {
                if (!_2d(x)) {
                    throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
                }
                if (!_2d(y)) {
                    throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');
                }
                if (!_2d(z)) {
                    throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');
                }
                if (deepEqual(y, z)) {
                    throw new TypeError('LinePoint1 should not be same with LinePoint2');
                }
                var xCoeff = subtractScalar(z[1], y[1]);
                var yCoeff = subtractScalar(y[0], z[0]);
                var constant = subtractScalar(multiplyScalar(z[0], y[1]), multiplyScalar(y[0], z[1]));
                return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);
            } else {
                throw new TypeError('Invalid Arguments: Try again');
            }
        },
        'Object, Object, Object': function Object_Object_Object(x, y, z) {
            if (Object.keys(x).length === 2 && Object.keys(y).length === 2 && Object.keys(z).length === 2) {
                if (!_2d(x)) {
                    throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');
                }
                if (!_2d(y)) {
                    throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers');
                }
                if (!_2d(z)) {
                    throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers');
                }
                if (deepEqual(_objectToArray(y), _objectToArray(z))) {
                    throw new TypeError('LinePoint1 should not be same with LinePoint2');
                }
                if ('pointX' in x && 'pointY' in x && 'lineOnePtX' in y && 'lineOnePtY' in y && 'lineTwoPtX' in z && 'lineTwoPtY' in z) {
                    var xCoeff = subtractScalar(z.lineTwoPtY, y.lineOnePtY);
                    var yCoeff = subtractScalar(y.lineOnePtX, z.lineTwoPtX);
                    var constant = subtractScalar(multiplyScalar(z.lineTwoPtX, y.lineOnePtY), multiplyScalar(y.lineOnePtX, z.lineTwoPtY));
                    return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);
                } else {
                    throw new TypeError('Key names do not match');
                }
            } else {
                throw new TypeError('Invalid Arguments: Try again');
            }
        },
        'Array, Array': function Array_Array(x, y) {
            // Point to Line 2D (x=[pointX, pointY], y=[x-coeff, y-coeff, const])
            if (x.length === 2 && y.length === 3) {
                if (!_2d(x)) {
                    throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
                }
                if (!_3d(y)) {
                    throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
                }
                return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);
            } else if (x.length === 3 && y.length === 6) {
                // Point to Line 3D
                if (!_3d(x)) {
                    throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
                }
                if (!_parametricLine(y)) {
                    throw new TypeError('Array with 6 numbers or BigNumbers expected for second argument');
                }
                return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);
            } else if (x.length === y.length && x.length > 0) {
                // Point to Point N-dimensions
                if (!_containsOnlyNumbers(x)) {
                    throw new TypeError('All values of an array should be numbers or BigNumbers');
                }
                if (!_containsOnlyNumbers(y)) {
                    throw new TypeError('All values of an array should be numbers or BigNumbers');
                }
                return _euclideanDistance(x, y);
            } else {
                throw new TypeError('Invalid Arguments: Try again');
            }
        },
        'Object, Object': function Object_Object(x, y) {
            if (Object.keys(x).length === 2 && Object.keys(y).length === 3) {
                if (!_2d(x)) {
                    throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');
                }
                if (!_3d(y)) {
                    throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers');
                }
                if ('pointX' in x && 'pointY' in x && 'xCoeffLine' in y && 'yCoeffLine' in y && 'constant' in y) {
                    return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);
                } else {
                    throw new TypeError('Key names do not match');
                }
            } else if (Object.keys(x).length === 3 && Object.keys(y).length === 6) {
                // Point to Line 3D
                if (!_3d(x)) {
                    throw new TypeError('Values of pointX, pointY and pointZ should be numbers or BigNumbers');
                }
                if (!_parametricLine(y)) {
                    throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers or BigNumbers');
                }
                if ('pointX' in x && 'pointY' in x && 'x0' in y && 'y0' in y && 'z0' in y && 'a' in y && 'b' in y && 'c' in y) {
                    return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);
                } else {
                    throw new TypeError('Key names do not match');
                }
            } else if (Object.keys(x).length === 2 && Object.keys(y).length === 2) {
                // Point to Point 2D
                if (!_2d(x)) {
                    throw new TypeError('Values of pointOneX and pointOneY should be numbers or BigNumbers');
                }
                if (!_2d(y)) {
                    throw new TypeError('Values of pointTwoX and pointTwoY should be numbers or BigNumbers');
                }
                if ('pointOneX' in x && 'pointOneY' in x && 'pointTwoX' in y && 'pointTwoY' in y) {
                    return _euclideanDistance([
                        x.pointOneX,
                        x.pointOneY
                    ], [
                        y.pointTwoX,
                        y.pointTwoY
                    ]);
                } else {
                    throw new TypeError('Key names do not match');
                }
            } else if (Object.keys(x).length === 3 && Object.keys(y).length === 3) {
                // Point to Point 3D
                if (!_3d(x)) {
                    throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers');
                }
                if (!_3d(y)) {
                    throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers');
                }
                if ('pointOneX' in x && 'pointOneY' in x && 'pointOneZ' in x && 'pointTwoX' in y && 'pointTwoY' in y && 'pointTwoZ' in y) {
                    return _euclideanDistance([
                        x.pointOneX,
                        x.pointOneY,
                        x.pointOneZ
                    ], [
                        y.pointTwoX,
                        y.pointTwoY,
                        y.pointTwoZ
                    ]);
                } else {
                    throw new TypeError('Key names do not match');
                }
            } else {
                throw new TypeError('Invalid Arguments: Try again');
            }
        },
        Array: function Array1(arr) {
            if (!_pairwise(arr)) {
                throw new TypeError('Incorrect array format entered for pairwise distance calculation');
            }
            return _distancePairwise(arr);
        }
    });
    "TURBOPACK unreachable";
    function _isNumber(a) {
        // distance supports numbers and bignumbers
        return typeof a === 'number' || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isBigNumber"])(a);
    }
    function _2d(a) {
        // checks if the number of arguments are correct in count and are valid (should be numbers)
        if (a.constructor !== Array) {
            a = _objectToArray(a);
        }
        return _isNumber(a[0]) && _isNumber(a[1]);
    }
    function _3d(a) {
        // checks if the number of arguments are correct in count and are valid (should be numbers)
        if (a.constructor !== Array) {
            a = _objectToArray(a);
        }
        return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]);
    }
    function _containsOnlyNumbers(a) {
        // checks if the number of arguments are correct in count and are valid (should be numbers)
        if (!Array.isArray(a)) {
            a = _objectToArray(a);
        }
        return a.every(_isNumber);
    }
    function _parametricLine(a) {
        if (a.constructor !== Array) {
            a = _objectToArray(a);
        }
        return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]) && _isNumber(a[3]) && _isNumber(a[4]) && _isNumber(a[5]);
    }
    function _objectToArray(o) {
        var keys = Object.keys(o);
        var a = [];
        for(var i = 0; i < keys.length; i++){
            a.push(o[keys[i]]);
        }
        return a;
    }
    function _pairwise(a) {
        // checks for valid arguments passed to _distancePairwise(Array)
        if (a[0].length === 2 && _isNumber(a[0][0]) && _isNumber(a[0][1])) {
            if (a.some((aI)=>aI.length !== 2 || !_isNumber(aI[0]) || !_isNumber(aI[1]))) {
                return false;
            }
        } else if (a[0].length === 3 && _isNumber(a[0][0]) && _isNumber(a[0][1]) && _isNumber(a[0][2])) {
            if (a.some((aI)=>aI.length !== 3 || !_isNumber(aI[0]) || !_isNumber(aI[1]) || !_isNumber(aI[2]))) {
                return false;
            }
        } else {
            return false;
        }
        return true;
    }
    function _distancePointLine2D(x, y, a, b, c) {
        var num = abs(addScalar(addScalar(multiplyScalar(a, x), multiplyScalar(b, y)), c));
        var den = sqrt(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)));
        return divideScalar(num, den);
    }
    function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c) {
        var num = [
            subtractScalar(multiplyScalar(subtractScalar(y0, y), c), multiplyScalar(subtractScalar(z0, z), b)),
            subtractScalar(multiplyScalar(subtractScalar(z0, z), a), multiplyScalar(subtractScalar(x0, x), c)),
            subtractScalar(multiplyScalar(subtractScalar(x0, x), b), multiplyScalar(subtractScalar(y0, y), a))
        ];
        num = sqrt(addScalar(addScalar(multiplyScalar(num[0], num[0]), multiplyScalar(num[1], num[1])), multiplyScalar(num[2], num[2])));
        var den = sqrt(addScalar(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)), multiplyScalar(c, c)));
        return divideScalar(num, den);
    }
    function _euclideanDistance(x, y) {
        var vectorSize = x.length;
        var result = 0;
        var diff = 0;
        for(var i = 0; i < vectorSize; i++){
            diff = subtractScalar(x[i], y[i]);
            result = addScalar(multiplyScalar(diff, diff), result);
        }
        return sqrt(result);
    }
    function _distancePairwise(a) {
        var result = [];
        var pointA = [];
        var pointB = [];
        for(var i = 0; i < a.length - 1; i++){
            for(var j = i + 1; j < a.length; j++){
                if (a[0].length === 2) {
                    pointA = [
                        a[i][0],
                        a[i][1]
                    ];
                    pointB = [
                        a[j][0],
                        a[j][1]
                    ];
                } else if (a[0].length === 3) {
                    pointA = [
                        a[i][0],
                        a[i][1],
                        a[i][2]
                    ];
                    pointB = [
                        a[j][0],
                        a[j][1],
                        a[j][2]
                    ];
                }
                result.push(_euclideanDistance(pointA, pointB));
            }
        }
        return result;
    }
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/geometry/intersect.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createIntersect": (()=>createIntersect)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
var name = 'intersect';
var dependencies = [
    'typed',
    'config',
    'abs',
    'add',
    'addScalar',
    'matrix',
    'multiply',
    'multiplyScalar',
    'divideScalar',
    'subtract',
    'smaller',
    'equalScalar',
    'flatten',
    'isZero',
    'isNumeric'
];
var createIntersect = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config, abs, add, addScalar, matrix, multiply, multiplyScalar, divideScalar, subtract, smaller, equalScalar, flatten, isZero, isNumeric } = _ref;
    /**
   * Calculates the point of intersection of two lines in two or three dimensions
   * and of a line and a plane in three dimensions. The inputs are in the form of
   * arrays or 1 dimensional matrices. The line intersection functions return null
   * if the lines do not meet.
   *
   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.
   *
   * Syntax:
   *
   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)
   *    math.intersect(endPoint1, endPoint2, planeCoefficients)
   *
   * Examples:
   *
   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10])              // Returns [5, 5]
   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0])  // Returns [5, 5, 0]
   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])            // Returns [7, -4, 3]
   *
   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line
   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line
   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line
   *                              OR Co-efficients of the plane's equation
   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line
   *                              OR undefined if the calculation is for line and plane
   * @return {Array}              Returns the point of intersection of lines/lines-planes
   */ return typed('intersect', {
        'Array, Array, Array': _AAA,
        'Array, Array, Array, Array': _AAAA,
        'Matrix, Matrix, Matrix': function Matrix_Matrix_Matrix(x, y, plane) {
            var arr = _AAA(x.valueOf(), y.valueOf(), plane.valueOf());
            return arr === null ? null : matrix(arr);
        },
        'Matrix, Matrix, Matrix, Matrix': function Matrix_Matrix_Matrix_Matrix(w, x, y, z) {
            // TODO: output matrix type should match input matrix type
            var arr = _AAAA(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf());
            return arr === null ? null : matrix(arr);
        }
    });
    "TURBOPACK unreachable";
    function _AAA(x, y, plane) {
        x = _coerceArr(x);
        y = _coerceArr(y);
        plane = _coerceArr(plane);
        if (!_3d(x)) {
            throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
        }
        if (!_3d(y)) {
            throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
        }
        if (!_4d(plane)) {
            throw new TypeError('Array with 4 numbers expected as third argument');
        }
        return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);
    }
    function _AAAA(w, x, y, z) {
        w = _coerceArr(w);
        x = _coerceArr(x);
        y = _coerceArr(y);
        z = _coerceArr(z);
        if (w.length === 2) {
            if (!_2d(w)) {
                throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
            }
            if (!_2d(x)) {
                throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');
            }
            if (!_2d(y)) {
                throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');
            }
            if (!_2d(z)) {
                throw new TypeError('Array with 2 numbers or BigNumbers expected for fourth argument');
            }
            return _intersect2d(w, x, y, z);
        } else if (w.length === 3) {
            if (!_3d(w)) {
                throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
            }
            if (!_3d(x)) {
                throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
            }
            if (!_3d(y)) {
                throw new TypeError('Array with 3 numbers or BigNumbers expected for third argument');
            }
            if (!_3d(z)) {
                throw new TypeError('Array with 3 numbers or BigNumbers expected for fourth argument');
            }
            return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);
        } else {
            throw new TypeError('Arrays with two or thee dimensional points expected');
        }
    }
    /** Coerce row and column 2-dim arrays to 1-dim array */ function _coerceArr(arr) {
        // row matrix
        if (arr.length === 1) return arr[0];
        // column matrix
        if (arr.length > 1 && Array.isArray(arr[0])) {
            if (arr.every((el)=>Array.isArray(el) && el.length === 1)) return flatten(arr);
        }
        return arr;
    }
    function _2d(x) {
        return x.length === 2 && isNumeric(x[0]) && isNumeric(x[1]);
    }
    function _3d(x) {
        return x.length === 3 && isNumeric(x[0]) && isNumeric(x[1]) && isNumeric(x[2]);
    }
    function _4d(x) {
        return x.length === 4 && isNumeric(x[0]) && isNumeric(x[1]) && isNumeric(x[2]) && isNumeric(x[3]);
    }
    function _intersect2d(p1a, p1b, p2a, p2b) {
        var o1 = p1a;
        var o2 = p2a;
        var d1 = subtract(o1, p1b);
        var d2 = subtract(o2, p2b);
        var det = subtract(multiplyScalar(d1[0], d2[1]), multiplyScalar(d2[0], d1[1]));
        if (isZero(det)) return null;
        if (smaller(abs(det), config.relTol)) {
            return null;
        }
        var d20o11 = multiplyScalar(d2[0], o1[1]);
        var d21o10 = multiplyScalar(d2[1], o1[0]);
        var d20o21 = multiplyScalar(d2[0], o2[1]);
        var d21o20 = multiplyScalar(d2[1], o2[0]);
        var t = divideScalar(addScalar(subtract(subtract(d20o11, d21o10), d20o21), d21o20), det);
        return add(multiply(d1, t), o1);
    }
    function _intersect3dHelper(a, b, c, d, e, f, g, h, i, j, k, l) {
        // (a - b)*(c - d) + (e - f)*(g - h) + (i - j)*(k - l)
        var add1 = multiplyScalar(subtract(a, b), subtract(c, d));
        var add2 = multiplyScalar(subtract(e, f), subtract(g, h));
        var add3 = multiplyScalar(subtract(i, j), subtract(k, l));
        return addScalar(addScalar(add1, add2), add3);
    }
    function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {
        var d1343 = _intersect3dHelper(x1, x3, x4, x3, y1, y3, y4, y3, z1, z3, z4, z3);
        var d4321 = _intersect3dHelper(x4, x3, x2, x1, y4, y3, y2, y1, z4, z3, z2, z1);
        var d1321 = _intersect3dHelper(x1, x3, x2, x1, y1, y3, y2, y1, z1, z3, z2, z1);
        var d4343 = _intersect3dHelper(x4, x3, x4, x3, y4, y3, y4, y3, z4, z3, z4, z3);
        var d2121 = _intersect3dHelper(x2, x1, x2, x1, y2, y1, y2, y1, z2, z1, z2, z1);
        var numerator = subtract(multiplyScalar(d1343, d4321), multiplyScalar(d1321, d4343));
        var denominator = subtract(multiplyScalar(d2121, d4343), multiplyScalar(d4321, d4321));
        if (isZero(denominator)) return null;
        var ta = divideScalar(numerator, denominator);
        var tb = divideScalar(addScalar(d1343, multiplyScalar(ta, d4321)), d4343);
        var pax = addScalar(x1, multiplyScalar(ta, subtract(x2, x1)));
        var pay = addScalar(y1, multiplyScalar(ta, subtract(y2, y1)));
        var paz = addScalar(z1, multiplyScalar(ta, subtract(z2, z1)));
        var pbx = addScalar(x3, multiplyScalar(tb, subtract(x4, x3)));
        var pby = addScalar(y3, multiplyScalar(tb, subtract(y4, y3)));
        var pbz = addScalar(z3, multiplyScalar(tb, subtract(z4, z3)));
        if (equalScalar(pax, pbx) && equalScalar(pay, pby) && equalScalar(paz, pbz)) {
            return [
                pax,
                pay,
                paz
            ];
        } else {
            return null;
        }
    }
    function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c) {
        var x1x = multiplyScalar(x1, x);
        var x2x = multiplyScalar(x2, x);
        var y1y = multiplyScalar(y1, y);
        var y2y = multiplyScalar(y2, y);
        var z1z = multiplyScalar(z1, z);
        var z2z = multiplyScalar(z2, z);
        var numerator = subtract(subtract(subtract(c, x1x), y1y), z1z);
        var denominator = subtract(subtract(subtract(addScalar(addScalar(x2x, y2y), z2z), x1x), y1y), z1z);
        var t = divideScalar(numerator, denominator);
        var px = addScalar(x1, multiplyScalar(t, subtract(x2, x1)));
        var py = addScalar(y1, multiplyScalar(t, subtract(y2, y1)));
        var pz = addScalar(z1, multiplyScalar(t, subtract(z2, z1)));
        return [
            px,
            py,
            pz
        ];
    // TODO: Add cases when line is parallel to the plane:
    //       (a) no intersection,
    //       (b) line contained in plane
    }
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/probability/combinations.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createCombinations": (()=>createCombinations)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$combinations$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/combinations.js [app-ssr] (ecmascript)");
;
;
var name = 'combinations';
var dependencies = [
    'typed'
];
var createCombinations = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed } = _ref;
    /**
   * Compute the number of ways of picking `k` unordered outcomes from `n`
   * possibilities.
   *
   * Combinations only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   * Syntax:
   *
   *     math.combinations(n, k)
   *
   * Examples:
   *
   *    math.combinations(7, 5) // returns 21
   *
   * See also:
   *
   *    combinationsWithRep, permutations, factorial
   *
   * @param {number | BigNumber} n    Total number of objects in the set
   * @param {number | BigNumber} k    Number of objects in the subset
   * @return {number | BigNumber}     Number of possible combinations.
   */ return typed(name, {
        'number, number': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$combinations$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["combinationsNumber"],
        'BigNumber, BigNumber': function BigNumber_BigNumber(n, k) {
            var BigNumber = n.constructor;
            var result, i;
            var nMinusk = n.minus(k);
            var one = new BigNumber(1);
            if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
                throw new TypeError('Positive integer value expected in function combinations');
            }
            if (k.gt(n)) {
                throw new TypeError('k must be less than n in function combinations');
            }
            result = one;
            if (k.lt(nMinusk)) {
                for(i = one; i.lte(nMinusk); i = i.plus(one)){
                    result = result.times(k.plus(i)).dividedBy(i);
                }
            } else {
                for(i = one; i.lte(k); i = i.plus(one)){
                    result = result.times(nMinusk.plus(i)).dividedBy(i);
                }
            }
            return result;
        }
    });
});
/**
 * Test whether BigNumber n is a positive integer
 * @param {BigNumber} n
 * @returns {boolean} isPositiveInteger
 */ function isPositiveInteger(n) {
    return n.isInteger() && n.gte(0);
}
}}),
"[project]/node_modules/mathjs/lib/esm/function/probability/combinationsWithRep.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createCombinationsWithRep": (()=>createCombinationsWithRep)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/number.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$product$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/product.js [app-ssr] (ecmascript)");
;
;
;
var name = 'combinationsWithRep';
var dependencies = [
    'typed'
];
var createCombinationsWithRep = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed } = _ref;
    /**
   * Compute the number of ways of picking `k` unordered outcomes from `n`
   * possibilities, allowing individual outcomes to be repeated more than once.
   *
   * CombinationsWithRep only takes integer arguments.
   * The following condition must be enforced: k <= n + k -1.
   *
   * Syntax:
   *
   *     math.combinationsWithRep(n, k)
   *
   * Examples:
   *
   *    math.combinationsWithRep(7, 5) // returns 462
   *
   * See also:
   *
   *    combinations, permutations, factorial
   *
   * @param {number | BigNumber} n    Total number of objects in the set
   * @param {number | BigNumber} k    Number of objects in the subset
   * @return {number | BigNumber}     Number of possible combinations with replacement.
   */ return typed(name, {
        'number, number': function number_number(n, k) {
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isInteger"])(n) || n < 0) {
                throw new TypeError('Positive integer value expected in function combinationsWithRep');
            }
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isInteger"])(k) || k < 0) {
                throw new TypeError('Positive integer value expected in function combinationsWithRep');
            }
            if (n < 1) {
                throw new TypeError('k must be less than or equal to n + k - 1');
            }
            if (k < n - 1) {
                var _prodrange = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$product$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["product"])(n, n + k - 1);
                return _prodrange / (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$product$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["product"])(1, k);
            }
            var prodrange = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$product$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["product"])(k + 1, n + k - 1);
            return prodrange / (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$product$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["product"])(1, n - 1);
        },
        'BigNumber, BigNumber': function BigNumber_BigNumber(n, k) {
            var BigNumber = n.constructor;
            var result, i;
            var one = new BigNumber(1);
            var nMinusOne = n.minus(one);
            if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
                throw new TypeError('Positive integer value expected in function combinationsWithRep');
            }
            if (n.lt(one)) {
                throw new TypeError('k must be less than or equal to n + k - 1 in function combinationsWithRep');
            }
            result = one;
            if (k.lt(nMinusOne)) {
                for(i = one; i.lte(nMinusOne); i = i.plus(one)){
                    result = result.times(k.plus(i)).dividedBy(i);
                }
            } else {
                for(i = one; i.lte(k); i = i.plus(one)){
                    result = result.times(nMinusOne.plus(i)).dividedBy(i);
                }
            }
            return result;
        }
    });
});
/**
 * Test whether BigNumber n is a positive integer
 * @param {BigNumber} n
 * @returns {boolean} isPositiveInteger
 */ function isPositiveInteger(n) {
    return n.isInteger() && n.gte(0);
}
}}),
"[project]/node_modules/mathjs/lib/esm/function/probability/gamma.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createGamma": (()=>createGamma)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$probability$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/probability.js [app-ssr] (ecmascript)");
;
;
var name = 'gamma';
var dependencies = [
    'typed',
    'config',
    'multiplyScalar',
    'pow',
    'BigNumber',
    'Complex'
];
var createGamma = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config, multiplyScalar, pow, BigNumber: _BigNumber, Complex } = _ref;
    /**
   * Compute the gamma function of a value using Lanczos approximation for
   * small values, and an extended Stirling approximation for large values.
   *
   * To avoid confusion with the matrix Gamma function, this function does
   * not apply to matrices.
   *
   * Syntax:
   *
   *    math.gamma(n)
   *
   * Examples:
   *
   *    math.gamma(5)       // returns 24
   *    math.gamma(-0.5)    // returns -3.5449077018110335
   *    math.gamma(math.i)  // returns -0.15494982830180973 - 0.49801566811835596i
   *
   * See also:
   *
   *    combinations, factorial, permutations
   *
   * @param {number | BigNumber | Complex} n   A real or complex number
   * @return {number | BigNumber | Complex}    The gamma of `n`
   */ function gammaComplex(n) {
        if (n.im === 0) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$probability$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["gammaNumber"])(n.re);
        }
        // Lanczos approximation doesn't work well with real part lower than 0.5
        // So reflection formula is required
        if (n.re < 0.5) {
            // Euler's reflection formula
            // gamma(1-z) * gamma(z) = PI / sin(PI * z)
            // real part of Z should not be integer [sin(PI) == 0 -> 1/0 - undefined]
            // thanks to imperfect sin implementation sin(PI * n) != 0
            // we can safely use it anyway
            var _t = new Complex(1 - n.re, -n.im);
            var r = new Complex(Math.PI * n.re, Math.PI * n.im);
            return new Complex(Math.PI).div(r.sin()).div(gammaComplex(_t));
        }
        // Lanczos approximation
        // z -= 1
        n = new Complex(n.re - 1, n.im);
        // x = gammaPval[0]
        var x = new Complex(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$probability$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["gammaP"][0], 0);
        // for (i, gammaPval) in enumerate(gammaP):
        for(var i = 1; i < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$probability$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["gammaP"].length; ++i){
            // x += gammaPval / (z + i)
            var gammaPval = new Complex(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$probability$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["gammaP"][i], 0);
            x = x.add(gammaPval.div(n.add(i)));
        }
        // t = z + gammaG + 0.5
        var t = new Complex(n.re + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$probability$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["gammaG"] + 0.5, n.im);
        // y = sqrt(2 * pi) * t ** (z + 0.5) * exp(-t) * x
        var twoPiSqrt = Math.sqrt(2 * Math.PI);
        var tpow = t.pow(n.add(0.5));
        var expt = t.neg().exp();
        // y = [x] * [sqrt(2 * pi)] * [t ** (z + 0.5)] * [exp(-t)]
        return x.mul(twoPiSqrt).mul(tpow).mul(expt);
    }
    return typed(name, {
        number: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$probability$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["gammaNumber"],
        Complex: gammaComplex,
        BigNumber: function BigNumber(n) {
            if (n.isInteger()) {
                return n.isNegative() || n.isZero() ? new _BigNumber(Infinity) : bigFactorial(n.minus(1));
            }
            if (!n.isFinite()) {
                return new _BigNumber(n.isNegative() ? NaN : Infinity);
            }
            throw new Error('Integer BigNumber expected');
        }
    });
    "TURBOPACK unreachable";
    /**
   * Calculate factorial for a BigNumber
   * @param {BigNumber} n
   * @returns {BigNumber} Returns the factorial of n
   */ function bigFactorial(n) {
        if (n < 8) {
            return new _BigNumber([
                1,
                1,
                2,
                6,
                24,
                120,
                720,
                5040
            ][n]);
        }
        var precision = config.precision + (Math.log(n.toNumber()) | 0);
        var Big = _BigNumber.clone({
            precision
        });
        if (n % 2 === 1) {
            return n.times(bigFactorial(new _BigNumber(n - 1)));
        }
        var p = n;
        var prod = new Big(n);
        var sum = n.toNumber();
        while(p > 2){
            p -= 2;
            sum += p;
            prod = prod.times(sum);
        }
        return new _BigNumber(prod.toPrecision(_BigNumber.precision));
    }
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/probability/lgamma.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* eslint-disable no-loss-of-precision */ // References
// ----------
// [1] Hare, "Computing the Principal Branch of log-Gamma", Journal of Algorithms, 1997.
// [2] https://math.stackexchange.com/questions/1338753/how-do-i-calculate-values-for-gamma-function-with-complex-arguments
__turbopack_context__.s({
    "createLgamma": (()=>createLgamma)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$probability$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/plain/number/probability.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/number.js [app-ssr] (ecmascript)");
;
;
;
var name = 'lgamma';
var dependencies = [
    'Complex',
    'typed'
];
var createLgamma = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { Complex, typed } = _ref;
    // Stirling series is non-convergent, we need to use the recurrence `lgamma(z) = lgamma(z+1) - log z` to get
    // sufficient accuracy.
    //
    // These two values are copied from Scipy implementation:
    // https://github.com/scipy/scipy/blob/v1.8.0/scipy/special/_loggamma.pxd#L37
    var SMALL_RE = 7;
    var SMALL_IM = 7;
    /**
   * The coefficients are B[2*n]/(2*n*(2*n - 1)) where B[2*n] is the (2*n)th Bernoulli number. See (1.1) in [1].
   *
   * If you cannot access the paper, can also get these values from the formula in [2].
   *
   *    1 /     12 = 0.00833333333333333333333333333333
   *    1 /    360 = 0.00277777777777777777777777777778
   * ...
   * 3617 / 133400 = 0.02955065359477124183006535947712
   */ var coeffs = [
        -2.955065359477124183e-2,
        6.4102564102564102564e-3,
        -1.9175269175269175269e-3,
        8.4175084175084175084e-4,
        -5.952380952380952381e-4,
        7.9365079365079365079e-4,
        -2.7777777777777777778e-3,
        8.3333333333333333333e-2
    ];
    /**
   * Logarithm of the gamma function for real, positive numbers and complex numbers,
   * using Lanczos approximation for numbers and Stirling series for complex numbers.
   *
   * Syntax:
   *
   *    math.lgamma(n)
   *
   * Examples:
   *
   *    math.lgamma(5)       // returns 3.178053830347945
   *    math.lgamma(0)       // returns Infinity
   *    math.lgamma(-0.5)    // returns NaN
   *    math.lgamma(math.i)  // returns -0.6509231993018536 - 1.8724366472624294i
   *
   * See also:
   *
   *    gamma
   *
   * @param {number | Complex} n   A real or complex number
   * @return {number | Complex}    The log gamma of `n`
   */ return typed(name, {
        number: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$probability$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["lgammaNumber"],
        Complex: lgammaComplex,
        BigNumber: function BigNumber() {
            throw new Error("mathjs doesn't yet provide an implementation of the algorithm lgamma for BigNumber");
        }
    });
    "TURBOPACK unreachable";
    function lgammaComplex(n) {
        var TWOPI = 6.2831853071795864769252842; // 2*pi
        var LOGPI = 1.1447298858494001741434262; // log(pi)
        var REFLECTION = 0.1;
        if (n.isNaN()) {
            return new Complex(NaN, NaN);
        } else if (n.im === 0) {
            return new Complex((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$probability$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["lgammaNumber"])(n.re), 0);
        } else if (n.re >= SMALL_RE || Math.abs(n.im) >= SMALL_IM) {
            return lgammaStirling(n);
        } else if (n.re <= REFLECTION) {
            // Reflection formula. see Proposition 3.1 in [1]
            var tmp = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["copysign"])(TWOPI, n.im) * Math.floor(0.5 * n.re + 0.25);
            var a = n.mul(Math.PI).sin().log();
            var b = lgammaComplex(new Complex(1 - n.re, -n.im));
            return new Complex(LOGPI, tmp).sub(a).sub(b);
        } else if (n.im >= 0) {
            return lgammaRecurrence(n);
        } else {
            return lgammaRecurrence(n.conjugate()).conjugate();
        }
    }
    function lgammaStirling(z) {
        // formula ref in [2]
        // computation ref:
        // https://github.com/scipy/scipy/blob/v1.8.0/scipy/special/_loggamma.pxd#L101
        // left part
        // x (log(x) - 1) + 1/2 (log(2PI) - log(x))
        // => (x - 0.5) * log(x) - x + log(2PI) / 2
        var leftPart = z.sub(0.5).mul(z.log()).sub(z).add(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$plain$2f$number$2f$probability$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["lnSqrt2PI"]);
        // right part
        var rz = new Complex(1, 0).div(z);
        var rzz = rz.div(z);
        var a = coeffs[0];
        var b = coeffs[1];
        var r = 2 * rzz.re;
        var s = rzz.re * rzz.re + rzz.im * rzz.im;
        for(var i = 2; i < 8; i++){
            var tmp = b;
            b = -s * a + coeffs[i];
            a = r * a + tmp;
        }
        var rightPart = rz.mul(rzz.mul(a).add(b));
        // plus left and right
        return leftPart.add(rightPart);
    }
    function lgammaRecurrence(z) {
        // computation ref:
        // https://github.com/scipy/scipy/blob/v1.8.0/scipy/special/_loggamma.pxd#L78
        var signflips = 0;
        var sb = 0;
        var shiftprod = z;
        z = z.add(1);
        while(z.re <= SMALL_RE){
            shiftprod = shiftprod.mul(z);
            var nsb = shiftprod.im < 0 ? 1 : 0;
            if (nsb !== 0 && sb === 0) signflips++;
            sb = nsb;
            z = z.add(1);
        }
        return lgammaStirling(z).sub(shiftprod.log()).sub(new Complex(0, signflips * 2 * Math.PI * 1));
    }
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/probability/factorial.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createFactorial": (()=>createFactorial)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/collection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
;
var name = 'factorial';
var dependencies = [
    'typed',
    'gamma'
];
var createFactorial = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, gamma } = _ref;
    /**
   * Compute the factorial of a value
   *
   * Factorial only supports an integer value as argument.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.factorial(n)
   *
   * Examples:
   *
   *    math.factorial(5)    // returns 120
   *    math.factorial(3)    // returns 6
   *
   * See also:
   *
   *    combinations, combinationsWithRep, gamma, permutations
   *
   * @param {number | BigNumber | Array | Matrix} n   An integer number
   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`
   */ return typed(name, {
        number: function number(n) {
            if (n < 0) {
                throw new Error('Value must be non-negative');
            }
            return gamma(n + 1);
        },
        BigNumber: function BigNumber(n) {
            if (n.isNegative()) {
                throw new Error('Value must be non-negative');
            }
            return gamma(n.plus(1));
        },
        'Array | Matrix': typed.referToSelf((self)=>(n)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepMap"])(n, self))
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/probability/kldivergence.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createKldivergence": (()=>createKldivergence)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
var name = 'kldivergence';
var dependencies = [
    'typed',
    'matrix',
    'divide',
    'sum',
    'multiply',
    'map',
    'dotDivide',
    'log',
    'isNumeric'
];
var createKldivergence = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, matrix, divide, sum, multiply, map, dotDivide, log, isNumeric } = _ref;
    /**
     * Calculate the Kullback-Leibler (KL) divergence  between two distributions
     *
     * Syntax:
     *
     *     math.kldivergence(x, y)
     *
     * Examples:
     *
     *     math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])   //returns 0.24376698773121153
     *
     *
     * @param  {Array | Matrix} q    First vector
     * @param  {Array | Matrix} p    Second vector
     * @return {number}              Returns distance between q and p
     */ return typed(name, {
        'Array, Array': function Array_Array(q, p) {
            return _kldiv(matrix(q), matrix(p));
        },
        'Matrix, Array': function Matrix_Array(q, p) {
            return _kldiv(q, matrix(p));
        },
        'Array, Matrix': function Array_Matrix(q, p) {
            return _kldiv(matrix(q), p);
        },
        'Matrix, Matrix': function Matrix_Matrix(q, p) {
            return _kldiv(q, p);
        }
    });
    "TURBOPACK unreachable";
    function _kldiv(q, p) {
        var plength = p.size().length;
        var qlength = q.size().length;
        if (plength > 1) {
            throw new Error('first object must be one dimensional');
        }
        if (qlength > 1) {
            throw new Error('second object must be one dimensional');
        }
        if (plength !== qlength) {
            throw new Error('Length of two vectors must be equal');
        }
        // Before calculation, apply normalization
        var sumq = sum(q);
        if (sumq === 0) {
            throw new Error('Sum of elements in first object must be non zero');
        }
        var sump = sum(p);
        if (sump === 0) {
            throw new Error('Sum of elements in second object must be non zero');
        }
        var qnorm = divide(q, sum(q));
        var pnorm = divide(p, sum(p));
        var result = sum(multiply(qnorm, map(dotDivide(qnorm, pnorm), (x)=>log(x))));
        if (isNumeric(result)) {
            return result;
        } else {
            return Number.NaN;
        }
    }
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/probability/multinomial.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createMultinomial": (()=>createMultinomial)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/collection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
;
var name = 'multinomial';
var dependencies = [
    'typed',
    'add',
    'divide',
    'multiply',
    'factorial',
    'isInteger',
    'isPositive'
];
var createMultinomial = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, add, divide, multiply, factorial, isInteger, isPositive } = _ref;
    /**
   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.
   *
   * multinomial takes one array of integers as an argument.
   * The following condition must be enforced: every ai <= 0
   *
   * Syntax:
   *
   *     math.multinomial(a) // a is an array type
   *
   * Examples:
   *
   *    math.multinomial([1,2,1]) // returns 12
   *
   * See also:
   *
   *    combinations, factorial
   *
   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset
   * @return {Number | BigNumber}         Multinomial coefficient.
   */ return typed(name, {
        'Array | Matrix': function Array__Matrix(a) {
            var sum = 0;
            var denom = 1;
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["deepForEach"])(a, function(ai) {
                if (!isInteger(ai) || !isPositive(ai)) {
                    throw new TypeError('Positive integer value expected in function multinomial');
                }
                sum = add(sum, ai);
                denom = multiply(denom, factorial(ai));
            });
            return divide(factorial(sum), denom);
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/probability/permutations.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createPermutations": (()=>createPermutations)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/number.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$product$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/product.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
;
;
var name = 'permutations';
var dependencies = [
    'typed',
    'factorial'
];
var createPermutations = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, factorial } = _ref;
    /**
   * Compute the number of ways of obtaining an ordered subset of `k` elements
   * from a set of `n` elements.
   *
   * Permutations only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   * Syntax:
   *
   *     math.permutations(n)
   *     math.permutations(n, k)
   *
   * Examples:
   *
   *    math.permutations(5)     // 120
   *    math.permutations(5, 3)  // 60
   *
   * See also:
   *
   *    combinations, combinationsWithRep, factorial
   *
   * @param {number | BigNumber} n   The number of objects in total
   * @param {number | BigNumber} [k] The number of objects in the subset
   * @return {number | BigNumber}    The number of permutations
   */ return typed(name, {
        'number | BigNumber': factorial,
        'number, number': function number_number(n, k) {
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isInteger"])(n) || n < 0) {
                throw new TypeError('Positive integer value expected in function permutations');
            }
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isInteger"])(k) || k < 0) {
                throw new TypeError('Positive integer value expected in function permutations');
            }
            if (k > n) {
                throw new TypeError('second argument k must be less than or equal to first argument n');
            }
            // Permute n objects, k at a time
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$product$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["product"])(n - k + 1, n);
        },
        'BigNumber, BigNumber': function BigNumber_BigNumber(n, k) {
            var result, i;
            if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
                throw new TypeError('Positive integer value expected in function permutations');
            }
            if (k.gt(n)) {
                throw new TypeError('second argument k must be less than or equal to first argument n');
            }
            var one = n.mul(0).add(1);
            result = one;
            for(i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)){
                result = result.times(i);
            }
            return result;
        }
    });
});
/**
 * Test whether BigNumber n is a positive integer
 * @param {BigNumber} n
 * @returns {boolean} isPositiveInteger
 */ function isPositiveInteger(n) {
    return n.isInteger() && n.gte(0);
}
}}),
"[project]/node_modules/mathjs/lib/esm/function/probability/util/seededRNG.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createRng": (()=>createRng)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$seedrandom$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/seedrandom/index.js [app-ssr] (ecmascript)");
;
var singletonRandom = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$seedrandom$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(Date.now());
function createRng(randomSeed) {
    var random;
    // create a new random generator with given seed
    function setSeed(seed) {
        random = seed === null ? singletonRandom : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$seedrandom$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(String(seed));
    }
    // initialize a seeded pseudo random number generator with config's random seed
    setSeed(randomSeed);
    // wrapper function so the rng can be updated via generator
    function rng() {
        return random();
    }
    return rng;
}
}}),
"[project]/node_modules/mathjs/lib/esm/function/probability/pickRandom.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createPickRandom": (()=>createPickRandom)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$probability$2f$util$2f$seededRNG$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/probability/util/seededRNG.js [app-ssr] (ecmascript)");
;
;
;
;
var name = 'pickRandom';
var dependencies = [
    'typed',
    'config',
    '?on'
];
var createPickRandom = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config, on } = _ref;
    // seeded pseudo random number generator
    var rng = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$probability$2f$util$2f$seededRNG$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createRng"])(config.randomSeed);
    if (on) {
        on('config', function(curr, prev) {
            if (curr.randomSeed !== prev.randomSeed) {
                rng = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$probability$2f$util$2f$seededRNG$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createRng"])(curr.randomSeed);
            }
        });
    }
    /**
   * Random pick one or more values from a one dimensional array.
   * Array elements are picked using a random function with uniform or weighted distribution.
   *
   * Syntax:
   *
   *     math.pickRandom(array)
   *     math.pickRandom(array, number)
   *     math.pickRandom(array, weights)
   *     math.pickRandom(array, number, weights)
   *     math.pickRandom(array, weights, number)
   *     math.pickRandom(array, { weights, number, elementWise })
   *
   * Examples:
   *
   *     math.pickRandom([3, 6, 12, 2])                  // returns one of the values in the array
   *     math.pickRandom([3, 6, 12, 2], 2)               // returns an array of two of the values in the array
   *     math.pickRandom([3, 6, 12, 2], { number: 2 })   // returns an array of two of the values in the array
   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1])    // returns one of the values in the array with weighted distribution
   *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]) // returns an array of two of the values in the array with weighted distribution
   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2) // returns an array of two of the values in the array with weighted distribution
   *
   *     math.pickRandom([{x: 1.0, y: 2.0}, {x: 1.1, y: 2.0}], { elementWise: false })
   *         // returns one of the items in the array
   *
   * See also:
   *
   *     random, randomInt
   *
   * @param {Array | Matrix} array     A one dimensional array
   * @param {Int} number               An int or float
   * @param {Array | Matrix} weights   An array of ints or floats
   * @return {number | Array}          Returns a single random value from array when number is undefined.
   *                                   Returns an array with the configured number of elements when number is defined.
   */ return typed(name, {
        'Array | Matrix': function Array__Matrix(possibles) {
            return _pickRandom(possibles, {});
        },
        'Array | Matrix, Object': function Array__Matrix_Object(possibles, options) {
            return _pickRandom(possibles, options);
        },
        'Array | Matrix, number': function Array__Matrix_number(possibles, number) {
            return _pickRandom(possibles, {
                number
            });
        },
        'Array | Matrix, Array | Matrix': function Array__Matrix_Array__Matrix(possibles, weights) {
            return _pickRandom(possibles, {
                weights
            });
        },
        'Array | Matrix, Array | Matrix, number': function Array__Matrix_Array__Matrix_number(possibles, weights, number) {
            return _pickRandom(possibles, {
                number,
                weights
            });
        },
        'Array | Matrix, number, Array | Matrix': function Array__Matrix_number_Array__Matrix(possibles, number, weights) {
            return _pickRandom(possibles, {
                number,
                weights
            });
        }
    });
    "TURBOPACK unreachable";
    /**
   * @param {Array | Matrix} possibles
   * @param {{
   *   number?: number,
   *   weights?: Array | Matrix,
   *   elementWise: boolean
   * }} options
   * @returns {number | Array}
   * @private
   */ function _pickRandom(possibles, _ref2) {
        var { number, weights, elementWise = true } = _ref2;
        var single = typeof number === 'undefined';
        if (single) {
            number = 1;
        }
        var createMatrix = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isMatrix"])(possibles) ? possibles.create : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isMatrix"])(weights) ? weights.create : null;
        possibles = possibles.valueOf(); // get Array
        if (weights) {
            weights = weights.valueOf(); // get Array
        }
        if (elementWise === true) {
            possibles = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(possibles);
            weights = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flatten"])(weights);
        }
        var totalWeights = 0;
        if (typeof weights !== 'undefined') {
            if (weights.length !== possibles.length) {
                throw new Error('Weights must have the same length as possibles');
            }
            for(var i = 0, len = weights.length; i < len; i++){
                if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isNumber"])(weights[i]) || weights[i] < 0) {
                    throw new Error('Weights must be an array of positive numbers');
                }
                totalWeights += weights[i];
            }
        }
        var length = possibles.length;
        var result = [];
        var pick;
        while(result.length < number){
            if (typeof weights === 'undefined') {
                pick = possibles[Math.floor(rng() * length)];
            } else {
                var randKey = rng() * totalWeights;
                for(var _i = 0, _len = possibles.length; _i < _len; _i++){
                    randKey -= weights[_i];
                    if (randKey < 0) {
                        pick = possibles[_i];
                        break;
                    }
                }
            }
            result.push(pick);
        }
        return single ? result[0] : createMatrix ? createMatrix(result) : result;
    }
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/probability/util/randomMatrix.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * This is a util function for generating a random matrix recursively.
 * @param {number[]} size
 * @param {function} random
 * @returns {Array}
 */ __turbopack_context__.s({
    "randomMatrix": (()=>randomMatrix)
});
function randomMatrix(size, random) {
    var data = [];
    size = size.slice(0);
    if (size.length > 1) {
        for(var i = 0, length = size.shift(); i < length; i++){
            data.push(randomMatrix(size, random));
        }
    } else {
        for(var _i = 0, _length = size.shift(); _i < _length; _i++){
            data.push(random());
        }
    }
    return data;
}
}}),
"[project]/node_modules/mathjs/lib/esm/function/probability/random.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createRandom": (()=>createRandom),
    "createRandomNumber": (()=>createRandomNumber)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$probability$2f$util$2f$seededRNG$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/probability/util/seededRNG.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$probability$2f$util$2f$randomMatrix$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/probability/util/randomMatrix.js [app-ssr] (ecmascript)");
;
;
;
;
var name = 'random';
var dependencies = [
    'typed',
    'config',
    '?on'
];
var createRandom = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config, on } = _ref;
    // seeded pseudo random number generator
    var rng = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$probability$2f$util$2f$seededRNG$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createRng"])(config.randomSeed);
    if (on) {
        on('config', function(curr, prev) {
            if (curr.randomSeed !== prev.randomSeed) {
                rng = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$probability$2f$util$2f$seededRNG$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createRng"])(curr.randomSeed);
            }
        });
    }
    /**
   * Return a random number larger or equal to `min` and smaller than `max`
   * using a uniform distribution.
   *
   * Syntax:
   *
   *     math.random()                // generate a random number between 0 and 1
   *     math.random(max)             // generate a random number between 0 and max
   *     math.random(min, max)        // generate a random number between min and max
   *     math.random(size)            // generate a matrix with random numbers between 0 and 1
   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max
   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max
   *
   * Examples:
   *
   *     math.random()       // returns a random number between 0 and 1
   *     math.random(100)    // returns a random number between 0 and 100
   *     math.random(30, 40) // returns a random number between 30 and 40
   *     math.random([2, 3]) // returns a 2x3 matrix with random numbers between 0 and 1
   *
   * See also:
   *
   *     randomInt, pickRandom
   *
   * @param {Array | Matrix} [size] If provided, an array or matrix with given
   *                                size and filled with random values is returned
   * @param {number} [min]  Minimum boundary for the random value, included
   * @param {number} [max]  Maximum boundary for the random value, excluded
   * @return {number | Array | Matrix} A random number
   */ return typed(name, {
        '': ()=>_random(0, 1),
        number: (max)=>_random(0, max),
        'number, number': (min, max)=>_random(min, max),
        'Array | Matrix': (size)=>_randomMatrix(size, 0, 1),
        'Array | Matrix, number': (size, max)=>_randomMatrix(size, 0, max),
        'Array | Matrix, number, number': (size, min, max)=>_randomMatrix(size, min, max)
    });
    "TURBOPACK unreachable";
    function _randomMatrix(size, min, max) {
        var res = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$probability$2f$util$2f$randomMatrix$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["randomMatrix"])(size.valueOf(), ()=>_random(min, max));
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isMatrix"])(size) ? size.create(res, 'number') : res;
    }
    function _random(min, max) {
        return min + rng() * (max - min);
    }
});
var createRandomNumber = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, [
    'typed',
    'config',
    '?on'
], (_ref2)=>{
    var { typed, config, on, matrix } = _ref2;
    // seeded pseudo random number generator1
    var rng = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$probability$2f$util$2f$seededRNG$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createRng"])(config.randomSeed);
    if (on) {
        on('config', function(curr, prev) {
            if (curr.randomSeed !== prev.randomSeed) {
                rng = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$probability$2f$util$2f$seededRNG$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createRng"])(curr.randomSeed);
            }
        });
    }
    return typed(name, {
        '': ()=>_random(0, 1),
        number: (max)=>_random(0, max),
        'number, number': (min, max)=>_random(min, max)
    });
    "TURBOPACK unreachable";
    function _random(min, max) {
        return min + rng() * (max - min);
    }
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/probability/randomInt.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createRandomInt": (()=>createRandomInt)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$probability$2f$util$2f$randomMatrix$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/probability/util/randomMatrix.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$probability$2f$util$2f$seededRNG$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/function/probability/util/seededRNG.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-ssr] (ecmascript)");
;
;
;
;
var name = 'randomInt';
var dependencies = [
    'typed',
    'config',
    '?on'
];
var createRandomInt = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, config, on } = _ref;
    // seeded pseudo random number generator
    var rng = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$probability$2f$util$2f$seededRNG$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createRng"])(config.randomSeed);
    if (on) {
        on('config', function(curr, prev) {
            if (curr.randomSeed !== prev.randomSeed) {
                rng = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$probability$2f$util$2f$seededRNG$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createRng"])(curr.randomSeed);
            }
        });
    }
    /**
   * Return a random integer number larger or equal to `min` and smaller than `max`
   * using a uniform distribution.
   *
   * Syntax:
   *
   *     math.randomInt()                // generate a random integer between 0 and 1
   *     math.randomInt(max)             // generate a random integer between 0 and max
   *     math.randomInt(min, max)        // generate a random integer between min and max
   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1
   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max
   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max
   *
   * Examples:
   *
   *     math.randomInt(100)    // returns a random integer between 0 and 100
   *     math.randomInt(30, 40) // returns a random integer between 30 and 40
   *     math.randomInt([2, 3]) // returns a 2x3 matrix with random integers between 0 and 1
   *
   * See also:
   *
   *     random, pickRandom
   *
   * @param {Array | Matrix} [size] If provided, an array or matrix with given
   *                                size and filled with random values is returned
   * @param {number} [min]  Minimum boundary for the random value, included
   * @param {number} [max]  Maximum boundary for the random value, excluded
   * @return {number | Array | Matrix} A random integer value
   */ return typed(name, {
        '': ()=>_randomInt(0, 1),
        number: (max)=>_randomInt(0, max),
        'number, number': (min, max)=>_randomInt(min, max),
        'Array | Matrix': (size)=>_randomIntMatrix(size, 0, 1),
        'Array | Matrix, number': (size, max)=>_randomIntMatrix(size, 0, max),
        'Array | Matrix, number, number': (size, min, max)=>_randomIntMatrix(size, min, max)
    });
    "TURBOPACK unreachable";
    function _randomIntMatrix(size, min, max) {
        var res = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$function$2f$probability$2f$util$2f$randomMatrix$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["randomMatrix"])(size.valueOf(), ()=>_randomInt(min, max));
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isMatrix"])(size) ? size.create(res, 'number') : res;
    }
    function _randomInt(min, max) {
        return Math.floor(min + rng() * (max - min));
    }
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/combinatorics/stirlingS2.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createStirlingS2": (()=>createStirlingS2)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/is.js [app-ssr] (ecmascript)");
;
;
var name = 'stirlingS2';
var dependencies = [
    'typed',
    'addScalar',
    'subtractScalar',
    'multiplyScalar',
    'divideScalar',
    'pow',
    'factorial',
    'combinations',
    'isNegative',
    'isInteger',
    'number',
    '?bignumber',
    'larger'
];
var createStirlingS2 = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, addScalar, subtractScalar, multiplyScalar, divideScalar, pow, factorial, combinations, isNegative, isInteger, number, bignumber, larger } = _ref;
    var smallCache = [];
    var bigCache = [];
    /**
   * The Stirling numbers of the second kind, counts the number of ways to partition
   * a set of n labelled objects into k nonempty unlabelled subsets.
   * stirlingS2 only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   *  If n = k or k = 1 <= n, then s(n,k) = 1
   *  If k = 0 < n, then s(n,k) = 0
   *
   * Note that if either n or k is supplied as a BigNumber, the result will be
   * as well.
   *
   * Syntax:
   *
   *   math.stirlingS2(n, k)
   *
   * Examples:
   *
   *    math.stirlingS2(5, 3) //returns 25
   *
   * See also:
   *
   *    bellNumbers
   *
   * @param {Number | BigNumber} n    Total number of objects in the set
   * @param {Number | BigNumber} k    Number of objects in the subset
   * @return {Number | BigNumber}     S(n,k)
   */ return typed(name, {
        'number | BigNumber, number | BigNumber': function number__BigNumber_number__BigNumber(n, k) {
            if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {
                throw new TypeError('Non-negative integer value expected in function stirlingS2');
            } else if (larger(k, n)) {
                throw new TypeError('k must be less than or equal to n in function stirlingS2');
            }
            var big = !((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isNumber"])(n) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$is$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isNumber"])(k));
            var cache = big ? bigCache : smallCache;
            var make = big ? bignumber : number;
            var nn = number(n);
            var nk = number(k);
            /* See if we already have the value: */ if (cache[nn] && cache[nn].length > nk) {
                return cache[nn][nk];
            }
            /* Fill the cache */ for(var m = 0; m <= nn; ++m){
                if (!cache[m]) {
                    cache[m] = [
                        m === 0 ? make(1) : make(0)
                    ];
                }
                if (m === 0) continue;
                var row = cache[m];
                var prev = cache[m - 1];
                for(var i = row.length; i <= m && i <= nk; ++i){
                    if (i === m) {
                        row[i] = 1;
                    } else {
                        row[i] = addScalar(multiplyScalar(make(i), prev[i]), prev[i - 1]);
                    }
                }
            }
            return cache[nn][nk];
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/combinatorics/bellNumbers.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createBellNumbers": (()=>createBellNumbers)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
var name = 'bellNumbers';
var dependencies = [
    'typed',
    'addScalar',
    'isNegative',
    'isInteger',
    'stirlingS2'
];
var createBellNumbers = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, addScalar, isNegative, isInteger, stirlingS2 } = _ref;
    /**
   * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.
   * bellNumbers only takes integer arguments.
   * The following condition must be enforced: n >= 0
   *
   * Syntax:
   *
   *   math.bellNumbers(n)
   *
   * Examples:
   *
   *    math.bellNumbers(3) // returns 5
   *    math.bellNumbers(8) // returns 4140
   *
   * See also:
   *
   *    stirlingS2
   *
   * @param {Number | BigNumber} n    Total number of objects in the set
   * @return {Number | BigNumber}     B(n)
   */ return typed(name, {
        'number | BigNumber': function number__BigNumber(n) {
            if (!isInteger(n) || isNegative(n)) {
                throw new TypeError('Non-negative integer value expected in function bellNumbers');
            }
            // Sum (k=0, n) S(n,k).
            var result = 0;
            for(var i = 0; i <= n; i++){
                result = addScalar(result, stirlingS2(n, i));
            }
            return result;
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/combinatorics/catalan.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createCatalan": (()=>createCatalan)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
var name = 'catalan';
var dependencies = [
    'typed',
    'addScalar',
    'divideScalar',
    'multiplyScalar',
    'combinations',
    'isNegative',
    'isInteger'
];
var createCatalan = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, addScalar, divideScalar, multiplyScalar, combinations, isNegative, isInteger } = _ref;
    /**
   * The Catalan Numbers enumerate combinatorial structures of many different types.
   * catalan only takes integer arguments.
   * The following condition must be enforced: n >= 0
   *
   * Syntax:
   *
   *   math.catalan(n)
   *
   * Examples:
   *
   *    math.catalan(3) // returns 5
   *    math.catalan(8) // returns 1430
   *
   * See also:
   *
   *    bellNumbers
   *
   * @param {Number | BigNumber} n    nth Catalan number
   * @return {Number | BigNumber}     Cn(n)
   */ return typed(name, {
        'number | BigNumber': function number__BigNumber(n) {
            if (!isInteger(n) || isNegative(n)) {
                throw new TypeError('Non-negative integer value expected in function catalan');
            }
            return divideScalar(combinations(multiplyScalar(n, 2), n), addScalar(n, 1));
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/combinatorics/composition.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createComposition": (()=>createComposition)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
var name = 'composition';
var dependencies = [
    'typed',
    'addScalar',
    'combinations',
    'isNegative',
    'isPositive',
    'isInteger',
    'larger'
];
var createComposition = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, addScalar, combinations, isPositive, isNegative, isInteger, larger } = _ref;
    /**
   * The composition counts of n into k parts.
   *
   * composition only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   * Syntax:
   *
   *   math.composition(n, k)
   *
   * Examples:
   *
   *    math.composition(5, 3) // returns 6
   *
   * See also:
   *
   *    combinations
   *
   * @param {Number | BigNumber} n    Total number of objects in the set
   * @param {Number | BigNumber} k    Number of objects in the subset
   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.
   */ return typed(name, {
        'number | BigNumber, number | BigNumber': function number__BigNumber_number__BigNumber(n, k) {
            if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {
                throw new TypeError('Positive integer value expected in function composition');
            } else if (larger(k, n)) {
                throw new TypeError('k must be less than or equal to n in function composition');
            }
            return combinations(addScalar(n, -1), addScalar(k, -1));
        }
    });
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/signal/zpk2tf.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createZpk2tf": (()=>createZpk2tf)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
var name = 'zpk2tf';
var dependencies = [
    'typed',
    'add',
    'multiply',
    'Complex',
    'number'
];
var createZpk2tf = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, add, multiply, Complex, number } = _ref;
    /**
     * Compute the transfer function of a zero-pole-gain model.
     *
     * Syntax:
     *      math.zpk2tf(z, p, k)
     *
     * Examples:
     *    math.zpk2tf([1, 2], [-1, -2], 1)    // returns [[1, -3, 2], [1, 3, 2]]
     *
     * See also:
     *   freqz
     *
     * @param {Array} z Array of zeros values
     * @param {Array} p Array of poles values
     * @param {number} k Gain value
     * @return {Array} Two dimensional array containing the numerator (first row) and denominator (second row) polynomials
     *
     */ return typed(name, {
        'Array,Array,number': function ArrayArrayNumber(z, p, k) {
            return _zpk2tf(z, p, k);
        },
        'Array,Array': function ArrayArray(z, p) {
            return _zpk2tf(z, p, 1);
        },
        'Matrix,Matrix,number': function MatrixMatrixNumber(z, p, k) {
            return _zpk2tf(z.valueOf(), p.valueOf(), k);
        },
        'Matrix,Matrix': function MatrixMatrix(z, p) {
            return _zpk2tf(z.valueOf(), p.valueOf(), 1);
        }
    });
    "TURBOPACK unreachable";
    function _zpk2tf(z, p, k) {
        // if z is bignumber, convert it to number
        if (z.some((el)=>el.type === 'BigNumber')) {
            z = z.map((el)=>number(el));
        }
        // if p is bignumber, convert it to number
        if (p.some((el)=>el.type === 'BigNumber')) {
            p = p.map((el)=>number(el));
        }
        var num = [
            Complex(1, 0)
        ];
        var den = [
            Complex(1, 0)
        ];
        for(var i = 0; i < z.length; i++){
            var zero = z[i];
            if (typeof zero === 'number') zero = Complex(zero, 0);
            num = _multiply(num, [
                Complex(1, 0),
                Complex(-zero.re, -zero.im)
            ]);
        }
        for(var _i = 0; _i < p.length; _i++){
            var pole = p[_i];
            if (typeof pole === 'number') pole = Complex(pole, 0);
            den = _multiply(den, [
                Complex(1, 0),
                Complex(-pole.re, -pole.im)
            ]);
        }
        for(var _i2 = 0; _i2 < num.length; _i2++){
            num[_i2] = multiply(num[_i2], k);
        }
        return [
            num,
            den
        ];
    }
    function _multiply(a, b) {
        var c = [];
        for(var i = 0; i < a.length + b.length - 1; i++){
            c[i] = Complex(0, 0);
            for(var j = 0; j < a.length; j++){
                if (i - j >= 0 && i - j < b.length) {
                    c[i] = add(c[i], multiply(a[j], b[i - j]));
                }
            }
        }
        return c;
    }
});
}}),
"[project]/node_modules/mathjs/lib/esm/function/signal/freqz.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createFreqz": (()=>createFreqz)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/mathjs/lib/esm/utils/factory.js [app-ssr] (ecmascript)");
;
var name = 'freqz';
var dependencies = [
    'typed',
    'add',
    'multiply',
    'Complex',
    'divide',
    'matrix'
];
var createFreqz = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mathjs$2f$lib$2f$esm$2f$utils$2f$factory$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["factory"])(name, dependencies, (_ref)=>{
    var { typed, add, multiply, Complex, divide, matrix } = _ref;
    /**
     * Calculates the frequency response of a filter given its numerator and denominator coefficients.
     *
     * Syntax:
     *    math.freqz(b, a)
     *    math.freqz(b, a, w)
     *
     * Examples:
     *   math.freqz([1, 2], [1, 2, 3], 4) // returns { h: [0.5 + 0i, 0.4768589245763655 + 0.2861153547458193i, 0.25000000000000006 + 0.75i, -0.770976571635189 + 0.4625859429811135i], w: [0, 0.7853981633974483, 1.5707963267948966, 2.356194490192345 ] }
     *   math.freqz([1, 2], [1, 2, 3], [0, 1]) // returns { h: [0.5 + 0i, 0.45436781 + 0.38598051i], w: [0, 1] }
     *
     * See also:
     *  zpk2tf
     *
     * @param {Array.<number>} b The numerator coefficients of the filter.
     * @param {Array.<number>} a The denominator coefficients of the filter.
     * @param {Array.<number>} [w] A vector of frequencies (in radians/sample) at which the frequency response is to be computed or the number of points to compute (if a number is not provided, the default is 512 points)
     * @returns {Object} An object with two properties: h, a vector containing the complex frequency response, and w, a vector containing the normalized frequencies (in radians/sample) at which the response was computed.
     *
     *
     */ return typed(name, {
        'Array, Array': function Array_Array(b, a) {
            var w = createBins(512);
            return _freqz(b, a, w);
        },
        'Array, Array, Array': function Array_Array_Array(b, a, w) {
            return _freqz(b, a, w);
        },
        'Array, Array, number': function Array_Array_number(b, a, w) {
            if (w < 0) {
                throw new Error('w must be a positive number');
            }
            var w2 = createBins(w);
            return _freqz(b, a, w2);
        },
        'Matrix, Matrix': function Matrix_Matrix(b, a) {
            // console.log('here')
            var _w = createBins(512);
            var { w, h } = _freqz(b.valueOf(), a.valueOf(), _w);
            return {
                w: matrix(w),
                h: matrix(h)
            };
        },
        'Matrix, Matrix, Matrix': function Matrix_Matrix_Matrix(b, a, w) {
            var { h } = _freqz(b.valueOf(), a.valueOf(), w.valueOf());
            return {
                h: matrix(h),
                w: matrix(w)
            };
        },
        'Matrix, Matrix, number': function Matrix_Matrix_number(b, a, w) {
            if (w < 0) {
                throw new Error('w must be a positive number');
            }
            var _w = createBins(w);
            var { h } = _freqz(b.valueOf(), a.valueOf(), _w);
            return {
                h: matrix(h),
                w: matrix(_w)
            };
        }
    });
    "TURBOPACK unreachable";
    function _freqz(b, a, w) {
        var num = [];
        var den = [];
        for(var i = 0; i < w.length; i++){
            var sumNum = Complex(0, 0);
            var sumDen = Complex(0, 0);
            for(var j = 0; j < b.length; j++){
                sumNum = add(sumNum, multiply(b[j], Complex(Math.cos(-j * w[i]), Math.sin(-j * w[i]))));
            }
            for(var _j = 0; _j < a.length; _j++){
                sumDen = add(sumDen, multiply(a[_j], Complex(Math.cos(-_j * w[i]), Math.sin(-_j * w[i]))));
            }
            num.push(sumNum);
            den.push(sumDen);
        }
        var h = [];
        for(var _i = 0; _i < num.length; _i++){
            h.push(divide(num[_i], den[_i]));
        }
        return {
            h,
            w
        };
    }
    function createBins(n) {
        var bins = [];
        for(var i = 0; i < n; i++){
            bins.push(i / n * Math.PI);
        }
        return bins;
    }
});
}}),

};

//# sourceMappingURL=node_modules_mathjs_lib_esm_function_24aec7fb._.js.map