{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/utils/clone.js"],"sourcesContent":["import { clone as objectClone } from '../../utils/object.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'clone';\nvar dependencies = ['typed'];\nexport var createClone = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Clone an object. Will make a deep copy of the data.\n   *\n   * Syntax:\n   *\n   *     math.clone(x)\n   *\n   * Examples:\n   *\n   *    math.clone(3.5)                   // returns number 3.5\n   *    math.clone(math.complex('2-4i'))  // returns Complex 2 - 4i\n   *    math.clone(math.unit(45, 'deg'))  // returns Unit 45 deg\n   *    math.clone([[1, 2], [3, 4]])      // returns Array [[1, 2], [3, 4]]\n   *    math.clone(\"hello world\")         // returns string \"hello world\"\n   *\n   * @param {*} x   Object to be cloned\n   * @return {*} A clone of object x\n   */\n  return typed(name, {\n    any: objectClone\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,cAAc,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAClE,IAAI,EACF,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;GAiBC,GACD,OAAO,MAAM,MAAM;QACjB,KAAK,uJAAA,CAAA,QAAW;IAClB;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/utils/isInteger.js"],"sourcesContent":["import { deepMap } from '../../utils/collection.js';\nimport { isInteger as isIntegerNumber } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'isInteger';\nvar dependencies = ['typed'];\nexport var createIsInteger = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Test whether a value is an integer number.\n   * The function supports `number`, `BigNumber`, and `Fraction`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isInteger(x)\n   *\n   * Examples:\n   *\n   *    math.isInteger(2)                     // returns true\n   *    math.isInteger(0)                     // returns true\n   *    math.isInteger(0.5)                   // returns false\n   *    math.isInteger(math.bignumber(500))   // returns true\n   *    math.isInteger(math.fraction(4))      // returns true\n   *    math.isInteger('3')                   // returns true\n   *    math.isInteger([3, 0.5, -2])          // returns [true, false, true]\n   *    math.isInteger(math.complex('2-4i'))  // throws an error\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isNegative, isZero\n   *\n   * @param {number | BigNumber | bigint | Fraction | Array | Matrix} x   Value to be tested\n   * @return {boolean}  Returns true when `x` contains a numeric, integer value.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: isIntegerNumber,\n    // TODO: what to do with isInteger(add(0.1, 0.2))  ?\n\n    BigNumber: function BigNumber(x) {\n      return x.isInt();\n    },\n    bigint: function bigint(x) {\n      return true;\n    },\n    Fraction: function Fraction(x) {\n      return x.d === 1 && isFinite(x.n);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,kBAAkB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACtE,IAAI,EACF,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BC,GACD,OAAO,MAAM,MAAM;QACjB,QAAQ,uJAAA,CAAA,YAAe;QACvB,oDAAoD;QAEpD,WAAW,SAAS,UAAU,CAAC;YAC7B,OAAO,EAAE,KAAK;QAChB;QACA,QAAQ,SAAS,OAAO,CAAC;YACvB,OAAO;QACT;QACA,UAAU,SAAS,SAAS,CAAC;YAC3B,OAAO,EAAE,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;QAClC;QACA,kBAAkB,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAA,IAAK,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,GAAG;IAC9D;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/utils/isNegative.js"],"sourcesContent":["import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { isNegativeNumber } from '../../plain/number/index.js';\nimport { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nvar name = 'isNegative';\nvar dependencies = ['typed', 'config'];\nexport var createIsNegative = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config\n  } = _ref;\n  /**\n   * Test whether a value is negative: smaller than zero.\n   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isNegative(x)\n   *\n   * Examples:\n   *\n   *    math.isNegative(3)                     // returns false\n   *    math.isNegative(-2)                    // returns true\n   *    math.isNegative(0)                     // returns false\n   *    math.isNegative(-0)                    // returns false\n   *    math.isNegative(math.bignumber(2))     // returns false\n   *    math.isNegative(math.fraction(-2, 5))  // returns true\n   *    math.isNegative('-2')                  // returns true\n   *    math.isNegative([2, 0, -3])            // returns [false, false, true]\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isZero, isInteger\n   *\n   * @param {number | BigNumber | bigint | Fraction | Unit | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: x => nearlyEqual(x, 0, config.relTol, config.absTol) ? false : isNegativeNumber(x),\n    BigNumber: x => bigNearlyEqual(x, new x.constructor(0), config.relTol, config.absTol) ? false : x.isNeg() && !x.isZero() && !x.isNaN(),\n    bigint: x => x < 0n,\n    Fraction: x => x.s < 0,\n    // It's enough to decide on the sign\n\n    Unit: typed.referToSelf(self => x => typed.find(self, x.valueType())(x.value)),\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;CAAS;AAC/B,IAAI,mBAAmB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACvE,IAAI,EACF,KAAK,EACL,MAAM,EACP,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BC,GACD,OAAO,MAAM,MAAM;QACjB,QAAQ,CAAA,IAAK,CAAA,GAAA,uJAAA,CAAA,cAAW,AAAD,EAAE,GAAG,GAAG,OAAO,MAAM,EAAE,OAAO,MAAM,IAAI,QAAQ,CAAA,GAAA,gKAAA,CAAA,mBAAgB,AAAD,EAAE;QACxF,WAAW,CAAA,IAAK,CAAA,GAAA,yKAAA,CAAA,cAAc,AAAD,EAAE,GAAG,IAAI,EAAE,WAAW,CAAC,IAAI,OAAO,MAAM,EAAE,OAAO,MAAM,IAAI,QAAQ,EAAE,KAAK,MAAM,CAAC,EAAE,MAAM,MAAM,CAAC,EAAE,KAAK;QACpI,QAAQ,CAAA,IAAK,IAAI,EAAE;QACnB,UAAU,CAAA,IAAK,EAAE,CAAC,GAAG;QACrB,oCAAoC;QAEpC,MAAM,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAA,IAAK,MAAM,IAAI,CAAC,MAAM,EAAE,SAAS,IAAI,EAAE,KAAK;QAC5E,kBAAkB,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAA,IAAK,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,GAAG;IAC9D;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 175, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/utils/isNumeric.js"],"sourcesContent":["import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'isNumeric';\nvar dependencies = ['typed'];\nexport var createIsNumeric = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Test whether a value is an numeric value.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isNumeric(x)\n   *\n   * Examples:\n   *\n   *    math.isNumeric(2)                     // returns true\n   *    math.isNumeric('2')                   // returns false\n   *    math.hasNumericValue('2')             // returns true\n   *    math.isNumeric(0)                     // returns true\n   *    math.isNumeric(math.bignumber('42'))  // returns true\n   *    math.isNumeric(math.bigint('42'))     // returns true\n   *    math.isNumeric(math.fraction(4))      // returns true\n   *    math.isNumeric(math.complex('2-4i'))  // returns false\n   *    math.isNumeric([2.3, 'foo', false])   // returns [true, false, true]\n   *\n   * See also:\n   *\n   *    isZero, isPositive, isNegative, isInteger, hasNumericValue\n   *\n   * @param {*} x       Value to be tested\n   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,\n   *                    `Fraction`, or `boolean`. Returns false for other types.\n   *                    Throws an error in case of unknown types.\n   */\n  return typed(name, {\n    'number | BigNumber | bigint | Fraction | boolean': () => true,\n    'Complex | Unit | string | null | undefined | Node': () => false,\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,kBAAkB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACtE,IAAI,EACF,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BC,GACD,OAAO,MAAM,MAAM;QACjB,oDAAoD,IAAM;QAC1D,qDAAqD,IAAM;QAC3D,kBAAkB,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAA,IAAK,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,GAAG;IAC9D;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 229, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/utils/hasNumericValue.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'hasNumericValue';\nvar dependencies = ['typed', 'isNumeric'];\nexport var createHasNumericValue = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    isNumeric\n  } = _ref;\n  /**\n   * Test whether a value is an numeric value.\n   *\n   * In case of a string, true is returned if the string contains a numeric value.\n   *\n   * Syntax:\n   *\n   *     math.hasNumericValue(x)\n   *\n   * Examples:\n   *\n   *    math.hasNumericValue(2)                     // returns true\n   *    math.hasNumericValue('2')                   // returns true\n   *    math.isNumeric('2')                         // returns false\n   *    math.hasNumericValue(0)                     // returns true\n   *    math.hasNumericValue(math.bignumber('500')) // returns true\n   *    math.hasNumericValue(math.bigint('42'))     // returns true\n   *    math.hasNumericValue(42n)                   // returns true\n   *    math.hasNumericValue(math.fraction(4))      // returns true\n   *    math.hasNumericValue(math.complex('2-4i'))  // returns false\n   *    math.hasNumericValue(false)                 // returns true\n   *    math.hasNumericValue([2.3, 'foo', false])   // returns [true, false, true]\n   *\n   * See also:\n   *\n   *    isZero, isPositive, isNegative, isInteger, isNumeric\n   *\n   * @param {*} x       Value to be tested\n   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,\n   *                    `Fraction`, `Boolean`, or a `String` containing number. Returns false for other types.\n   *                    Throws an error in case of unknown types.\n   */\n  return typed(name, {\n    boolean: () => true,\n    string: function string(x) {\n      return x.trim().length > 0 && !isNaN(Number(x));\n    },\n    any: function any(x) {\n      return isNumeric(x);\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;CAAY;AAClC,IAAI,wBAAwB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAC5E,IAAI,EACF,KAAK,EACL,SAAS,EACV,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BC,GACD,OAAO,MAAM,MAAM;QACjB,SAAS,IAAM;QACf,QAAQ,SAAS,OAAO,CAAC;YACvB,OAAO,EAAE,IAAI,GAAG,MAAM,GAAG,KAAK,CAAC,MAAM,OAAO;QAC9C;QACA,KAAK,SAAS,IAAI,CAAC;YACjB,OAAO,UAAU;QACnB;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 288, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/utils/isPositive.js"],"sourcesContent":["import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { isPositiveNumber } from '../../plain/number/index.js';\nimport { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nvar name = 'isPositive';\nvar dependencies = ['typed', 'config'];\nexport var createIsPositive = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config\n  } = _ref;\n  /**\n   * Test whether a value is positive: larger than zero.\n   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isPositive(x)\n   *\n   * Examples:\n   *\n   *    math.isPositive(3)                     // returns true\n   *    math.isPositive(-2)                    // returns false\n   *    math.isPositive(0)                     // returns false\n   *    math.isPositive(-0)                    // returns false\n   *    math.isPositive(0.5)                   // returns true\n   *    math.isPositive(math.bignumber(2))     // returns true\n   *    math.isPositive(math.fraction(-2, 5))  // returns false\n   *    math.isPositive(math.fraction(1, 3))   // returns true\n   *    math.isPositive('2')                   // returns true\n   *    math.isPositive([2, 0, -3])            // returns [true, false, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isZero, isNegative, isInteger\n   *\n   * @param {number | BigNumber | bigint | Fraction | Unit | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: x => nearlyEqual(x, 0, config.relTol, config.absTol) ? false : isPositiveNumber(x),\n    BigNumber: x => bigNearlyEqual(x, new x.constructor(0), config.relTol, config.absTol) ? false : !x.isNeg() && !x.isZero() && !x.isNaN(),\n    bigint: x => x > 0n,\n    Fraction: x => x.s > 0 && x.n > 0,\n    Unit: typed.referToSelf(self => x => typed.find(self, x.valueType())(x.value)),\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;CAAS;AAC/B,IAAI,mBAAmB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACvE,IAAI,EACF,KAAK,EACL,MAAM,EACP,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BC,GACD,OAAO,MAAM,MAAM;QACjB,QAAQ,CAAA,IAAK,CAAA,GAAA,uJAAA,CAAA,cAAW,AAAD,EAAE,GAAG,GAAG,OAAO,MAAM,EAAE,OAAO,MAAM,IAAI,QAAQ,CAAA,GAAA,gKAAA,CAAA,mBAAgB,AAAD,EAAE;QACxF,WAAW,CAAA,IAAK,CAAA,GAAA,yKAAA,CAAA,cAAc,AAAD,EAAE,GAAG,IAAI,EAAE,WAAW,CAAC,IAAI,OAAO,MAAM,EAAE,OAAO,MAAM,IAAI,QAAQ,CAAC,EAAE,KAAK,MAAM,CAAC,EAAE,MAAM,MAAM,CAAC,EAAE,KAAK;QACrI,QAAQ,CAAA,IAAK,IAAI,EAAE;QACnB,UAAU,CAAA,IAAK,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG;QAChC,MAAM,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAA,IAAK,MAAM,IAAI,CAAC,MAAM,EAAE,SAAS,IAAI,EAAE,KAAK;QAC5E,kBAAkB,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAA,IAAK,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,GAAG;IAC9D;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 353, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/utils/isZero.js"],"sourcesContent":["import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'isZero';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createIsZero = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Test whether a value is zero.\n   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,\n   * `Complex`, and `Unit`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isZero(x)\n   *\n   * Examples:\n   *\n   *    math.isZero(0)                      // returns true\n   *    math.isZero(2)                      // returns false\n   *    math.isZero(0.5)                    // returns false\n   *    math.isZero(math.bignumber(0))      // returns true\n   *    math.isZero(math.fraction(0))       // returns true\n   *    math.isZero(math.fraction(1,3))     // returns false\n   *    math.isZero(math.complex('2 - 4i')) // returns false\n   *    math.isZero(math.complex('0i'))     // returns true\n   *    math.isZero('0')                    // returns true\n   *    math.isZero('2')                    // returns false\n   *    math.isZero([2, 0, -3])             // returns [false, true, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isNegative, isInteger\n   *\n   * @param {number | BigNumber | bigint | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested\n   * @return {boolean}  Returns true when `x` is zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    'number | BigNumber | Complex | Fraction': x => equalScalar(x, 0),\n    bigint: x => x === 0n,\n    Unit: typed.referToSelf(self => x => typed.find(self, x.valueType())(x.value)),\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;CAAc;AACpC,IAAI,eAAe,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACnE,IAAI,EACF,KAAK,EACL,WAAW,EACZ,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCC,GACD,OAAO,MAAM,MAAM;QACjB,2CAA2C,CAAA,IAAK,YAAY,GAAG;QAC/D,QAAQ,CAAA,IAAK,MAAM,EAAE;QACrB,MAAM,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAA,IAAK,MAAM,IAAI,CAAC,MAAM,EAAE,SAAS,IAAI,EAAE,KAAK;QAC5E,kBAAkB,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAA,IAAK,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,GAAG;IAC9D;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 412, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/utils/isNaN.js"],"sourcesContent":["import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { isNaNNumber } from '../../plain/number/index.js';\nvar name = 'isNaN';\nvar dependencies = ['typed'];\nexport var createIsNaN = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Test whether a value is NaN (not a number).\n   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isNaN(x)\n   *\n   * Examples:\n   *\n   *    math.isNaN(3)                     // returns false\n   *    math.isNaN(NaN)                   // returns true\n   *    math.isNaN(0)                     // returns false\n   *    math.isNaN(math.bignumber(NaN))   // returns true\n   *    math.isNaN(math.bignumber(0))     // returns false\n   *    math.isNaN(math.fraction(-2, 5))  // returns false\n   *    math.isNaN('-2')                  // returns false\n   *    math.isNaN([2, 0, -3, NaN])       // returns [false, false, false, true]\n   *\n   * See also:\n   *\n   *    isNumeric, isNegative, isPositive, isZero, isInteger\n   *\n   * @param {number | BigNumber | bigint | Fraction | Unit | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is NaN.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: isNaNNumber,\n    BigNumber: function BigNumber(x) {\n      return x.isNaN();\n    },\n    bigint: function bigint(x) {\n      return false;\n    },\n    Fraction: function Fraction(x) {\n      return false;\n    },\n    Complex: function Complex(x) {\n      return x.isNaN();\n    },\n    Unit: function Unit(x) {\n      return Number.isNaN(x.value);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,cAAc,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAClE,IAAI,EACF,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BC,GACD,OAAO,MAAM,MAAM;QACjB,QAAQ,gKAAA,CAAA,cAAW;QACnB,WAAW,SAAS,UAAU,CAAC;YAC7B,OAAO,EAAE,KAAK;QAChB;QACA,QAAQ,SAAS,OAAO,CAAC;YACvB,OAAO;QACT;QACA,UAAU,SAAS,SAAS,CAAC;YAC3B,OAAO;QACT;QACA,SAAS,SAAS,QAAQ,CAAC;YACzB,OAAO,EAAE,KAAK;QAChB;QACA,MAAM,SAAS,KAAK,CAAC;YACnB,OAAO,OAAO,KAAK,CAAC,EAAE,KAAK;QAC7B;QACA,kBAAkB,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAA,IAAK,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,GAAG;IAC9D;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 481, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/utils/typeOf.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { typeOf as _typeOf } from '../../utils/is.js';\nvar name = 'typeOf';\nvar dependencies = ['typed'];\nexport var createTypeOf = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Determine the type of an entity.\n   *\n   * Syntax:\n   *\n   *    math.typeOf(x)\n   *\n   * Examples:\n   *\n   *    // This list is intended to include all relevant types, for testing\n   *    // purposes:\n   *    math.typeOf(3.5)                      // returns 'number'\n   *    math.typeOf(42n)                      // returns 'bigint'\n   *    math.typeOf(math.complex('2-4i'))     // returns 'Complex'\n   *    math.typeOf(math.unit('45 deg'))      // returns 'Unit'\n   *    math.typeOf('hello world')            // returns 'string'\n   *    math.typeOf(null)                     // returns 'null'\n   *    math.typeOf(true)                     // returns 'boolean'\n   *    math.typeOf([1, 2, 3])                // returns 'Array'\n   *    math.typeOf(new Date())               // returns 'Date'\n   *    math.typeOf(function () {})           // returns 'function'\n   *    math.typeOf({a: 2, b: 3})             // returns 'Object'\n   *    math.typeOf(/a regexp/)               // returns 'RegExp'\n   *    math.typeOf(undefined)                // returns 'undefined'\n   *    math.typeOf(math.bignumber('23e99'))  // returns 'BigNumber'\n   *    math.typeOf(math.chain(2))            // returns 'Chain'\n   *    math.typeOf(math.fraction(1, 3))      // returns 'Fraction'\n   *    math.typeOf(math.help('sqrt'))        // returns 'Help'\n   *    math.typeOf(math.index(1, 3))         // returns 'Index'\n   *    math.typeOf(math.matrix([[1],[3]]))   // returns 'DenseMatrix'\n   *    math.typeOf(math.matrix([],'sparse')) // returns 'SparseMatrix'\n   *    math.typeOf(new math.Range(0, 10))    // returns 'Range'\n   *    math.typeOf(math.evaluate('a=2\\na'))  // returns 'ResultSet'\n   *    math.typeOf(math.parse('A[2]'))       // returns 'AccessorNode'\n   *    math.typeOf(math.parse('[1,2,3]'))    // returns 'ArrayNode'\n   *    math.typeOf(math.parse('x=2'))        // returns 'AssignmentNode'\n   *    math.typeOf(math.parse('a=2; b=3'))   // returns 'BlockNode'\n   *    math.typeOf(math.parse('x<0?-1:1'))   // returns 'ConditionalNode'\n   *    math.typeOf(math.parse('2.3'))        // returns 'ConstantNode'\n   *    math.typeOf(math.parse('f(x)=x^2'))   // returns 'FunctionAssignmentNode'\n   *    math.typeOf(math.parse('sqrt(4)'))    // returns 'FunctionNode'\n   *    math.typeOf(math.parse('A[2]').index) // returns 'IndexNode'\n   *    math.typeOf(math.parse('{a:2}'))      // returns 'ObjectNode'\n   *    math.typeOf(math.parse('(2+3)'))      // returns 'ParenthesisNode'\n   *    math.typeOf(math.parse('1:10'))       // returns 'RangeNode'\n   *    math.typeOf(math.parse('a<b<c'))      // returns 'RelationalNode'\n   *    math.typeOf(math.parse('x'))          // returns 'SymbolNode'\n   *\n   * @param {*} x     The variable for which to test the type.\n   * @return {string} Returns the name of the type. Primitive types are lower case,\n   *                  non-primitive types are upper-camel-case.\n   *                  For example 'number', 'string', 'Array', 'Date'.\n   */\n  return typed(name, {\n    any: _typeOf\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,eAAe,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACnE,IAAI,EACF,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoDC,GACD,OAAO,MAAM,MAAM;QACjB,KAAK,mJAAA,CAAA,SAAO;IACd;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 556, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/utils/isPrime.js"],"sourcesContent":["import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'isPrime';\nvar dependencies = ['typed'];\nexport var createIsPrime = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Test whether a value is prime: has no divisors other than itself and one.\n   * The function supports type `number`, `bignumber`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isPrime(x)\n   *\n   * Examples:\n   *\n   *    math.isPrime(3)                     // returns true\n   *    math.isPrime(-2)                    // returns false\n   *    math.isPrime(0)                     // returns false\n   *    math.isPrime(-0)                    // returns false\n   *    math.isPrime(0.5)                   // returns false\n   *    math.isPrime('2')                   // returns true\n   *    math.isPrime([2, 17, 100])           // returns [true, true, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isZero, isNegative, isInteger\n   *\n   * @param {number | BigNumber | bigint | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x <= 3) {\n        return x > 1;\n      }\n      if (x % 2 === 0 || x % 3 === 0) {\n        return false;\n      }\n      for (var i = 5; i * i <= x; i += 6) {\n        if (x % i === 0 || x % (i + 2) === 0) {\n          return false;\n        }\n      }\n      return true;\n    },\n    bigint: function bigint(x) {\n      if (x <= 3n) {\n        return x > 1n;\n      }\n      if (x % 2n === 0n || x % 3n === 0n) {\n        return false;\n      }\n      for (var i = 5n; i * i <= x; i += 6n) {\n        if (x % i === 0n || x % (i + 2n) === 0n) {\n          return false;\n        }\n      }\n      return true;\n    },\n    BigNumber: function BigNumber(n) {\n      if (n.lte(3)) return n.gt(1);\n      if (n.mod(2).eq(0) || n.mod(3).eq(0)) return false;\n      if (n.lt(Math.pow(2, 32))) {\n        var x = n.toNumber();\n        for (var i = 5; i * i <= x; i += 6) {\n          if (x % i === 0 || x % (i + 2) === 0) {\n            return false;\n          }\n        }\n        return true;\n      }\n      function modPow(base, exponent, modulus) {\n        // exponent can be huge, use non-recursive variant\n        var accumulator = 1;\n        while (!exponent.eq(0)) {\n          if (exponent.mod(2).eq(0)) {\n            exponent = exponent.div(2);\n            base = base.mul(base).mod(modulus);\n          } else {\n            exponent = exponent.sub(1);\n            accumulator = base.mul(accumulator).mod(modulus);\n          }\n        }\n        return accumulator;\n      }\n\n      // https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test#Deterministic_variants\n      var Decimal = n.constructor.clone({\n        precision: n.toFixed(0).length * 2\n      });\n      n = new Decimal(n);\n      var r = 0;\n      var d = n.sub(1);\n      while (d.mod(2).eq(0)) {\n        d = d.div(2);\n        r += 1;\n      }\n      var bases = null;\n      // https://en.wikipedia.org/wiki/Miller–Rabin_primality_test#Testing_against_small_sets_of_bases\n      if (n.lt('3317044064679887385961981')) {\n        bases = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41].filter(x => x < n);\n      } else {\n        var max = Math.min(n.toNumber() - 2, Math.floor(2 * Math.pow(n.toFixed(0).length * Math.log(10), 2)));\n        bases = [];\n        for (var _i = 2; _i <= max; _i += 1) {\n          bases.push(max);\n        }\n      }\n      for (var _i2 = 0; _i2 < bases.length; _i2 += 1) {\n        var a = bases[_i2];\n        var adn = modPow(n.sub(n).add(a), d, n);\n        if (!adn.eq(1)) {\n          for (var _i3 = 0, _x = adn; !_x.eq(n.sub(1)); _i3 += 1, _x = _x.mul(_x).mod(n)) {\n            if (_i3 === r - 1) {\n              return false;\n            }\n          }\n        }\n      }\n      return true;\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,gBAAgB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACpE,IAAI,EACF,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BC,GACD,OAAO,MAAM,MAAM;QACjB,QAAQ,SAAS,OAAO,CAAC;YACvB,IAAI,KAAK,GAAG;gBACV,OAAO,IAAI;YACb;YACA,IAAI,IAAI,MAAM,KAAK,IAAI,MAAM,GAAG;gBAC9B,OAAO;YACT;YACA,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,GAAG,KAAK,EAAG;gBAClC,IAAI,IAAI,MAAM,KAAK,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG;oBACpC,OAAO;gBACT;YACF;YACA,OAAO;QACT;QACA,QAAQ,SAAS,OAAO,CAAC;YACvB,IAAI,KAAK,EAAE,EAAE;gBACX,OAAO,IAAI,EAAE;YACf;YACA,IAAI,IAAI,EAAE,KAAK,EAAE,IAAI,IAAI,EAAE,KAAK,EAAE,EAAE;gBAClC,OAAO;YACT;YACA,IAAK,IAAI,IAAI,EAAE,EAAE,IAAI,KAAK,GAAG,KAAK,EAAE,CAAE;gBACpC,IAAI,IAAI,MAAM,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE;oBACvC,OAAO;gBACT;YACF;YACA,OAAO;QACT;QACA,WAAW,SAAS,UAAU,CAAC;YAC7B,IAAI,EAAE,GAAG,CAAC,IAAI,OAAO,EAAE,EAAE,CAAC;YAC1B,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,OAAO;YAC7C,IAAI,EAAE,EAAE,CAAC,KAAK,GAAG,CAAC,GAAG,MAAM;gBACzB,IAAI,IAAI,EAAE,QAAQ;gBAClB,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,GAAG,KAAK,EAAG;oBAClC,IAAI,IAAI,MAAM,KAAK,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG;wBACpC,OAAO;oBACT;gBACF;gBACA,OAAO;YACT;YACA,SAAS,OAAO,IAAI,EAAE,QAAQ,EAAE,OAAO;gBACrC,kDAAkD;gBAClD,IAAI,cAAc;gBAClB,MAAO,CAAC,SAAS,EAAE,CAAC,GAAI;oBACtB,IAAI,SAAS,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI;wBACzB,WAAW,SAAS,GAAG,CAAC;wBACxB,OAAO,KAAK,GAAG,CAAC,MAAM,GAAG,CAAC;oBAC5B,OAAO;wBACL,WAAW,SAAS,GAAG,CAAC;wBACxB,cAAc,KAAK,GAAG,CAAC,aAAa,GAAG,CAAC;oBAC1C;gBACF;gBACA,OAAO;YACT;YAEA,2FAA2F;YAC3F,IAAI,UAAU,EAAE,WAAW,CAAC,KAAK,CAAC;gBAChC,WAAW,EAAE,OAAO,CAAC,GAAG,MAAM,GAAG;YACnC;YACA,IAAI,IAAI,QAAQ;YAChB,IAAI,IAAI;YACR,IAAI,IAAI,EAAE,GAAG,CAAC;YACd,MAAO,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC,GAAI;gBACrB,IAAI,EAAE,GAAG,CAAC;gBACV,KAAK;YACP;YACA,IAAI,QAAQ;YACZ,gGAAgG;YAChG,IAAI,EAAE,EAAE,CAAC,8BAA8B;gBACrC,QAAQ;oBAAC;oBAAG;oBAAG;oBAAG;oBAAG;oBAAI;oBAAI;oBAAI;oBAAI;oBAAI;oBAAI;oBAAI;oBAAI;iBAAG,CAAC,MAAM,CAAC,CAAA,IAAK,IAAI;YAC3E,OAAO;gBACL,IAAI,MAAM,KAAK,GAAG,CAAC,EAAE,QAAQ,KAAK,GAAG,KAAK,KAAK,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE,OAAO,CAAC,GAAG,MAAM,GAAG,KAAK,GAAG,CAAC,KAAK;gBACjG,QAAQ,EAAE;gBACV,IAAK,IAAI,KAAK,GAAG,MAAM,KAAK,MAAM,EAAG;oBACnC,MAAM,IAAI,CAAC;gBACb;YACF;YACA,IAAK,IAAI,MAAM,GAAG,MAAM,MAAM,MAAM,EAAE,OAAO,EAAG;gBAC9C,IAAI,IAAI,KAAK,CAAC,IAAI;gBAClB,IAAI,MAAM,OAAO,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,IAAI,GAAG;gBACrC,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI;oBACd,IAAK,IAAI,MAAM,GAAG,KAAK,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,KAAK,OAAO,GAAG,KAAK,GAAG,GAAG,CAAC,IAAI,GAAG,CAAC,GAAI;wBAC9E,IAAI,QAAQ,IAAI,GAAG;4BACjB,OAAO;wBACT;oBACF;gBACF;YACF;YACA,OAAO;QACT;QACA,kBAAkB,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAA,IAAK,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,GAAG;IAC9D;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 709, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/utils/numeric.js"],"sourcesContent":["import { typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { noBignumber, noFraction } from '../../utils/noop.js';\nvar name = 'numeric';\nvar dependencies = ['number', '?bignumber', '?fraction'];\nexport var createNumeric = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    number: _number,\n    bignumber,\n    fraction\n  } = _ref;\n  var validInputTypes = {\n    string: true,\n    number: true,\n    BigNumber: true,\n    Fraction: true\n  };\n\n  // Load the conversion functions for each output type\n  var validOutputTypes = {\n    number: x => _number(x),\n    BigNumber: bignumber ? x => bignumber(x) : noBignumber,\n    bigint: x => BigInt(x),\n    Fraction: fraction ? x => fraction(x) : noFraction\n  };\n\n  /**\n   * Convert a numeric input to a specific numeric type: number, BigNumber, bigint, or Fraction.\n   *\n   * Syntax:\n   *\n   *    math.numeric(x)\n   *\n   * Examples:\n   *\n   *    math.numeric('4')                           // returns 4\n   *    math.numeric('4', 'number')                 // returns 4\n   *    math.numeric('4', 'bigint')                 // returns 4n\n   *    math.numeric('4', 'BigNumber')              // returns BigNumber 4\n   *    math.numeric('4', 'Fraction')               // returns Fraction 4\n   *    math.numeric(4, 'Fraction')                 // returns Fraction 4\n   *    math.numeric(math.fraction(2, 5), 'number') // returns 0.4\n   *\n   * See also:\n   *\n   *    number, fraction, bignumber, bigint, string, format\n   *\n   * @param {string | number | BigNumber | bigint | Fraction } value\n   *              A numeric value or a string containing a numeric value\n   * @param {string} outputType\n   *              Desired numeric output type.\n   *              Available values: 'number', 'BigNumber', or 'Fraction'\n   * @return {number | BigNumber | bigint | Fraction}\n   *              Returns an instance of the numeric in the requested type\n   */\n  return function numeric(value) {\n    var outputType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'number';\n    var check = arguments.length > 2 ? arguments[2] : undefined;\n    if (check !== undefined) {\n      throw new SyntaxError('numeric() takes one or two arguments');\n    }\n    var inputType = typeOf(value);\n    if (!(inputType in validInputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' of type \"' + inputType + '\"; valid input types are ' + Object.keys(validInputTypes).join(', '));\n    }\n    if (!(outputType in validOutputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' to type \"' + outputType + '\"; valid output types are ' + Object.keys(validOutputTypes).join(', '));\n    }\n    if (outputType === inputType) {\n      return value;\n    } else {\n      return validOutputTypes[outputType](value);\n    }\n  };\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAU;IAAc;CAAY;AACjD,IAAI,gBAAgB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACpE,IAAI,EACF,QAAQ,OAAO,EACf,SAAS,EACT,QAAQ,EACT,GAAG;IACJ,IAAI,kBAAkB;QACpB,QAAQ;QACR,QAAQ;QACR,WAAW;QACX,UAAU;IACZ;IAEA,qDAAqD;IACrD,IAAI,mBAAmB;QACrB,QAAQ,CAAA,IAAK,QAAQ;QACrB,WAAW,YAAY,CAAA,IAAK,UAAU,KAAK,qJAAA,CAAA,cAAW;QACtD,QAAQ,CAAA,IAAK,OAAO;QACpB,UAAU,WAAW,CAAA,IAAK,SAAS,KAAK,qJAAA,CAAA,aAAU;IACpD;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BC,GACD,OAAO,SAAS,QAAQ,KAAK;QAC3B,IAAI,aAAa,UAAU,MAAM,GAAG,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG;QACrF,IAAI,QAAQ,UAAU,MAAM,GAAG,IAAI,SAAS,CAAC,EAAE,GAAG;QAClD,IAAI,UAAU,WAAW;YACvB,MAAM,IAAI,YAAY;QACxB;QACA,IAAI,YAAY,CAAA,GAAA,mJAAA,CAAA,SAAM,AAAD,EAAE;QACvB,IAAI,CAAC,CAAC,aAAa,eAAe,GAAG;YACnC,MAAM,IAAI,UAAU,oBAAoB,QAAQ,eAAe,YAAY,8BAA8B,OAAO,IAAI,CAAC,iBAAiB,IAAI,CAAC;QAC7I;QACA,IAAI,CAAC,CAAC,cAAc,gBAAgB,GAAG;YACrC,MAAM,IAAI,UAAU,oBAAoB,QAAQ,eAAe,aAAa,+BAA+B,OAAO,IAAI,CAAC,kBAAkB,IAAI,CAAC;QAChJ;QACA,IAAI,eAAe,WAAW;YAC5B,OAAO;QACT,OAAO;YACL,OAAO,gBAAgB,CAAC,WAAW,CAAC;QACtC;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 793, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/relational/compareUnits.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nexport var createCompareUnits = /* #__PURE__ */factory('compareUnits', ['typed'], _ref => {\n  var {\n    typed\n  } = _ref;\n  return {\n    'Unit, Unit': typed.referToSelf(self => (x, y) => {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n      return typed.find(self, [x.valueType(), y.valueType()])(x.value, y.value);\n    })\n  };\n});"],"names":[],"mappings":";;;AAAA;;AACO,IAAI,qBAAqB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,gBAAgB;IAAC;CAAQ,EAAE,CAAA;IAChF,IAAI,EACF,KAAK,EACN,GAAG;IACJ,OAAO;QACL,cAAc,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAC,GAAG;gBAC1C,IAAI,CAAC,EAAE,SAAS,CAAC,IAAI;oBACnB,MAAM,IAAI,MAAM;gBAClB;gBACA,OAAO,MAAM,IAAI,CAAC,MAAM;oBAAC,EAAE,SAAS;oBAAI,EAAE,SAAS;iBAAG,EAAE,EAAE,KAAK,EAAE,EAAE,KAAK;YAC1E;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 820, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/relational/equalScalar.js"],"sourcesContent":["import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { complexEquals } from '../../utils/complex.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'equalScalar';\nvar dependencies = ['typed', 'config'];\nexport var createEqualScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config\n  } = _ref;\n  var compareUnits = createCompareUnits({\n    typed\n  });\n\n  /**\n   * Test whether two scalar values are nearly equal.\n   *\n   * @param  {number | BigNumber | bigint | Fraction | boolean | Complex | Unit} x   First value to compare\n   * @param  {number | BigNumber | bigint | Fraction | boolean | Complex} y          Second value to compare\n   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false\n   * @private\n   */\n  return typed(name, {\n    'boolean, boolean': function boolean_boolean(x, y) {\n      return x === y;\n    },\n    'number, number': function number_number(x, y) {\n      return nearlyEqual(x, y, config.relTol, config.absTol);\n    },\n    'BigNumber, BigNumber': function BigNumber_BigNumber(x, y) {\n      return x.eq(y) || bigNearlyEqual(x, y, config.relTol, config.absTol);\n    },\n    'bigint, bigint': function bigint_bigint(x, y) {\n      return x === y;\n    },\n    'Fraction, Fraction': function Fraction_Fraction(x, y) {\n      return x.equals(y);\n    },\n    'Complex, Complex': function Complex_Complex(x, y) {\n      return complexEquals(x, y, config.relTol, config.absTol);\n    }\n  }, compareUnits);\n});\nexport var createEqualScalarNumber = factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function number_number(x, y) {\n      return nearlyEqual(x, y, config.relTol, config.absTol);\n    }\n  });\n});"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;;;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;CAAS;AAC/B,IAAI,oBAAoB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACxE,IAAI,EACF,KAAK,EACL,MAAM,EACP,GAAG;IACJ,IAAI,eAAe,CAAA,GAAA,8KAAA,CAAA,qBAAkB,AAAD,EAAE;QACpC;IACF;IAEA;;;;;;;GAOC,GACD,OAAO,MAAM,MAAM;QACjB,oBAAoB,SAAS,gBAAgB,CAAC,EAAE,CAAC;YAC/C,OAAO,MAAM;QACf;QACA,kBAAkB,SAAS,cAAc,CAAC,EAAE,CAAC;YAC3C,OAAO,CAAA,GAAA,uJAAA,CAAA,cAAW,AAAD,EAAE,GAAG,GAAG,OAAO,MAAM,EAAE,OAAO,MAAM;QACvD;QACA,wBAAwB,SAAS,oBAAoB,CAAC,EAAE,CAAC;YACvD,OAAO,EAAE,EAAE,CAAC,MAAM,CAAA,GAAA,yKAAA,CAAA,cAAc,AAAD,EAAE,GAAG,GAAG,OAAO,MAAM,EAAE,OAAO,MAAM;QACrE;QACA,kBAAkB,SAAS,cAAc,CAAC,EAAE,CAAC;YAC3C,OAAO,MAAM;QACf;QACA,sBAAsB,SAAS,kBAAkB,CAAC,EAAE,CAAC;YACnD,OAAO,EAAE,MAAM,CAAC;QAClB;QACA,oBAAoB,SAAS,gBAAgB,CAAC,EAAE,CAAC;YAC/C,OAAO,CAAA,GAAA,wJAAA,CAAA,gBAAa,AAAD,EAAE,GAAG,GAAG,OAAO,MAAM,EAAE,OAAO,MAAM;QACzD;IACF,GAAG;AACL;AACO,IAAI,0BAA0B,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM;IAAC;IAAS;CAAS,EAAE,CAAA;IACtE,IAAI,EACF,KAAK,EACL,MAAM,EACP,GAAG;IACJ,OAAO,MAAM,MAAM;QACjB,kBAAkB,SAAS,cAAc,CAAC,EAAE,CAAC;YAC3C,OAAO,CAAA,GAAA,uJAAA,CAAA,cAAW,AAAD,EAAE,GAAG,GAAG,OAAO,MAAM,EAAE,OAAO,MAAM;QACvD;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 889, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/relational/compare.js"],"sourcesContent":["import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'compare';\nvar dependencies = ['typed', 'config', 'matrix', 'equalScalar', 'BigNumber', 'Fraction', 'DenseMatrix', 'concat'];\nexport var createCompare = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    equalScalar,\n    matrix,\n    BigNumber,\n    Fraction,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  var compareUnits = createCompareUnits({\n    typed\n  });\n\n  /**\n   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.\n   *\n   * x and y are considered equal when the relative difference between x and y\n   * is smaller than the configured absTol and relTol. The function cannot be used to\n   * compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.compare(x, y)\n   *\n   * Examples:\n   *\n   *    math.compare(6, 1)           // returns 1\n   *    math.compare(2, 3)           // returns -1\n   *    math.compare(7, 7)           // returns 0\n   *    math.compare('10', '2')      // returns 1\n   *    math.compare('1000', '1e3')  // returns 0\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('40 mm')\n   *    math.compare(a, b)           // returns 1\n   *\n   *    math.compare(2, [1, 2, 3])   // returns [1, 0, -1]\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural, compareText\n   *\n   * @param  {number | BigNumber | bigint | Fraction | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | bigint | Fraction | Unit | string | Array | Matrix} y Second value to compare\n   * @return {number | BigNumber | bigint | Fraction | Array | Matrix} Returns the result of the comparison:\n   *                                                          1 when x > y, -1 when x < y, and 0 when x == y.\n   */\n  return typed(name, createCompareNumber({\n    typed,\n    config\n  }), {\n    'boolean, boolean': function boolean_boolean(x, y) {\n      return x === y ? 0 : x > y ? 1 : -1;\n    },\n    'BigNumber, BigNumber': function BigNumber_BigNumber(x, y) {\n      return bigNearlyEqual(x, y, config.relTol, config.absTol) ? new BigNumber(0) : new BigNumber(x.cmp(y));\n    },\n    'bigint, bigint': function bigint_bigint(x, y) {\n      return x === y ? 0n : x > y ? 1n : -1n;\n    },\n    'Fraction, Fraction': function Fraction_Fraction(x, y) {\n      return new Fraction(x.compare(y));\n    },\n    'Complex, Complex': function Complex_Complex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createCompareNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function number_number(x, y) {\n      return nearlyEqual(x, y, config.relTol, config.absTol) ? 0 : x > y ? 1 : -1;\n    }\n  });\n});"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;IAAU;IAAe;IAAa;IAAY;IAAe;CAAS;AAC1G,IAAI,gBAAgB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACpE,IAAI,EACF,KAAK,EACL,MAAM,EACN,WAAW,EACX,MAAM,EACN,SAAS,EACT,QAAQ,EACR,WAAW,EACX,MAAM,EACP,GAAG;IACJ,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;IACF;IACA,IAAI,iBAAiB,CAAA,GAAA,iLAAA,CAAA,uBAAoB,AAAD,EAAE;QACxC;QACA;IACF;IACA,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;QACA;IACF;IACA,IAAI,uBAAuB,CAAA,GAAA,uLAAA,CAAA,6BAA0B,AAAD,EAAE;QACpD;QACA;QACA;IACF;IACA,IAAI,eAAe,CAAA,GAAA,8KAAA,CAAA,qBAAkB,AAAD,EAAE;QACpC;IACF;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoCC,GACD,OAAO,MAAM,MAAM,oBAAoB;QACrC;QACA;IACF,IAAI;QACF,oBAAoB,SAAS,gBAAgB,CAAC,EAAE,CAAC;YAC/C,OAAO,MAAM,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC;QACpC;QACA,wBAAwB,SAAS,oBAAoB,CAAC,EAAE,CAAC;YACvD,OAAO,CAAA,GAAA,yKAAA,CAAA,cAAc,AAAD,EAAE,GAAG,GAAG,OAAO,MAAM,EAAE,OAAO,MAAM,IAAI,IAAI,UAAU,KAAK,IAAI,UAAU,EAAE,GAAG,CAAC;QACrG;QACA,kBAAkB,SAAS,cAAc,CAAC,EAAE,CAAC;YAC3C,OAAO,MAAM,IAAI,EAAE,GAAG,IAAI,IAAI,EAAE,GAAG,CAAC,EAAE;QACxC;QACA,sBAAsB,SAAS,kBAAkB,CAAC,EAAE,CAAC;YACnD,OAAO,IAAI,SAAS,EAAE,OAAO,CAAC;QAChC;QACA,oBAAoB,SAAS;YAC3B,MAAM,IAAI,UAAU;QACtB;IACF,GAAG,cAAc,qBAAqB;QACpC,IAAI;QACJ,IAAI;QACJ,IAAI;IACN;AACF;AACO,IAAI,sBAAsB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM;IAAC;IAAS;CAAS,EAAE,CAAA;IACjF,IAAI,EACF,KAAK,EACL,MAAM,EACP,GAAG;IACJ,OAAO,MAAM,MAAM;QACjB,kBAAkB,SAAS,cAAc,CAAC,EAAE,CAAC;YAC3C,OAAO,CAAA,GAAA,uJAAA,CAAA,cAAW,AAAD,EAAE,GAAG,GAAG,OAAO,MAAM,EAAE,OAAO,MAAM,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC;QAC5E;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1019, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/relational/compareNatural.js"],"sourcesContent":["import naturalSort from 'javascript-natural-sort';\nimport { isDenseMatrix, isSparseMatrix, typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'compareNatural';\nvar dependencies = ['typed', 'compare'];\nexport var createCompareNatural = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    compare\n  } = _ref;\n  var compareBooleans = compare.signatures['boolean,boolean'];\n\n  /**\n   * Compare two values of any type in a deterministic, natural way.\n   *\n   * For numeric values, the function works the same as `math.compare`.\n   * For types of values that can't be compared mathematically,\n   * the function compares in a natural way.\n   *\n   * For numeric values, x and y are considered equal when the relative\n   * difference between x and y is smaller than the configured relTol and absTol.\n   * The function cannot be used to compare values smaller than\n   * approximately 2.22e-16.\n   *\n   * For Complex numbers, first the real parts are compared. If equal,\n   * the imaginary parts are compared.\n   *\n   * Strings are compared with a natural sorting algorithm, which\n   * orders strings in a \"logic\" way following some heuristics.\n   * This differs from the function `compare`, which converts the string\n   * into a numeric value and compares that. The function `compareText`\n   * on the other hand compares text lexically.\n   *\n   * Arrays and Matrices are compared value by value until there is an\n   * unequal pair of values encountered. Objects are compared by sorted\n   * keys until the keys or their values are unequal.\n   *\n   * Syntax:\n   *\n   *    math.compareNatural(x, y)\n   *\n   * Examples:\n   *\n   *    math.compareNatural(6, 1)              // returns 1\n   *    math.compareNatural(2, 3)              // returns -1\n   *    math.compareNatural(7, 7)              // returns 0\n   *\n   *    math.compareNatural('10', '2')         // returns 1\n   *    math.compareText('10', '2')            // returns -1\n   *    math.compare('10', '2')                // returns 1\n   *\n   *    math.compareNatural('Answer: 10', 'Answer: 2') // returns 1\n   *    math.compareText('Answer: 10', 'Answer: 2')    // returns -1\n   *    math.compare('Answer: 10', 'Answer: 2')\n   *        // Error: Cannot convert \"Answer: 10\" to a number\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('40 mm')\n   *    math.compareNatural(a, b)              // returns 1\n   *\n   *    const c = math.complex('2 + 3i')\n   *    const d = math.complex('2 + 4i')\n   *    math.compareNatural(c, d)              // returns -1\n   *\n   *    math.compareNatural([1, 2, 4], [1, 2, 3]) // returns 1\n   *    math.compareNatural([1, 2, 3], [1, 2])    // returns 1\n   *    math.compareNatural([1, 5], [1, 2, 3])    // returns 1\n   *    math.compareNatural([1, 2], [1, 2])       // returns 0\n   *\n   *    math.compareNatural({a: 2}, {a: 4})       // returns -1\n   *\n   * See also:\n   *\n   *    compare, compareText\n   *\n   * @param  {*} x First value to compare\n   * @param  {*} y Second value to compare\n   * @return {number} Returns the result of the comparison:\n   *                  1 when x > y, -1 when x < y, and 0 when x == y.\n   */\n  return typed(name, {\n    'any, any': _compareNatural\n  }); // just to check # args\n\n  function _compareNatural(x, y) {\n    var typeX = typeOf(x);\n    var typeY = typeOf(y);\n    var c;\n\n    // numeric types\n    if ((typeX === 'number' || typeX === 'BigNumber' || typeX === 'Fraction') && (typeY === 'number' || typeY === 'BigNumber' || typeY === 'Fraction')) {\n      c = compare(x, y);\n      if (c.toString() !== '0') {\n        // c can be number, BigNumber, or Fraction\n        return c > 0 ? 1 : -1; // return a number\n      } else {\n        return naturalSort(typeX, typeY);\n      }\n    }\n\n    // matrix types\n    var matTypes = ['Array', 'DenseMatrix', 'SparseMatrix'];\n    if (matTypes.includes(typeX) || matTypes.includes(typeY)) {\n      c = compareMatricesAndArrays(_compareNatural, x, y);\n      if (c !== 0) {\n        return c;\n      } else {\n        return naturalSort(typeX, typeY);\n      }\n    }\n\n    // in case of different types, order by name of type, i.e. 'BigNumber' < 'Complex'\n    if (typeX !== typeY) {\n      return naturalSort(typeX, typeY);\n    }\n    if (typeX === 'Complex') {\n      return compareComplexNumbers(x, y);\n    }\n    if (typeX === 'Unit') {\n      if (x.equalBase(y)) {\n        return _compareNatural(x.value, y.value);\n      }\n\n      // compare by units\n      return compareArrays(_compareNatural, x.formatUnits(), y.formatUnits());\n    }\n    if (typeX === 'boolean') {\n      return compareBooleans(x, y);\n    }\n    if (typeX === 'string') {\n      return naturalSort(x, y);\n    }\n    if (typeX === 'Object') {\n      return compareObjects(_compareNatural, x, y);\n    }\n    if (typeX === 'null') {\n      return 0;\n    }\n    if (typeX === 'undefined') {\n      return 0;\n    }\n\n    // this should not occur...\n    throw new TypeError('Unsupported type of value \"' + typeX + '\"');\n  }\n\n  /**\n   * Compare mixed matrix/array types, by converting to same-shaped array.\n   * This comparator is non-deterministic regarding input types.\n   * @param {Array | SparseMatrix | DenseMatrix | *} x\n   * @param {Array | SparseMatrix | DenseMatrix | *} y\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n  function compareMatricesAndArrays(compareNatural, x, y) {\n    if (isSparseMatrix(x) && isSparseMatrix(y)) {\n      return compareArrays(compareNatural, x.toJSON().values, y.toJSON().values);\n    }\n    if (isSparseMatrix(x)) {\n      // note: convert to array is expensive\n      return compareMatricesAndArrays(compareNatural, x.toArray(), y);\n    }\n    if (isSparseMatrix(y)) {\n      // note: convert to array is expensive\n      return compareMatricesAndArrays(compareNatural, x, y.toArray());\n    }\n\n    // convert DenseArray into Array\n    if (isDenseMatrix(x)) {\n      return compareMatricesAndArrays(compareNatural, x.toJSON().data, y);\n    }\n    if (isDenseMatrix(y)) {\n      return compareMatricesAndArrays(compareNatural, x, y.toJSON().data);\n    }\n\n    // convert scalars to array\n    if (!Array.isArray(x)) {\n      return compareMatricesAndArrays(compareNatural, [x], y);\n    }\n    if (!Array.isArray(y)) {\n      return compareMatricesAndArrays(compareNatural, x, [y]);\n    }\n    return compareArrays(compareNatural, x, y);\n  }\n\n  /**\n   * Compare two Arrays\n   *\n   * - First, compares value by value\n   * - Next, if all corresponding values are equal,\n   *   look at the length: longest array will be considered largest\n   *\n   * @param {Array} x\n   * @param {Array} y\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n  function compareArrays(compareNatural, x, y) {\n    // compare each value\n    for (var i = 0, ii = Math.min(x.length, y.length); i < ii; i++) {\n      var v = compareNatural(x[i], y[i]);\n      if (v !== 0) {\n        return v;\n      }\n    }\n\n    // compare the size of the arrays\n    if (x.length > y.length) {\n      return 1;\n    }\n    if (x.length < y.length) {\n      return -1;\n    }\n\n    // both Arrays have equal size and content\n    return 0;\n  }\n\n  /**\n   * Compare two objects\n   *\n   * - First, compare sorted property names\n   * - Next, compare the property values\n   *\n   * @param {Object} x\n   * @param {Object} y\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n  function compareObjects(compareNatural, x, y) {\n    var keysX = Object.keys(x);\n    var keysY = Object.keys(y);\n\n    // compare keys\n    keysX.sort(naturalSort);\n    keysY.sort(naturalSort);\n    var c = compareArrays(compareNatural, keysX, keysY);\n    if (c !== 0) {\n      return c;\n    }\n\n    // compare values\n    for (var i = 0; i < keysX.length; i++) {\n      var v = compareNatural(x[keysX[i]], y[keysY[i]]);\n      if (v !== 0) {\n        return v;\n      }\n    }\n    return 0;\n  }\n});\n\n/**\n * Compare two complex numbers, `x` and `y`:\n *\n * - First, compare the real values of `x` and `y`\n * - If equal, compare the imaginary values of `x` and `y`\n *\n * @params {Complex} x\n * @params {Complex} y\n * @returns {number} Returns the comparison result: -1, 0, or 1\n */\nfunction compareComplexNumbers(x, y) {\n  if (x.re > y.re) {\n    return 1;\n  }\n  if (x.re < y.re) {\n    return -1;\n  }\n  if (x.im > y.im) {\n    return 1;\n  }\n  if (x.im < y.im) {\n    return -1;\n  }\n  return 0;\n}"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1292, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/relational/compareText.js"],"sourcesContent":["import { compareText as _compareText } from '../../utils/string.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'compareText';\nvar dependencies = ['typed', 'matrix', 'concat'];\n_compareText.signature = 'any, any';\nexport var createCompareText = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    concat\n  } = _ref;\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\n   * Compare two strings lexically. Comparison is case sensitive.\n   * Returns 1 when x > y, -1 when x < y, and 0 when x == y.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.compareText(x, y)\n   *\n   * Examples:\n   *\n   *    math.compareText('B', 'A')     // returns 1\n   *    math.compareText('2', '10')    // returns 1\n   *    math.compare('2', '10')        // returns -1\n   *    math.compareNatural('2', '10') // returns -1\n   *\n   *    math.compareText('B', ['A', 'B', 'C']) // returns [1, 0, -1]\n   *\n   * See also:\n   *\n   *    equal, equalText, compare, compareNatural\n   *\n   * @param  {string | Array | DenseMatrix} x First string to compare\n   * @param  {string | Array | DenseMatrix} y Second string to compare\n   * @return {number | Array | DenseMatrix} Returns the result of the comparison:\n   *                                        1 when x > y, -1 when x < y, and 0 when x == y.\n   */\n  return typed(name, _compareText, matrixAlgorithmSuite({\n    elop: _compareText,\n    Ds: true\n  }));\n});\nexport var createCompareTextNumber = /* #__PURE__ */factory(name, ['typed'], _ref2 => {\n  var {\n    typed\n  } = _ref2;\n  return typed(name, _compareText);\n});"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;CAAS;AAChD,uJAAA,CAAA,cAAY,CAAC,SAAS,GAAG;AAClB,IAAI,oBAAoB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACxE,IAAI,EACF,KAAK,EACL,MAAM,EACN,MAAM,EACP,GAAG;IACJ,IAAI,uBAAuB,CAAA,GAAA,uLAAA,CAAA,6BAA0B,AAAD,EAAE;QACpD;QACA;QACA;IACF;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BC,GACD,OAAO,MAAM,MAAM,uJAAA,CAAA,cAAY,EAAE,qBAAqB;QACpD,MAAM,uJAAA,CAAA,cAAY;QAClB,IAAI;IACN;AACF;AACO,IAAI,0BAA0B,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM;IAAC;CAAQ,EAAE,CAAA;IAC3E,IAAI,EACF,KAAK,EACN,GAAG;IACJ,OAAO,MAAM,MAAM,uJAAA,CAAA,cAAY;AACjC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1360, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/relational/equal.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'equal';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix', 'concat'];\nexport var createEqual = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\n   * Test whether two values are equal.\n   *\n   * The function tests whether the relative difference between x and y is\n   * smaller than the configured relTol and absTol. The function cannot be used to\n   * compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.\n   *\n   * Values `null` and `undefined` are compared strictly, thus `null` is only\n   * equal to `null` and nothing else, and `undefined` is only equal to\n   * `undefined` and nothing else. Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.equal(x, y)\n   *\n   * Examples:\n   *\n   *    math.equal(2 + 2, 3)         // returns false\n   *    math.equal(2 + 2, 4)         // returns true\n   *\n   *    const a = math.unit('50 cm')\n   *    const b = math.unit('5 m')\n   *    math.equal(a, b)             // returns true\n   *\n   *    const c = [2, 5, 1]\n   *    const d = [2, 7, 1]\n   *\n   *    math.equal(c, d)             // returns [true, false, true]\n   *    math.deepEqual(c, d)         // returns false\n   *\n   *    math.equal(\"1000\", \"1e3\")    // returns true\n   *    math.equal(0, null)          // returns false\n   *\n   * See also:\n   *\n   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual, equalText\n   *\n   * @param  {number | BigNumber | bigint | boolean | Complex | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | bigint | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false\n   */\n  return typed(name, createEqualNumber({\n    typed,\n    equalScalar\n  }), matrixAlgorithmSuite({\n    elop: equalScalar,\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createEqualNumber = factory(name, ['typed', 'equalScalar'], _ref2 => {\n  var {\n    typed,\n    equalScalar\n  } = _ref2;\n  return typed(name, {\n    'any, any': function any_any(x, y) {\n      // strict equality for null and undefined?\n      if (x === null) {\n        return y === null;\n      }\n      if (y === null) {\n        return x === null;\n      }\n      if (x === undefined) {\n        return y === undefined;\n      }\n      if (y === undefined) {\n        return x === undefined;\n      }\n      return equalScalar(x, y);\n    }\n  });\n});"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;;;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;IAAe;IAAe;CAAS;AACvE,IAAI,cAAc,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAClE,IAAI,EACF,KAAK,EACL,MAAM,EACN,WAAW,EACX,WAAW,EACX,MAAM,EACP,GAAG;IACJ,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;IACF;IACA,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;QACA;IACF;IACA,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;QACA;IACF;IACA,IAAI,uBAAuB,CAAA,GAAA,uLAAA,CAAA,6BAA0B,AAAD,EAAE;QACpD;QACA;QACA;IACF;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2CC,GACD,OAAO,MAAM,MAAM,kBAAkB;QACnC;QACA;IACF,IAAI,qBAAqB;QACvB,MAAM;QACN,IAAI;QACJ,IAAI;QACJ,IAAI;IACN;AACF;AACO,IAAI,oBAAoB,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM;IAAC;IAAS;CAAc,EAAE,CAAA;IACrE,IAAI,EACF,KAAK,EACL,WAAW,EACZ,GAAG;IACJ,OAAO,MAAM,MAAM;QACjB,YAAY,SAAS,QAAQ,CAAC,EAAE,CAAC;YAC/B,0CAA0C;YAC1C,IAAI,MAAM,MAAM;gBACd,OAAO,MAAM;YACf;YACA,IAAI,MAAM,MAAM;gBACd,OAAO,MAAM;YACf;YACA,IAAI,MAAM,WAAW;gBACnB,OAAO,MAAM;YACf;YACA,IAAI,MAAM,WAAW;gBACnB,OAAO,MAAM;YACf;YACA,OAAO,YAAY,GAAG;QACxB;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1483, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/relational/equalText.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'equalText';\nvar dependencies = ['typed', 'compareText', 'isZero'];\nexport var createEqualText = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    compareText,\n    isZero\n  } = _ref;\n  /**\n   * Check equality of two strings. Comparison is case sensitive.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.equalText(x, y)\n   *\n   * Examples:\n   *\n   *    math.equalText('Hello', 'Hello')     // returns true\n   *    math.equalText('a', 'A')             // returns false\n   *    math.equal('2e3', '2000')            // returns true\n   *    math.equalText('2e3', '2000')        // returns false\n   *\n   *    math.equalText('B', ['A', 'B', 'C']) // returns [false, true, false]\n   *\n   * See also:\n   *\n   *    equal, compareText, compare, compareNatural\n   *\n   * @param  {string | Array | DenseMatrix} x First string to compare\n   * @param  {string | Array | DenseMatrix} y Second string to compare\n   * @return {number | Array | DenseMatrix} Returns true if the values are equal, and false if not.\n   */\n  return typed(name, {\n    'any, any': function any_any(x, y) {\n      return isZero(compareText(x, y));\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAe;CAAS;AAC9C,IAAI,kBAAkB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACtE,IAAI,EACF,KAAK,EACL,WAAW,EACX,MAAM,EACP,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;GAyBC,GACD,OAAO,MAAM,MAAM;QACjB,YAAY,SAAS,QAAQ,CAAC,EAAE,CAAC;YAC/B,OAAO,OAAO,YAAY,GAAG;QAC/B;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1533, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/relational/smaller.js"],"sourcesContent":["import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'smaller';\nvar dependencies = ['typed', 'config', 'matrix', 'DenseMatrix', 'concat'];\nexport var createSmaller = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  var compareUnits = createCompareUnits({\n    typed\n  });\n\n  /**\n   * Test whether value x is smaller than y.\n   *\n   * The function returns true when x is smaller than y and the relative\n   * difference between x and y is smaller than the configured relTol and absTol. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.smaller(x, y)\n   *\n   * Examples:\n   *\n   *    math.smaller(2, 3)            // returns true\n   *    math.smaller(5, 2 * 2)        // returns false\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('2 inch')\n   *    math.smaller(a, b)            // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smallerEq, smaller, smallerEq, compare\n   *\n   * @param  {number | BigNumber | bigint | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | bigint | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false\n   */\n  return typed(name, createSmallerNumber({\n    typed,\n    config\n  }), {\n    'boolean, boolean': (x, y) => x < y,\n    'BigNumber, BigNumber': function BigNumber_BigNumber(x, y) {\n      return x.lt(y) && !bigNearlyEqual(x, y, config.relTol, config.absTol);\n    },\n    'bigint, bigint': (x, y) => x < y,\n    'Fraction, Fraction': (x, y) => x.compare(y) === -1,\n    'Complex, Complex': function Complex_Complex(x, y) {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createSmallerNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function number_number(x, y) {\n      return x < y && !nearlyEqual(x, y, config.relTol, config.absTol);\n    }\n  });\n});"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;IAAU;IAAe;CAAS;AAClE,IAAI,gBAAgB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACpE,IAAI,EACF,KAAK,EACL,MAAM,EACN,MAAM,EACN,WAAW,EACX,MAAM,EACP,GAAG;IACJ,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;IACF;IACA,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;QACA;IACF;IACA,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;QACA;IACF;IACA,IAAI,uBAAuB,CAAA,GAAA,uLAAA,CAAA,6BAA0B,AAAD,EAAE;QACpD;QACA;QACA;IACF;IACA,IAAI,eAAe,CAAA,GAAA,8KAAA,CAAA,qBAAkB,AAAD,EAAE;QACpC;IACF;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BC,GACD,OAAO,MAAM,MAAM,oBAAoB;QACrC;QACA;IACF,IAAI;QACF,oBAAoB,CAAC,GAAG,IAAM,IAAI;QAClC,wBAAwB,SAAS,oBAAoB,CAAC,EAAE,CAAC;YACvD,OAAO,EAAE,EAAE,CAAC,MAAM,CAAC,CAAA,GAAA,yKAAA,CAAA,cAAc,AAAD,EAAE,GAAG,GAAG,OAAO,MAAM,EAAE,OAAO,MAAM;QACtE;QACA,kBAAkB,CAAC,GAAG,IAAM,IAAI;QAChC,sBAAsB,CAAC,GAAG,IAAM,EAAE,OAAO,CAAC,OAAO,CAAC;QAClD,oBAAoB,SAAS,gBAAgB,CAAC,EAAE,CAAC;YAC/C,MAAM,IAAI,UAAU;QACtB;IACF,GAAG,cAAc,qBAAqB;QACpC,IAAI;QACJ,IAAI;QACJ,IAAI;IACN;AACF;AACO,IAAI,sBAAsB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM;IAAC;IAAS;CAAS,EAAE,CAAA;IACjF,IAAI,EACF,KAAK,EACL,MAAM,EACP,GAAG;IACJ,OAAO,MAAM,MAAM;QACjB,kBAAkB,SAAS,cAAc,CAAC,EAAE,CAAC;YAC3C,OAAO,IAAI,KAAK,CAAC,CAAA,GAAA,uJAAA,CAAA,cAAW,AAAD,EAAE,GAAG,GAAG,OAAO,MAAM,EAAE,OAAO,MAAM;QACjE;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1648, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/relational/smallerEq.js"],"sourcesContent":["import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'smallerEq';\nvar dependencies = ['typed', 'config', 'matrix', 'DenseMatrix', 'concat'];\nexport var createSmallerEq = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  var compareUnits = createCompareUnits({\n    typed\n  });\n\n  /**\n   * Test whether value x is smaller or equal to y.\n   *\n   * The function returns true when x is smaller than y or the relative\n   * difference between x and y is smaller than the configured relTol and absTol. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.smallerEq(x, y)\n   *\n   * Examples:\n   *\n   *    math.smaller(1 + 2, 3)        // returns false\n   *    math.smallerEq(1 + 2, 3)      // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, larger, largerEq, compare\n   *\n   * @param  {number | BigNumber | bigint | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | bigint | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false\n   */\n  return typed(name, createSmallerEqNumber({\n    typed,\n    config\n  }), {\n    'boolean, boolean': (x, y) => x <= y,\n    'BigNumber, BigNumber': function BigNumber_BigNumber(x, y) {\n      return x.lte(y) || bigNearlyEqual(x, y, config.relTol, config.absTol);\n    },\n    'bigint, bigint': (x, y) => x <= y,\n    'Fraction, Fraction': (x, y) => x.compare(y) !== 1,\n    'Complex, Complex': function Complex_Complex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createSmallerEqNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function number_number(x, y) {\n      return x <= y || nearlyEqual(x, y, config.relTol, config.absTol);\n    }\n  });\n});"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;IAAU;IAAe;CAAS;AAClE,IAAI,kBAAkB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACtE,IAAI,EACF,KAAK,EACL,MAAM,EACN,MAAM,EACN,WAAW,EACX,MAAM,EACP,GAAG;IACJ,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;IACF;IACA,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;QACA;IACF;IACA,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;QACA;IACF;IACA,IAAI,uBAAuB,CAAA,GAAA,uLAAA,CAAA,6BAA0B,AAAD,EAAE;QACpD;QACA;QACA;IACF;IACA,IAAI,eAAe,CAAA,GAAA,8KAAA,CAAA,qBAAkB,AAAD,EAAE;QACpC;IACF;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BC,GACD,OAAO,MAAM,MAAM,sBAAsB;QACvC;QACA;IACF,IAAI;QACF,oBAAoB,CAAC,GAAG,IAAM,KAAK;QACnC,wBAAwB,SAAS,oBAAoB,CAAC,EAAE,CAAC;YACvD,OAAO,EAAE,GAAG,CAAC,MAAM,CAAA,GAAA,yKAAA,CAAA,cAAc,AAAD,EAAE,GAAG,GAAG,OAAO,MAAM,EAAE,OAAO,MAAM;QACtE;QACA,kBAAkB,CAAC,GAAG,IAAM,KAAK;QACjC,sBAAsB,CAAC,GAAG,IAAM,EAAE,OAAO,CAAC,OAAO;QACjD,oBAAoB,SAAS;YAC3B,MAAM,IAAI,UAAU;QACtB;IACF,GAAG,cAAc,qBAAqB;QACpC,IAAI;QACJ,IAAI;QACJ,IAAI;IACN;AACF;AACO,IAAI,wBAAwB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM;IAAC;IAAS;CAAS,EAAE,CAAA;IACnF,IAAI,EACF,KAAK,EACL,MAAM,EACP,GAAG;IACJ,OAAO,MAAM,MAAM;QACjB,kBAAkB,SAAS,cAAc,CAAC,EAAE,CAAC;YAC3C,OAAO,KAAK,KAAK,CAAA,GAAA,uJAAA,CAAA,cAAW,AAAD,EAAE,GAAG,GAAG,OAAO,MAAM,EAAE,OAAO,MAAM;QACjE;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1759, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/relational/larger.js"],"sourcesContent":["import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'larger';\nvar dependencies = ['typed', 'config', 'matrix', 'DenseMatrix', 'concat'];\nexport var createLarger = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  var compareUnits = createCompareUnits({\n    typed\n  });\n\n  /**\n   * Test whether value x is larger than y.\n   *\n   * The function returns true when x is larger than y and the relative\n   * difference between x and y is larger than the configured relTol and absTol. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.larger(x, y)\n   *\n   * Examples:\n   *\n   *    math.larger(2, 3)             // returns false\n   *    math.larger(5, 2 + 2)         // returns true\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('2 inch')\n   *    math.larger(a, b)             // returns false\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, largerEq, compare\n   *\n   * @param  {number | BigNumber | bigint | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | bigint | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false\n   */\n  return typed(name, createLargerNumber({\n    typed,\n    config\n  }), {\n    'boolean, boolean': (x, y) => x > y,\n    'BigNumber, BigNumber': function BigNumber_BigNumber(x, y) {\n      return x.gt(y) && !bigNearlyEqual(x, y, config.relTol, config.absTol);\n    },\n    'bigint, bigint': (x, y) => x > y,\n    'Fraction, Fraction': (x, y) => x.compare(y) === 1,\n    'Complex, Complex': function Complex_Complex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createLargerNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function number_number(x, y) {\n      return x > y && !nearlyEqual(x, y, config.relTol, config.absTol);\n    }\n  });\n});"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;IAAU;IAAe;CAAS;AAClE,IAAI,eAAe,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACnE,IAAI,EACF,KAAK,EACL,MAAM,EACN,MAAM,EACN,WAAW,EACX,MAAM,EACP,GAAG;IACJ,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;IACF;IACA,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;QACA;IACF;IACA,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;QACA;IACF;IACA,IAAI,uBAAuB,CAAA,GAAA,uLAAA,CAAA,6BAA0B,AAAD,EAAE;QACpD;QACA;QACA;IACF;IACA,IAAI,eAAe,CAAA,GAAA,8KAAA,CAAA,qBAAkB,AAAD,EAAE;QACpC;IACF;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BC,GACD,OAAO,MAAM,MAAM,mBAAmB;QACpC;QACA;IACF,IAAI;QACF,oBAAoB,CAAC,GAAG,IAAM,IAAI;QAClC,wBAAwB,SAAS,oBAAoB,CAAC,EAAE,CAAC;YACvD,OAAO,EAAE,EAAE,CAAC,MAAM,CAAC,CAAA,GAAA,yKAAA,CAAA,cAAc,AAAD,EAAE,GAAG,GAAG,OAAO,MAAM,EAAE,OAAO,MAAM;QACtE;QACA,kBAAkB,CAAC,GAAG,IAAM,IAAI;QAChC,sBAAsB,CAAC,GAAG,IAAM,EAAE,OAAO,CAAC,OAAO;QACjD,oBAAoB,SAAS;YAC3B,MAAM,IAAI,UAAU;QACtB;IACF,GAAG,cAAc,qBAAqB;QACpC,IAAI;QACJ,IAAI;QACJ,IAAI;IACN;AACF;AACO,IAAI,qBAAqB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM;IAAC;IAAS;CAAS,EAAE,CAAA;IAChF,IAAI,EACF,KAAK,EACL,MAAM,EACP,GAAG;IACJ,OAAO,MAAM,MAAM;QACjB,kBAAkB,SAAS,cAAc,CAAC,EAAE,CAAC;YAC3C,OAAO,IAAI,KAAK,CAAC,CAAA,GAAA,uJAAA,CAAA,cAAW,AAAD,EAAE,GAAG,GAAG,OAAO,MAAM,EAAE,OAAO,MAAM;QACjE;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1874, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/relational/largerEq.js"],"sourcesContent":["import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'largerEq';\nvar dependencies = ['typed', 'config', 'matrix', 'DenseMatrix', 'concat'];\nexport var createLargerEq = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  var compareUnits = createCompareUnits({\n    typed\n  });\n\n  /**\n   * Test whether value x is larger or equal to y.\n   *\n   * The function returns true when x is larger than y or the relative\n   * difference between x and y is smaller than the configured relTol and absTol. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.largerEq(x, y)\n   *\n   * Examples:\n   *\n   *    math.larger(2, 1 + 1)         // returns false\n   *    math.largerEq(2, 1 + 1)       // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, larger, compare\n   *\n   * @param  {number | BigNumber | bigint | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | bigint | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false\n   */\n  return typed(name, createLargerEqNumber({\n    typed,\n    config\n  }), {\n    'boolean, boolean': (x, y) => x >= y,\n    'BigNumber, BigNumber': function BigNumber_BigNumber(x, y) {\n      return x.gte(y) || bigNearlyEqual(x, y, config.relTol, config.absTol);\n    },\n    'bigint, bigint': function bigint_bigint(x, y) {\n      return x >= y;\n    },\n    'Fraction, Fraction': (x, y) => x.compare(y) !== -1,\n    'Complex, Complex': function Complex_Complex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createLargerEqNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function number_number(x, y) {\n      return x >= y || nearlyEqual(x, y, config.relTol, config.absTol);\n    }\n  });\n});"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;IAAU;IAAe;CAAS;AAClE,IAAI,iBAAiB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACrE,IAAI,EACF,KAAK,EACL,MAAM,EACN,MAAM,EACN,WAAW,EACX,MAAM,EACP,GAAG;IACJ,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;IACF;IACA,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;QACA;IACF;IACA,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;QACA;IACF;IACA,IAAI,uBAAuB,CAAA,GAAA,uLAAA,CAAA,6BAA0B,AAAD,EAAE;QACpD;QACA;QACA;IACF;IACA,IAAI,eAAe,CAAA,GAAA,8KAAA,CAAA,qBAAkB,AAAD,EAAE;QACpC;IACF;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BC,GACD,OAAO,MAAM,MAAM,qBAAqB;QACtC;QACA;IACF,IAAI;QACF,oBAAoB,CAAC,GAAG,IAAM,KAAK;QACnC,wBAAwB,SAAS,oBAAoB,CAAC,EAAE,CAAC;YACvD,OAAO,EAAE,GAAG,CAAC,MAAM,CAAA,GAAA,yKAAA,CAAA,cAAc,AAAD,EAAE,GAAG,GAAG,OAAO,MAAM,EAAE,OAAO,MAAM;QACtE;QACA,kBAAkB,SAAS,cAAc,CAAC,EAAE,CAAC;YAC3C,OAAO,KAAK;QACd;QACA,sBAAsB,CAAC,GAAG,IAAM,EAAE,OAAO,CAAC,OAAO,CAAC;QAClD,oBAAoB,SAAS;YAC3B,MAAM,IAAI,UAAU;QACtB;IACF,GAAG,cAAc,qBAAqB;QACpC,IAAI;QACJ,IAAI;QACJ,IAAI;IACN;AACF;AACO,IAAI,uBAAuB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM;IAAC;IAAS;CAAS,EAAE,CAAA;IAClF,IAAI,EACF,KAAK,EACL,MAAM,EACP,GAAG;IACJ,OAAO,MAAM,MAAM;QACjB,kBAAkB,SAAS,cAAc,CAAC,EAAE,CAAC;YAC3C,OAAO,KAAK,KAAK,CAAA,GAAA,uJAAA,CAAA,cAAW,AAAD,EAAE,GAAG,GAAG,OAAO,MAAM,EAAE,OAAO,MAAM;QACjE;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1987, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/relational/deepEqual.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'deepEqual';\nvar dependencies = ['typed', 'equal'];\nexport var createDeepEqual = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equal\n  } = _ref;\n  /**\n   * Test element wise whether two matrices are equal.\n   * The function accepts both matrices and scalar values.\n   *\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.deepEqual(x, y)\n   *\n   * Examples:\n   *\n   *    math.deepEqual(2, 4)   // returns false\n   *\n   *    a = [2, 5, 1]\n   *    b = [2, 7, 1]\n   *\n   *    math.deepEqual(a, b)   // returns false\n   *    math.equal(a, b)       // returns [true, false, true]\n   *\n   * See also:\n   *\n   *    equal, unequal\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Returns true when the input matrices have the same size and each of their elements is equal.\n   */\n  return typed(name, {\n    'any, any': function any_any(x, y) {\n      return _deepEqual(x.valueOf(), y.valueOf());\n    }\n  });\n\n  /**\n   * Test whether two arrays have the same size and all elements are equal\n   * @param {Array | *} x\n   * @param {Array | *} y\n   * @return {boolean} Returns true if both arrays are deep equal\n   */\n  function _deepEqual(x, y) {\n    if (Array.isArray(x)) {\n      if (Array.isArray(y)) {\n        var len = x.length;\n        if (len !== y.length) {\n          return false;\n        }\n        for (var i = 0; i < len; i++) {\n          if (!_deepEqual(x[i], y[i])) {\n            return false;\n          }\n        }\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      if (Array.isArray(y)) {\n        return false;\n      } else {\n        return equal(x, y);\n      }\n    }\n  }\n});"],"names":[],"mappings":";;;AAAA;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;CAAQ;AAC9B,IAAI,kBAAkB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACtE,IAAI,EACF,KAAK,EACL,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BC,GACD,OAAO,MAAM,MAAM;QACjB,YAAY,SAAS,QAAQ,CAAC,EAAE,CAAC;YAC/B,OAAO,WAAW,EAAE,OAAO,IAAI,EAAE,OAAO;QAC1C;IACF;;IAEA;;;;;GAKC,GACD,SAAS,WAAW,CAAC,EAAE,CAAC;QACtB,IAAI,MAAM,OAAO,CAAC,IAAI;YACpB,IAAI,MAAM,OAAO,CAAC,IAAI;gBACpB,IAAI,MAAM,EAAE,MAAM;gBAClB,IAAI,QAAQ,EAAE,MAAM,EAAE;oBACpB,OAAO;gBACT;gBACA,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,IAAK;oBAC5B,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG;wBAC3B,OAAO;oBACT;gBACF;gBACA,OAAO;YACT,OAAO;gBACL,OAAO;YACT;QACF,OAAO;YACL,IAAI,MAAM,OAAO,CAAC,IAAI;gBACpB,OAAO;YACT,OAAO;gBACL,OAAO,MAAM,GAAG;YAClB;QACF;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2069, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/relational/unequal.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'unequal';\nvar dependencies = ['typed', 'config', 'equalScalar', 'matrix', 'DenseMatrix', 'concat'];\nexport var createUnequal = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    equalScalar,\n    matrix,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\n   * Test whether two values are unequal.\n   *\n   * The function tests whether the relative difference between x and y is\n   * larger than the configured relTol and absTol. The function cannot be used to compare\n   * values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.\n   * Strings are compared by their numerical value.\n   *\n   * Values `null` and `undefined` are compared strictly, thus `null` is unequal\n   * with everything except `null`, and `undefined` is unequal with everything\n   * except `undefined`.\n   *\n   * Syntax:\n   *\n   *    math.unequal(x, y)\n   *\n   * Examples:\n   *\n   *    math.unequal(2 + 2, 3)       // returns true\n   *    math.unequal(2 + 2, 4)       // returns false\n   *\n   *    const a = math.unit('50 cm')\n   *    const b = math.unit('5 m')\n   *    math.unequal(a, b)           // returns false\n   *\n   *    const c = [2, 5, 1]\n   *    const d = [2, 7, 1]\n   *\n   *    math.unequal(c, d)           // returns [false, true, false]\n   *    math.deepEqual(c, d)         // returns false\n   *\n   *    math.unequal(0, null)        // returns true\n   * See also:\n   *\n   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false\n   */\n  return typed(name, createUnequalNumber({\n    typed,\n    equalScalar\n  }), matrixAlgorithmSuite({\n    elop: _unequal,\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n  function _unequal(x, y) {\n    return !equalScalar(x, y);\n  }\n});\nexport var createUnequalNumber = factory(name, ['typed', 'equalScalar'], _ref2 => {\n  var {\n    typed,\n    equalScalar\n  } = _ref2;\n  return typed(name, {\n    'any, any': function any_any(x, y) {\n      // strict equality for null and undefined?\n      if (x === null) {\n        return y !== null;\n      }\n      if (y === null) {\n        return x !== null;\n      }\n      if (x === undefined) {\n        return y !== undefined;\n      }\n      if (y === undefined) {\n        return x !== undefined;\n      }\n      return !equalScalar(x, y);\n    }\n  });\n});"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;;;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;IAAe;IAAU;IAAe;CAAS;AACjF,IAAI,gBAAgB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACpE,IAAI,EACF,KAAK,EACL,MAAM,EACN,WAAW,EACX,MAAM,EACN,WAAW,EACX,MAAM,EACP,GAAG;IACJ,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;IACF;IACA,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;QACA;IACF;IACA,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;QACA;IACF;IACA,IAAI,uBAAuB,CAAA,GAAA,uLAAA,CAAA,6BAA0B,AAAD,EAAE;QACpD;QACA;QACA;IACF;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0CC,GACD,OAAO,MAAM,MAAM,oBAAoB;QACrC;QACA;IACF,IAAI,qBAAqB;QACvB,MAAM;QACN,IAAI;QACJ,IAAI;QACJ,IAAI;IACN;;IACA,SAAS,SAAS,CAAC,EAAE,CAAC;QACpB,OAAO,CAAC,YAAY,GAAG;IACzB;AACF;AACO,IAAI,sBAAsB,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM;IAAC;IAAS;CAAc,EAAE,CAAA;IACvE,IAAI,EACF,KAAK,EACL,WAAW,EACZ,GAAG;IACJ,OAAO,MAAM,MAAM;QACjB,YAAY,SAAS,QAAQ,CAAC,EAAE,CAAC;YAC/B,0CAA0C;YAC1C,IAAI,MAAM,MAAM;gBACd,OAAO,MAAM;YACf;YACA,IAAI,MAAM,MAAM;gBACd,OAAO,MAAM;YACf;YACA,IAAI,MAAM,WAAW;gBACnB,OAAO,MAAM;YACf;YACA,IAAI,MAAM,WAAW;gBACnB,OAAO,MAAM;YACf;YACA,OAAO,CAAC,YAAY,GAAG;QACzB;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2196, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/bitwise/bitAnd.js"],"sourcesContent":["import { bitAndBigNumber } from '../../utils/bignumber/bitwise.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo06xS0S0 } from '../../type/matrix/utils/matAlgo06xS0S0.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { bitAndNumber } from '../../plain/number/index.js';\nvar name = 'bitAnd';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'concat'];\nexport var createBitAnd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    concat\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo06xS0S0 = createMatAlgo06xS0S0({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\n   * Bitwise AND two values, `x & y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.bitAnd(x, y)\n   *\n   * Examples:\n   *\n   *    math.bitAnd(53, 131)               // returns number 1\n   *\n   *    math.bitAnd([1, 12, 31], 42)       // returns Array [0, 8, 10]\n   *\n   * See also:\n   *\n   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | bigint | Array | Matrix} x First value to and\n   * @param  {number | BigNumber | bigint | Array | Matrix} y Second value to and\n   * @return {number | BigNumber | bigint | Array | Matrix} AND of `x` and `y`\n   */\n  return typed(name, {\n    'number, number': bitAndNumber,\n    'BigNumber, BigNumber': bitAndBigNumber,\n    'bigint, bigint': (x, y) => x & y\n  }, matrixAlgorithmSuite({\n    SS: matAlgo06xS0S0,\n    DS: matAlgo02xDS0,\n    Ss: matAlgo11xS0s\n  }));\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;IAAe;CAAS;AACxD,IAAI,eAAe,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACnE,IAAI,EACF,KAAK,EACL,MAAM,EACN,WAAW,EACX,MAAM,EACP,GAAG;IACJ,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;QACA;IACF;IACA,IAAI,iBAAiB,CAAA,GAAA,iLAAA,CAAA,uBAAoB,AAAD,EAAE;QACxC;QACA;IACF;IACA,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;QACA;IACF;IACA,IAAI,uBAAuB,CAAA,GAAA,uLAAA,CAAA,6BAA0B,AAAD,EAAE;QACpD;QACA;QACA;IACF;IAEA;;;;;;;;;;;;;;;;;;;;;GAqBC,GACD,OAAO,MAAM,MAAM;QACjB,kBAAkB,kKAAA,CAAA,eAAY;QAC9B,wBAAwB,qKAAA,CAAA,kBAAe;QACvC,kBAAkB,CAAC,GAAG,IAAM,IAAI;IAClC,GAAG,qBAAqB;QACtB,IAAI;QACJ,IAAI;QACJ,IAAI;IACN;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2276, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/bitwise/bitNot.js"],"sourcesContent":["import { bitNotBigNumber } from '../../utils/bignumber/bitwise.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { bitNotNumber } from '../../plain/number/index.js';\nvar name = 'bitNot';\nvar dependencies = ['typed'];\nexport var createBitNot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Bitwise NOT value, `~x`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.bitNot(x)\n   *\n   * Examples:\n   *\n   *    math.bitNot(1)               // returns number -2\n   *\n   *    math.bitNot([2, -3, 4])      // returns Array [-3, 2, -5]\n   *\n   * See also:\n   *\n   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | bigint | Array | Matrix} x Value to not\n   * @return {number | BigNumber | bigint | Array | Matrix} NOT of `x`\n   */\n  return typed(name, {\n    number: bitNotNumber,\n    BigNumber: bitNotBigNumber,\n    bigint: x => ~x,\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,eAAe,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACnE,IAAI,EACF,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;GAqBC,GACD,OAAO,MAAM,MAAM;QACjB,QAAQ,kKAAA,CAAA,eAAY;QACpB,WAAW,qKAAA,CAAA,kBAAe;QAC1B,QAAQ,CAAA,IAAK,CAAC;QACd,kBAAkB,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAA,IAAK,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,GAAG;IAC9D;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2327, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/bitwise/bitOr.js"],"sourcesContent":["import { bitOrBigNumber } from '../../utils/bignumber/bitwise.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatAlgo04xSidSid } from '../../type/matrix/utils/matAlgo04xSidSid.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { bitOrNumber } from '../../plain/number/index.js';\nvar name = 'bitOr';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix', 'concat'];\nexport var createBitOr = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo04xSidSid = createMatAlgo04xSidSid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\n   * Bitwise OR two values, `x | y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the lowest print base.\n   *\n   * Syntax:\n   *\n   *    math.bitOr(x, y)\n   *\n   * Examples:\n   *\n   *    math.bitOr(1, 2)               // returns number 3\n   *\n   *    math.bitOr([1, 2, 3], 4)       // returns Array [5, 6, 7]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | bigint | Array | Matrix} x First value to or\n   * @param  {number | BigNumber | bigint | Array | Matrix} y Second value to or\n   * @return {number | BigNumber | bigint | Array | Matrix} OR of `x` and `y`\n   */\n  return typed(name, {\n    'number, number': bitOrNumber,\n    'BigNumber, BigNumber': bitOrBigNumber,\n    'bigint, bigint': (x, y) => x | y\n  }, matrixAlgorithmSuite({\n    SS: matAlgo04xSidSid,\n    DS: matAlgo01xDSid,\n    Ss: matAlgo10xSids\n  }));\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;IAAe;IAAe;CAAS;AACvE,IAAI,cAAc,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAClE,IAAI,EACF,KAAK,EACL,MAAM,EACN,WAAW,EACX,WAAW,EACX,MAAM,EACP,GAAG;IACJ,IAAI,iBAAiB,CAAA,GAAA,iLAAA,CAAA,uBAAoB,AAAD,EAAE;QACxC;IACF;IACA,IAAI,mBAAmB,CAAA,GAAA,mLAAA,CAAA,yBAAsB,AAAD,EAAE;QAC5C;QACA;IACF;IACA,IAAI,iBAAiB,CAAA,GAAA,iLAAA,CAAA,uBAAoB,AAAD,EAAE;QACxC;QACA;IACF;IACA,IAAI,uBAAuB,CAAA,GAAA,uLAAA,CAAA,6BAA0B,AAAD,EAAE;QACpD;QACA;QACA;IACF;IAEA;;;;;;;;;;;;;;;;;;;;;;GAsBC,GACD,OAAO,MAAM,MAAM;QACjB,kBAAkB,kKAAA,CAAA,cAAW;QAC7B,wBAAwB,qKAAA,CAAA,iBAAc;QACtC,kBAAkB,CAAC,GAAG,IAAM,IAAI;IAClC,GAAG,qBAAqB;QACtB,IAAI;QACJ,IAAI;QACJ,IAAI;IACN;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2408, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/bitwise/bitXor.js"],"sourcesContent":["import { bitXor as bigBitXor } from '../../utils/bignumber/bitwise.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { bitXorNumber } from '../../plain/number/index.js';\nvar name = 'bitXor';\nvar dependencies = ['typed', 'matrix', 'DenseMatrix', 'concat'];\nexport var createBitXor = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\n   * Bitwise XOR two values, `x ^ y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.bitXor(x, y)\n   *\n   * Examples:\n   *\n   *    math.bitXor(1, 2)               // returns number 3\n   *\n   *    math.bitXor([2, 3, 4], 4)       // returns Array [6, 7, 0]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitOr, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | bigint | Array | Matrix} x First value to xor\n   * @param  {number | BigNumber | bigint | Array | Matrix} y Second value to xor\n   * @return {number | BigNumber | bigint | Array | Matrix} XOR of `x` and `y`\n   */\n  return typed(name, {\n    'number, number': bitXorNumber,\n    'BigNumber, BigNumber': bigBitXor,\n    'bigint, bigint': (x, y) => x ^ y\n  }, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;IAAe;CAAS;AACxD,IAAI,eAAe,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACnE,IAAI,EACF,KAAK,EACL,MAAM,EACN,WAAW,EACX,MAAM,EACP,GAAG;IACJ,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;IACF;IACA,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;QACA;IACF;IACA,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;QACA;IACF;IACA,IAAI,uBAAuB,CAAA,GAAA,uLAAA,CAAA,6BAA0B,AAAD,EAAE;QACpD;QACA;QACA;IACF;IAEA;;;;;;;;;;;;;;;;;;;;;GAqBC,GACD,OAAO,MAAM,MAAM;QACjB,kBAAkB,kKAAA,CAAA,eAAY;QAC9B,wBAAwB,qKAAA,CAAA,SAAS;QACjC,kBAAkB,CAAC,GAAG,IAAM,IAAI;IAClC,GAAG,qBAAqB;QACtB,IAAI;QACJ,IAAI;QACJ,IAAI;IACN;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2487, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/bitwise/useMatrixForArrayScalar.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nexport var createUseMatrixForArrayScalar = /* #__PURE__ */factory('useMatrixForArrayScalar', ['typed', 'matrix'], _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  return {\n    'Array, number': typed.referTo('DenseMatrix, number', selfDn => (x, y) => selfDn(matrix(x), y).valueOf()),\n    'Array, BigNumber': typed.referTo('DenseMatrix, BigNumber', selfDB => (x, y) => selfDB(matrix(x), y).valueOf()),\n    'number, Array': typed.referTo('number, DenseMatrix', selfnD => (x, y) => selfnD(x, matrix(y)).valueOf()),\n    'BigNumber, Array': typed.referTo('BigNumber, DenseMatrix', selfBD => (x, y) => selfBD(x, matrix(y)).valueOf())\n  };\n});"],"names":[],"mappings":";;;AAAA;;AACO,IAAI,gCAAgC,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,2BAA2B;IAAC;IAAS;CAAS,EAAE,CAAA;IAChH,IAAI,EACF,KAAK,EACL,MAAM,EACP,GAAG;IACJ,OAAO;QACL,iBAAiB,MAAM,OAAO,CAAC,uBAAuB,CAAA,SAAU,CAAC,GAAG,IAAM,OAAO,OAAO,IAAI,GAAG,OAAO;QACtG,oBAAoB,MAAM,OAAO,CAAC,0BAA0B,CAAA,SAAU,CAAC,GAAG,IAAM,OAAO,OAAO,IAAI,GAAG,OAAO;QAC5G,iBAAiB,MAAM,OAAO,CAAC,uBAAuB,CAAA,SAAU,CAAC,GAAG,IAAM,OAAO,GAAG,OAAO,IAAI,OAAO;QACtG,oBAAoB,MAAM,OAAO,CAAC,0BAA0B,CAAA,SAAU,CAAC,GAAG,IAAM,OAAO,GAAG,OAAO,IAAI,OAAO;IAC9G;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2510, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/bitwise/leftShift.js"],"sourcesContent":["import { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatAlgo08xS0Sid } from '../../type/matrix/utils/matAlgo08xS0Sid.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createUseMatrixForArrayScalar } from './useMatrixForArrayScalar.js';\nimport { leftShiftNumber } from '../../plain/number/index.js';\nimport { leftShiftBigNumber } from '../../utils/bignumber/bitwise.js';\nvar name = 'leftShift';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix', 'concat'];\nexport var createLeftShift = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo08xS0Sid = createMatAlgo08xS0Sid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  var useMatrixForArrayScalar = createUseMatrixForArrayScalar({\n    typed,\n    matrix\n  });\n\n  /**\n   * Bitwise left logical shift of a value x by y number of bits, `x << y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.leftShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.leftShift(1, 2)               // returns number 4\n   *\n   *    math.leftShift([1, 2, 4], 4)       // returns Array [16, 32, 64]\n   *\n   * See also:\n   *\n   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | bigint | Array | Matrix} x Value to be shifted\n   * @param  {number | BigNumber | bigint} y Amount of shifts\n   * @return {number | BigNumber | bigint | Array | Matrix} `x` shifted left `y` times\n   */\n  return typed(name, {\n    'number, number': leftShiftNumber,\n    'BigNumber, BigNumber': leftShiftBigNumber,\n    'bigint, bigint': (x, y) => x << y,\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'number | BigNumber, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n      return matAlgo10xSids(y, x, self, true);\n    }),\n    'number | BigNumber, DenseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n      return matAlgo14xDs(y, x, self, true);\n    })\n  }, useMatrixForArrayScalar, matrixAlgorithmSuite({\n    SS: matAlgo08xS0Sid,\n    DS: matAlgo01xDSid,\n    SD: matAlgo02xDS0\n  }));\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;IAAe;IAAS;IAAe;CAAS;AAChF,IAAI,kBAAkB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACtE,IAAI,EACF,KAAK,EACL,MAAM,EACN,WAAW,EACX,KAAK,EACL,WAAW,EACX,MAAM,EACP,GAAG;IACJ,IAAI,iBAAiB,CAAA,GAAA,iLAAA,CAAA,uBAAoB,AAAD,EAAE;QACxC;IACF;IACA,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;QACA;IACF;IACA,IAAI,kBAAkB,CAAA,GAAA,kLAAA,CAAA,wBAAqB,AAAD,EAAE;QAC1C;QACA;IACF;IACA,IAAI,iBAAiB,CAAA,GAAA,iLAAA,CAAA,uBAAoB,AAAD,EAAE;QACxC;QACA;IACF;IACA,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;QACA;IACF;IACA,IAAI,eAAe,CAAA,GAAA,+KAAA,CAAA,qBAAkB,AAAD,EAAE;QACpC;IACF;IACA,IAAI,uBAAuB,CAAA,GAAA,uLAAA,CAAA,6BAA0B,AAAD,EAAE;QACpD;QACA;QACA;IACF;IACA,IAAI,0BAA0B,CAAA,GAAA,sLAAA,CAAA,gCAA6B,AAAD,EAAE;QAC1D;QACA;IACF;IAEA;;;;;;;;;;;;;;;;;;;;;;GAsBC,GACD,OAAO,MAAM,MAAM;QACjB,kBAAkB,kKAAA,CAAA,kBAAe;QACjC,wBAAwB,qKAAA,CAAA,qBAAkB;QAC1C,kBAAkB,CAAC,GAAG,IAAM,KAAK;QACjC,oCAAoC,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAC,GAAG;gBAChE,eAAe;gBACf,IAAI,YAAY,GAAG,IAAI;oBACrB,OAAO,EAAE,KAAK;gBAChB;gBACA,OAAO,cAAc,GAAG,GAAG,MAAM;YACnC;QACA,mCAAmC,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAC,GAAG;gBAC/D,eAAe;gBACf,IAAI,YAAY,GAAG,IAAI;oBACrB,OAAO,EAAE,KAAK;gBAChB;gBACA,OAAO,aAAa,GAAG,GAAG,MAAM;YAClC;QACA,oCAAoC,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAC,GAAG;gBAChE,eAAe;gBACf,IAAI,YAAY,GAAG,IAAI;oBACrB,OAAO,MAAM,EAAE,IAAI,IAAI,EAAE,OAAO;gBAClC;gBACA,OAAO,eAAe,GAAG,GAAG,MAAM;YACpC;QACA,mCAAmC,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAC,GAAG;gBAC/D,eAAe;gBACf,IAAI,YAAY,GAAG,IAAI;oBACrB,OAAO,MAAM,EAAE,IAAI,IAAI,EAAE,OAAO;gBAClC;gBACA,OAAO,aAAa,GAAG,GAAG,MAAM;YAClC;IACF,GAAG,yBAAyB,qBAAqB;QAC/C,IAAI;QACJ,IAAI;QACJ,IAAI;IACN;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2643, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/bitwise/rightArithShift.js"],"sourcesContent":["import { rightArithShiftBigNumber } from '../../utils/bignumber/bitwise.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatAlgo08xS0Sid } from '../../type/matrix/utils/matAlgo08xS0Sid.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createUseMatrixForArrayScalar } from './useMatrixForArrayScalar.js';\nimport { rightArithShiftNumber } from '../../plain/number/index.js';\nvar name = 'rightArithShift';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix', 'concat'];\nexport var createRightArithShift = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo08xS0Sid = createMatAlgo08xS0Sid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  var useMatrixForArrayScalar = createUseMatrixForArrayScalar({\n    typed,\n    matrix\n  });\n\n  /**\n   * Bitwise right arithmetic shift of a value x by y number of bits, `x >> y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.rightArithShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.rightArithShift(4, 2)               // returns number 1\n   *\n   *    math.rightArithShift([16, -32, 64], 4)   // returns Array [1, -2, 4]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitOr, bitXor, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | bigint | Array | Matrix} x Value to be shifted\n   * @param  {number | BigNumber | bigint} y Amount of shifts\n   * @return {number | BigNumber | bigint | Array | Matrix} `x` zero-filled shifted right `y` times\n   */\n  return typed(name, {\n    'number, number': rightArithShiftNumber,\n    'BigNumber, BigNumber': rightArithShiftBigNumber,\n    'bigint, bigint': (x, y) => x >> y,\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'number | BigNumber, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n      return matAlgo10xSids(y, x, self, true);\n    }),\n    'number | BigNumber, DenseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n      return matAlgo14xDs(y, x, self, true);\n    })\n  }, useMatrixForArrayScalar, matrixAlgorithmSuite({\n    SS: matAlgo08xS0Sid,\n    DS: matAlgo01xDSid,\n    SD: matAlgo02xDS0\n  }));\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;IAAe;IAAS;IAAe;CAAS;AAChF,IAAI,wBAAwB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAC5E,IAAI,EACF,KAAK,EACL,MAAM,EACN,WAAW,EACX,KAAK,EACL,WAAW,EACX,MAAM,EACP,GAAG;IACJ,IAAI,iBAAiB,CAAA,GAAA,iLAAA,CAAA,uBAAoB,AAAD,EAAE;QACxC;IACF;IACA,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;QACA;IACF;IACA,IAAI,kBAAkB,CAAA,GAAA,kLAAA,CAAA,wBAAqB,AAAD,EAAE;QAC1C;QACA;IACF;IACA,IAAI,iBAAiB,CAAA,GAAA,iLAAA,CAAA,uBAAoB,AAAD,EAAE;QACxC;QACA;IACF;IACA,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;QACA;IACF;IACA,IAAI,eAAe,CAAA,GAAA,+KAAA,CAAA,qBAAkB,AAAD,EAAE;QACpC;IACF;IACA,IAAI,uBAAuB,CAAA,GAAA,uLAAA,CAAA,6BAA0B,AAAD,EAAE;QACpD;QACA;QACA;IACF;IACA,IAAI,0BAA0B,CAAA,GAAA,sLAAA,CAAA,gCAA6B,AAAD,EAAE;QAC1D;QACA;IACF;IAEA;;;;;;;;;;;;;;;;;;;;;;GAsBC,GACD,OAAO,MAAM,MAAM;QACjB,kBAAkB,kKAAA,CAAA,wBAAqB;QACvC,wBAAwB,qKAAA,CAAA,2BAAwB;QAChD,kBAAkB,CAAC,GAAG,IAAM,KAAK;QACjC,oCAAoC,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAC,GAAG;gBAChE,eAAe;gBACf,IAAI,YAAY,GAAG,IAAI;oBACrB,OAAO,EAAE,KAAK;gBAChB;gBACA,OAAO,cAAc,GAAG,GAAG,MAAM;YACnC;QACA,mCAAmC,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAC,GAAG;gBAC/D,eAAe;gBACf,IAAI,YAAY,GAAG,IAAI;oBACrB,OAAO,EAAE,KAAK;gBAChB;gBACA,OAAO,aAAa,GAAG,GAAG,MAAM;YAClC;QACA,oCAAoC,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAC,GAAG;gBAChE,eAAe;gBACf,IAAI,YAAY,GAAG,IAAI;oBACrB,OAAO,MAAM,EAAE,IAAI,IAAI,EAAE,OAAO;gBAClC;gBACA,OAAO,eAAe,GAAG,GAAG,MAAM;YACpC;QACA,mCAAmC,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAC,GAAG;gBAC/D,eAAe;gBACf,IAAI,YAAY,GAAG,IAAI;oBACrB,OAAO,MAAM,EAAE,IAAI,IAAI,EAAE,OAAO;gBAClC;gBACA,OAAO,aAAa,GAAG,GAAG,MAAM;YAClC;IACF,GAAG,yBAAyB,qBAAqB;QAC/C,IAAI;QACJ,IAAI;QACJ,IAAI;IACN;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2776, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/bitwise/rightLogShift.js"],"sourcesContent":["import { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatAlgo08xS0Sid } from '../../type/matrix/utils/matAlgo08xS0Sid.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { rightLogShiftNumber } from '../../plain/number/index.js';\nimport { createUseMatrixForArrayScalar } from './useMatrixForArrayScalar.js';\nvar name = 'rightLogShift';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix', 'concat'];\nexport var createRightLogShift = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo08xS0Sid = createMatAlgo08xS0Sid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  var useMatrixForArrayScalar = createUseMatrixForArrayScalar({\n    typed,\n    matrix\n  });\n\n  /**\n   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.rightLogShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.rightLogShift(4, 2)               // returns number 1\n   *\n   *    math.rightLogShift([16, 32, 64], 4)    // returns Array [1, 2, 4]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift\n   *\n   * @param  {number | Array | Matrix} x Value to be shifted\n   * @param  {number} y Amount of shifts\n   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times\n   */\n\n  return typed(name, {\n    'number, number': rightLogShiftNumber,\n    // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift\n\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'number | BigNumber, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n      return matAlgo10xSids(y, x, self, true);\n    }),\n    'number | BigNumber, DenseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n      return matAlgo14xDs(y, x, self, true);\n    })\n  }, useMatrixForArrayScalar, matrixAlgorithmSuite({\n    SS: matAlgo08xS0Sid,\n    DS: matAlgo01xDSid,\n    SD: matAlgo02xDS0\n  }));\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;IAAe;IAAS;IAAe;CAAS;AAChF,IAAI,sBAAsB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAC1E,IAAI,EACF,KAAK,EACL,MAAM,EACN,WAAW,EACX,KAAK,EACL,WAAW,EACX,MAAM,EACP,GAAG;IACJ,IAAI,iBAAiB,CAAA,GAAA,iLAAA,CAAA,uBAAoB,AAAD,EAAE;QACxC;IACF;IACA,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;QACA;IACF;IACA,IAAI,kBAAkB,CAAA,GAAA,kLAAA,CAAA,wBAAqB,AAAD,EAAE;QAC1C;QACA;IACF;IACA,IAAI,iBAAiB,CAAA,GAAA,iLAAA,CAAA,uBAAoB,AAAD,EAAE;QACxC;QACA;IACF;IACA,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;QACA;IACF;IACA,IAAI,eAAe,CAAA,GAAA,+KAAA,CAAA,qBAAkB,AAAD,EAAE;QACpC;IACF;IACA,IAAI,uBAAuB,CAAA,GAAA,uLAAA,CAAA,6BAA0B,AAAD,EAAE;QACpD;QACA;QACA;IACF;IACA,IAAI,0BAA0B,CAAA,GAAA,sLAAA,CAAA,gCAA6B,AAAD,EAAE;QAC1D;QACA;IACF;IAEA;;;;;;;;;;;;;;;;;;;;;;GAsBC,GAED,OAAO,MAAM,MAAM;QACjB,kBAAkB,kKAAA,CAAA,sBAAmB;QACrC,sFAAsF;QAEtF,oCAAoC,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAC,GAAG;gBAChE,eAAe;gBACf,IAAI,YAAY,GAAG,IAAI;oBACrB,OAAO,EAAE,KAAK;gBAChB;gBACA,OAAO,cAAc,GAAG,GAAG,MAAM;YACnC;QACA,mCAAmC,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAC,GAAG;gBAC/D,eAAe;gBACf,IAAI,YAAY,GAAG,IAAI;oBACrB,OAAO,EAAE,KAAK;gBAChB;gBACA,OAAO,aAAa,GAAG,GAAG,MAAM;YAClC;QACA,oCAAoC,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAC,GAAG;gBAChE,eAAe;gBACf,IAAI,YAAY,GAAG,IAAI;oBACrB,OAAO,MAAM,EAAE,IAAI,IAAI,EAAE,OAAO;gBAClC;gBACA,OAAO,eAAe,GAAG,GAAG,MAAM;YACpC;QACA,mCAAmC,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAC,GAAG;gBAC/D,eAAe;gBACf,IAAI,YAAY,GAAG,IAAI;oBACrB,OAAO,MAAM,EAAE,IAAI,IAAI,EAAE,OAAO;gBAClC;gBACA,OAAO,aAAa,GAAG,GAAG,MAAM;YAClC;IACF,GAAG,yBAAyB,qBAAqB;QAC/C,IAAI;QACJ,IAAI;QACJ,IAAI;IACN;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2906, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/complex/arg.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nvar name = 'arg';\nvar dependencies = ['typed'];\nexport var createArg = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Compute the argument of a complex value.\n   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.arg(x)\n   *\n   * Examples:\n   *\n   *    const a = math.complex(2, 2)\n   *    math.arg(a) / math.pi          // returns number 0.25\n   *\n   *    const b = math.complex('2 + 3i')\n   *    math.arg(b)                    // returns number 0.982793723247329\n   *    math.atan2(3, 2)               // returns number 0.982793723247329\n   *\n   * See also:\n   *\n   *    re, im, conj, abs\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Array | Matrix} The argument of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      return Math.atan2(0, x);\n    },\n    BigNumber: function BigNumber(x) {\n      return x.constructor.atan2(0, x);\n    },\n    Complex: function Complex(x) {\n      return x.arg();\n    },\n    // TODO: implement BigNumber support for function arg\n\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,YAAY,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAChE,IAAI,EACF,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BC,GACD,OAAO,MAAM,MAAM;QACjB,QAAQ,SAAS,OAAO,CAAC;YACvB,OAAO,KAAK,KAAK,CAAC,GAAG;QACvB;QACA,WAAW,SAAS,UAAU,CAAC;YAC7B,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,GAAG;QAChC;QACA,SAAS,SAAS,QAAQ,CAAC;YACzB,OAAO,EAAE,GAAG;QACd;QACA,qDAAqD;QAErD,kBAAkB,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAA,IAAK,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,GAAG;IAC9D;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2965, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/complex/conj.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nvar name = 'conj';\nvar dependencies = ['typed'];\nexport var createConj = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Compute the complex conjugate of a complex value.\n   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.conj(x)\n   *\n   * Examples:\n   *\n   *    math.conj(math.complex('2 + 3i'))  // returns Complex 2 - 3i\n   *    math.conj(math.complex('2 - 3i'))  // returns Complex 2 + 3i\n   *    math.conj(math.complex('-5.2i'))  // returns Complex 5.2i\n   *\n   * See also:\n   *\n   *    re, im, arg, abs\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            The complex conjugate of x\n   */\n  return typed(name, {\n    'number | BigNumber | Fraction': x => x,\n    Complex: x => x.conjugate(),\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,aAAa,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACjE,IAAI,EACF,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;GAwBC,GACD,OAAO,MAAM,MAAM;QACjB,iCAAiC,CAAA,IAAK;QACtC,SAAS,CAAA,IAAK,EAAE,SAAS;QACzB,kBAAkB,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAA,IAAK,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,GAAG;IAC9D;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3014, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/complex/im.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nvar name = 'im';\nvar dependencies = ['typed'];\nexport var createIm = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Get the imaginary part of a complex number.\n   * For a complex number `a + bi`, the function returns `b`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.im(x)\n   *\n   * Examples:\n   *\n   *    const a = math.complex(2, 3)\n   *    math.re(a)                     // returns number 2\n   *    math.im(a)                     // returns number 3\n   *\n   *    math.re(math.complex('-5.2i')) // returns number -5.2\n   *    math.re(math.complex(2.4))     // returns number 0\n   *\n   * See also:\n   *\n   *    re, conj, abs, arg\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Array | Matrix} The imaginary part of x\n   */\n  return typed(name, {\n    number: () => 0,\n    'BigNumber | Fraction': x => x.mul(0),\n    Complex: x => x.im,\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,WAAW,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAC/D,IAAI,EACF,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BC,GACD,OAAO,MAAM,MAAM;QACjB,QAAQ,IAAM;QACd,wBAAwB,CAAA,IAAK,EAAE,GAAG,CAAC;QACnC,SAAS,CAAA,IAAK,EAAE,EAAE;QAClB,kBAAkB,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAA,IAAK,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,GAAG;IAC9D;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3066, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/complex/re.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nvar name = 're';\nvar dependencies = ['typed'];\nexport var createRe = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Get the real part of a complex number.\n   * For a complex number `a + bi`, the function returns `a`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.re(x)\n   *\n   * Examples:\n   *\n   *    const a = math.complex(2, 3)\n   *    math.re(a)                     // returns number 2\n   *    math.im(a)                     // returns number 3\n   *\n   *    math.re(math.complex('-5.2i')) // returns number 0\n   *    math.re(math.complex(2.4))     // returns number 2.4\n   *\n   * See also:\n   *\n   *    im, conj, abs, arg\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Array | Matrix} The real part of x\n   */\n  return typed(name, {\n    'number | BigNumber | Fraction': x => x,\n    Complex: x => x.re,\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,WAAW,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAC/D,IAAI,EACF,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BC,GACD,OAAO,MAAM,MAAM;QACjB,iCAAiC,CAAA,IAAK;QACtC,SAAS,CAAA,IAAK,EAAE,EAAE;QAClB,kBAAkB,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAA,IAAK,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,GAAG;IAC9D;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3117, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/logical/not.js"],"sourcesContent":["import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { notNumber } from '../../plain/number/index.js';\nvar name = 'not';\nvar dependencies = ['typed'];\nexport var createNot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Logical `not`. Flips boolean value of a given parameter.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.not(x)\n   *\n   * Examples:\n   *\n   *    math.not(2)      // returns false\n   *    math.not(0)      // returns true\n   *    math.not(true)   // returns false\n   *\n   *    a = [2, -7, 0]\n   *    math.not(a)      // returns [false, false, true]\n   *\n   * See also:\n   *\n   *    and, or, xor\n   *\n   * @param  {number | BigNumber | bigint | Complex | Unit | Array | Matrix} x First value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when input is a zero or empty value.\n   */\n  return typed(name, {\n    'null | undefined': () => true,\n    number: notNumber,\n    Complex: function Complex(x) {\n      return x.re === 0 && x.im === 0;\n    },\n    BigNumber: function BigNumber(x) {\n      return x.isZero() || x.isNaN();\n    },\n    bigint: x => !x,\n    Unit: typed.referToSelf(self => x => typed.find(self, x.valueType())(x.value)),\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,YAAY,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAChE,IAAI,EACF,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;GAwBC,GACD,OAAO,MAAM,MAAM;QACjB,oBAAoB,IAAM;QAC1B,QAAQ,kKAAA,CAAA,YAAS;QACjB,SAAS,SAAS,QAAQ,CAAC;YACzB,OAAO,EAAE,EAAE,KAAK,KAAK,EAAE,EAAE,KAAK;QAChC;QACA,WAAW,SAAS,UAAU,CAAC;YAC7B,OAAO,EAAE,MAAM,MAAM,EAAE,KAAK;QAC9B;QACA,QAAQ,CAAA,IAAK,CAAC;QACd,MAAM,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAA,IAAK,MAAM,IAAI,CAAC,MAAM,EAAE,SAAS,IAAI,EAAE,KAAK;QAC5E,kBAAkB,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAA,IAAK,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,GAAG;IAC9D;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3176, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/logical/or.js"],"sourcesContent":["import { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { orNumber } from '../../plain/number/index.js';\nvar name = 'or';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix', 'concat'];\nexport var createOr = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\n   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.or(x, y)\n   *\n   * Examples:\n   *\n   *    math.or(2, 4)   // returns true\n   *\n   *    a = [2, 5, 0]\n   *    b = [0, 22, 0]\n   *    c = 0\n   *\n   *    math.or(a, b)   // returns [true, true, false]\n   *    math.or(b, c)   // returns [false, true, false]\n   *\n   * See also:\n   *\n   *    and, not, xor\n   *\n   * @param  {number | BigNumber | bigint | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | bigint | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.\n   */\n  return typed(name, {\n    'number, number': orNumber,\n    'Complex, Complex': function Complex_Complex(x, y) {\n      return x.re !== 0 || x.im !== 0 || y.re !== 0 || y.im !== 0;\n    },\n    'BigNumber, BigNumber': function BigNumber_BigNumber(x, y) {\n      return !x.isZero() && !x.isNaN() || !y.isZero() && !y.isNaN();\n    },\n    'bigint, bigint': orNumber,\n    'Unit, Unit': typed.referToSelf(self => (x, y) => self(x.value || 0, y.value || 0))\n  }, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;IAAe;IAAe;CAAS;AACvE,IAAI,WAAW,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAC/D,IAAI,EACF,KAAK,EACL,MAAM,EACN,WAAW,EACX,WAAW,EACX,MAAM,EACP,GAAG;IACJ,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;IACF;IACA,IAAI,iBAAiB,CAAA,GAAA,iLAAA,CAAA,uBAAoB,AAAD,EAAE;QACxC;QACA;IACF;IACA,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;QACA;IACF;IACA,IAAI,uBAAuB,CAAA,GAAA,uLAAA,CAAA,6BAA0B,AAAD,EAAE;QACpD;QACA;QACA;IACF;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BC,GACD,OAAO,MAAM,MAAM;QACjB,kBAAkB,kKAAA,CAAA,WAAQ;QAC1B,oBAAoB,SAAS,gBAAgB,CAAC,EAAE,CAAC;YAC/C,OAAO,EAAE,EAAE,KAAK,KAAK,EAAE,EAAE,KAAK,KAAK,EAAE,EAAE,KAAK,KAAK,EAAE,EAAE,KAAK;QAC5D;QACA,wBAAwB,SAAS,oBAAoB,CAAC,EAAE,CAAC;YACvD,OAAO,CAAC,EAAE,MAAM,MAAM,CAAC,EAAE,KAAK,MAAM,CAAC,EAAE,MAAM,MAAM,CAAC,EAAE,KAAK;QAC7D;QACA,kBAAkB,kKAAA,CAAA,WAAQ;QAC1B,cAAc,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAC,GAAG,IAAM,KAAK,EAAE,KAAK,IAAI,GAAG,EAAE,KAAK,IAAI;IAClF,GAAG,qBAAqB;QACtB,IAAI;QACJ,IAAI;QACJ,IAAI;IACN;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3266, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/logical/xor.js"],"sourcesContent":["import { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { xorNumber } from '../../plain/number/index.js';\nvar name = 'xor';\nvar dependencies = ['typed', 'matrix', 'DenseMatrix', 'concat'];\nexport var createXor = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\n   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.xor(x, y)\n   *\n   * Examples:\n   *\n   *    math.xor(2, 4)   // returns false\n   *\n   *    a = [2, 0, 0]\n   *    b = [2, 7, 0]\n   *    c = 0\n   *\n   *    math.xor(a, b)   // returns [false, true, false]\n   *    math.xor(a, c)   // returns [true, false, false]\n   *\n   * See also:\n   *\n   *    and, not, or\n   *\n   * @param  {number | BigNumber | bigint | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | bigint | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when one and only one input is defined with a nonzero/nonempty value.\n   */\n  return typed(name, {\n    'number, number': xorNumber,\n    'Complex, Complex': function Complex_Complex(x, y) {\n      return (x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0);\n    },\n    'bigint, bigint': xorNumber,\n    'BigNumber, BigNumber': function BigNumber_BigNumber(x, y) {\n      return (!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN());\n    },\n    'Unit, Unit': typed.referToSelf(self => (x, y) => self(x.value || 0, y.value || 0))\n  }, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;IAAe;CAAS;AACxD,IAAI,YAAY,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAChE,IAAI,EACF,KAAK,EACL,MAAM,EACN,WAAW,EACX,MAAM,EACP,GAAG;IACJ,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;IACF;IACA,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;QACA;IACF;IACA,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;QACA;IACF;IACA,IAAI,uBAAuB,CAAA,GAAA,uLAAA,CAAA,6BAA0B,AAAD,EAAE;QACpD;QACA;QACA;IACF;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BC,GACD,OAAO,MAAM,MAAM;QACjB,kBAAkB,kKAAA,CAAA,YAAS;QAC3B,oBAAoB,SAAS,gBAAgB,CAAC,EAAE,CAAC;YAC/C,OAAO,CAAC,EAAE,EAAE,KAAK,KAAK,EAAE,EAAE,KAAK,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,KAAK,EAAE,EAAE,KAAK,CAAC;QACjE;QACA,kBAAkB,kKAAA,CAAA,YAAS;QAC3B,wBAAwB,SAAS,oBAAoB,CAAC,EAAE,CAAC;YACvD,OAAO,CAAC,CAAC,EAAE,MAAM,MAAM,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC,EAAE,MAAM,MAAM,CAAC,EAAE,KAAK,EAAE;QACnE;QACA,cAAc,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAC,GAAG,IAAM,KAAK,EAAE,KAAK,IAAI,GAAG,EAAE,KAAK,IAAI;IAClF,GAAG,qBAAqB;QACtB,IAAI;QACJ,IAAI;QACJ,IAAI;IACN;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3355, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/logical/and.js"],"sourcesContent":["import { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { createMatAlgo06xS0S0 } from '../../type/matrix/utils/matAlgo06xS0S0.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { andNumber } from '../../plain/number/index.js';\nvar name = 'and';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'not', 'concat'];\nexport var createAnd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    not,\n    concat\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo06xS0S0 = createMatAlgo06xS0S0({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\n   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.and(x, y)\n   *\n   * Examples:\n   *\n   *    math.and(2, 4)   // returns true\n   *\n   *    a = [2, 0, 0]\n   *    b = [3, 7, 0]\n   *    c = 0\n   *\n   *    math.and(a, b)   // returns [true, false, false]\n   *    math.and(a, c)   // returns [false, false, false]\n   *\n   * See also:\n   *\n   *    not, or, xor\n   *\n   * @param  {number | BigNumber | bigint | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | bigint | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when both inputs are defined with a nonzero/nonempty value.\n   */\n  return typed(name, {\n    'number, number': andNumber,\n    'Complex, Complex': function Complex_Complex(x, y) {\n      return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);\n    },\n    'BigNumber, BigNumber': function BigNumber_BigNumber(x, y) {\n      return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();\n    },\n    'bigint, bigint': andNumber,\n    'Unit, Unit': typed.referToSelf(self => (x, y) => self(x.value || 0, y.value || 0)),\n    'SparseMatrix, any': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(y)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, any': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(y)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'any, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(x)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n      return matAlgo11xS0s(y, x, self, true);\n    }),\n    'any, DenseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(x)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n      return matAlgo14xDs(y, x, self, true);\n    }),\n    'Array, any': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return self(matrix(x), y).valueOf();\n    }),\n    'any, Array': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return self(x, matrix(y)).valueOf();\n    })\n  }, matrixAlgorithmSuite({\n    SS: matAlgo06xS0S0,\n    DS: matAlgo02xDS0\n  }));\n});"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3491, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/numeric/solveODE.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { isUnit, isNumber, isBigNumber } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'solveODE';\nvar dependencies = ['typed', 'add', 'subtract', 'multiply', 'divide', 'max', 'map', 'abs', 'isPositive', 'isNegative', 'larger', 'smaller', 'matrix', 'bignumber', 'unaryMinus'];\nexport var createSolveODE = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    subtract,\n    multiply,\n    divide,\n    max,\n    map,\n    abs,\n    isPositive,\n    isNegative,\n    larger,\n    smaller,\n    matrix,\n    bignumber,\n    unaryMinus\n  } = _ref;\n  /**\n     * Numerical Integration of Ordinary Differential Equations\n     *\n     * Two variable step methods are provided:\n     * - \"RK23\": Bogacki–Shampine method\n     * - \"RK45\": Dormand-Prince method RK5(4)7M (default)\n     *\n     * The arguments are expected as follows.\n     *\n     * - `func` should be the forcing function `f(t, y)`\n     * - `tspan` should be a vector of two numbers or units `[tStart, tEnd]`\n     * - `y0` the initial state values, should be a scalar or a flat array\n     * - `options` should be an object with the following information:\n     *   - `method` ('RK45'): ['RK23', 'RK45']\n     *   - `tol` (1e-3): Numeric tolerance of the method, the solver keeps the error estimates less than this value\n     *   - `firstStep`: Initial step size\n     *   - `minStep`: minimum step size of the method\n     *   - `maxStep`: maximum step size of the method\n     *   - `minDelta` (0.2): minimum ratio of change for the step\n     *   - `maxDelta` (5): maximum ratio of change for the step\n     *   - `maxIter` (1e4): maximum number of iterations\n     *\n     * The returned value is an object with `{t, y}` please note that even though `t` means time, it can represent any other independant variable like `x`:\n     * - `t` an array of size `[n]`\n     * - `y` the states array can be in two ways\n     *   - **if `y0` is a scalar:** returns an array-like of size `[n]`\n     *   - **if `y0` is a flat array-like of size [m]:** returns an array like of size `[n, m]`\n     *\n     * Syntax:\n     *\n     *     math.solveODE(func, tspan, y0)\n     *     math.solveODE(func, tspan, y0, options)\n     *\n     * Examples:\n     *\n     *     function func(t, y) {return y}\n     *     const tspan = [0, 4]\n     *     const y0 = 1\n     *     math.solveODE(func, tspan, y0)\n     *     math.solveODE(func, tspan, [1, 2])\n     *     math.solveODE(func, tspan, y0, { method:\"RK23\", maxStep:0.1 })\n     *\n     * See also:\n     *\n     *     derivative, simplifyCore\n     *\n     * @param {function} func The forcing function f(t,y)\n     * @param {Array | Matrix} tspan The time span\n     * @param {number | BigNumber | Unit | Array | Matrix} y0 The initial value\n     * @param {Object} [options] Optional configuration options\n     * @return {Object} Return an object with t and y values as arrays\n     */\n\n  function _rk(butcherTableau) {\n    // generates an adaptive runge kutta method from it's butcher tableau\n\n    return function (f, tspan, y0, options) {\n      // adaptive runge kutta methods\n      var wrongTSpan = !(tspan.length === 2 && (tspan.every(isNumOrBig) || tspan.every(isUnit)));\n      if (wrongTSpan) {\n        throw new Error('\"tspan\" must be an Array of two numeric values or two units [tStart, tEnd]');\n      }\n      var t0 = tspan[0]; // initial time\n      var tf = tspan[1]; // final time\n      var isForwards = larger(tf, t0);\n      var firstStep = options.firstStep;\n      if (firstStep !== undefined && !isPositive(firstStep)) {\n        throw new Error('\"firstStep\" must be positive');\n      }\n      var maxStep = options.maxStep;\n      if (maxStep !== undefined && !isPositive(maxStep)) {\n        throw new Error('\"maxStep\" must be positive');\n      }\n      var minStep = options.minStep;\n      if (minStep && isNegative(minStep)) {\n        throw new Error('\"minStep\" must be positive or zero');\n      }\n      var timeVars = [t0, tf, firstStep, minStep, maxStep].filter(x => x !== undefined);\n      if (!(timeVars.every(isNumOrBig) || timeVars.every(isUnit))) {\n        throw new Error('Inconsistent type of \"t\" dependant variables');\n      }\n      var steps = 1; // divide time in this number of steps\n      var tol = options.tol ? options.tol : 1e-4; // define a tolerance (must be an option)\n      var minDelta = options.minDelta ? options.minDelta : 0.2;\n      var maxDelta = options.maxDelta ? options.maxDelta : 5;\n      var maxIter = options.maxIter ? options.maxIter : 10000; // stop inifite evaluation if something goes wrong\n      var hasBigNumbers = [t0, tf, ...y0, maxStep, minStep].some(isBigNumber);\n      var [a, c, b, bp] = hasBigNumbers ? [bignumber(butcherTableau.a), bignumber(butcherTableau.c), bignumber(butcherTableau.b), bignumber(butcherTableau.bp)] : [butcherTableau.a, butcherTableau.c, butcherTableau.b, butcherTableau.bp];\n      var h = firstStep ? isForwards ? firstStep : unaryMinus(firstStep) : divide(subtract(tf, t0), steps); // define the first step size\n      var t = [t0]; // start the time array\n      var y = [y0]; // start the solution array\n\n      var deltaB = subtract(b, bp); // b - bp\n\n      var n = 0;\n      var iter = 0;\n      var ongoing = _createOngoing(isForwards);\n      var trimStep = _createTrimStep(isForwards);\n      // iterate unitil it reaches either the final time or maximum iterations\n      while (ongoing(t[n], tf)) {\n        var k = [];\n\n        // trim the time step so that it doesn't overshoot\n        h = trimStep(t[n], tf, h);\n\n        // calculate the first value of k\n        k.push(f(t[n], y[n]));\n\n        // calculate the rest of the values of k\n        for (var i = 1; i < c.length; ++i) {\n          k.push(f(add(t[n], multiply(c[i], h)), add(y[n], multiply(h, a[i], k))));\n        }\n\n        // estimate the error by comparing solutions of different orders\n        var TE = max(abs(map(multiply(deltaB, k), X => isUnit(X) ? X.value : X)));\n        if (TE < tol && tol / TE > 1 / 4) {\n          // push solution if within tol\n          t.push(add(t[n], h));\n          y.push(add(y[n], multiply(h, b, k)));\n          n++;\n        }\n\n        // estimate the delta value that will affect the step size\n        var delta = 0.84 * (tol / TE) ** (1 / 5);\n        if (smaller(delta, minDelta)) {\n          delta = minDelta;\n        } else if (larger(delta, maxDelta)) {\n          delta = maxDelta;\n        }\n        delta = hasBigNumbers ? bignumber(delta) : delta;\n        h = multiply(h, delta);\n        if (maxStep && larger(abs(h), maxStep)) {\n          h = isForwards ? maxStep : unaryMinus(maxStep);\n        } else if (minStep && smaller(abs(h), minStep)) {\n          h = isForwards ? minStep : unaryMinus(minStep);\n        }\n        iter++;\n        if (iter > maxIter) {\n          throw new Error('Maximum number of iterations reached, try changing options');\n        }\n      }\n      return {\n        t,\n        y\n      };\n    };\n  }\n  function _rk23(f, tspan, y0, options) {\n    // Bogacki–Shampine method\n\n    // Define the butcher table\n    var a = [[], [1 / 2], [0, 3 / 4], [2 / 9, 1 / 3, 4 / 9]];\n    var c = [null, 1 / 2, 3 / 4, 1];\n    var b = [2 / 9, 1 / 3, 4 / 9, 0];\n    var bp = [7 / 24, 1 / 4, 1 / 3, 1 / 8];\n    var butcherTableau = {\n      a,\n      c,\n      b,\n      bp\n    };\n\n    // Solve an adaptive step size rk method\n    return _rk(butcherTableau)(f, tspan, y0, options);\n  }\n  function _rk45(f, tspan, y0, options) {\n    // Dormand Prince method\n\n    // Define the butcher tableau\n    var a = [[], [1 / 5], [3 / 40, 9 / 40], [44 / 45, -56 / 15, 32 / 9], [19372 / 6561, -25360 / 2187, 64448 / 6561, -212 / 729], [9017 / 3168, -355 / 33, 46732 / 5247, 49 / 176, -5103 / 18656], [35 / 384, 0, 500 / 1113, 125 / 192, -2187 / 6784, 11 / 84]];\n    var c = [null, 1 / 5, 3 / 10, 4 / 5, 8 / 9, 1, 1];\n    var b = [35 / 384, 0, 500 / 1113, 125 / 192, -2187 / 6784, 11 / 84, 0];\n    var bp = [5179 / 57600, 0, 7571 / 16695, 393 / 640, -92097 / 339200, 187 / 2100, 1 / 40];\n    var butcherTableau = {\n      a,\n      c,\n      b,\n      bp\n    };\n\n    // Solve an adaptive step size rk method\n    return _rk(butcherTableau)(f, tspan, y0, options);\n  }\n  function _solveODE(f, tspan, y0, opt) {\n    var method = opt.method ? opt.method : 'RK45';\n    var methods = {\n      RK23: _rk23,\n      RK45: _rk45\n    };\n    if (method.toUpperCase() in methods) {\n      var methodOptions = _objectSpread({}, opt); // clone the options object\n      delete methodOptions.method; // delete the method as it won't be needed\n      return methods[method.toUpperCase()](f, tspan, y0, methodOptions);\n    } else {\n      // throw an error indicating there is no such method\n      var methodsWithQuotes = Object.keys(methods).map(x => \"\\\"\".concat(x, \"\\\"\"));\n      // generates a string of methods like: \"BDF\", \"RK23\" and \"RK45\"\n      var availableMethodsString = \"\".concat(methodsWithQuotes.slice(0, -1).join(', '), \" and \").concat(methodsWithQuotes.slice(-1));\n      throw new Error(\"Unavailable method \\\"\".concat(method, \"\\\". Available methods are \").concat(availableMethodsString));\n    }\n  }\n  function _createOngoing(isForwards) {\n    // returns the correct function to test if it's still iterating\n    return isForwards ? smaller : larger;\n  }\n  function _createTrimStep(isForwards) {\n    var outOfBounds = isForwards ? larger : smaller;\n    return function (t, tf, h) {\n      var next = add(t, h);\n      return outOfBounds(next, tf) ? subtract(tf, t) : h;\n    };\n  }\n  function isNumOrBig(x) {\n    // checks if it's a number or bignumber\n    return isBigNumber(x) || isNumber(x);\n  }\n  function _matrixSolveODE(f, T, y0, options) {\n    // receives matrices and returns matrices\n    var sol = _solveODE(f, T.toArray(), y0.toArray(), options);\n    return {\n      t: matrix(sol.t),\n      y: matrix(sol.y)\n    };\n  }\n  return typed('solveODE', {\n    'function, Array, Array, Object': _solveODE,\n    'function, Matrix, Matrix, Object': _matrixSolveODE,\n    'function, Array, Array': (f, T, y0) => _solveODE(f, T, y0, {}),\n    'function, Matrix, Matrix': (f, T, y0) => _matrixSolveODE(f, T, y0, {}),\n    'function, Array, number | BigNumber | Unit': (f, T, y0) => {\n      var sol = _solveODE(f, T, [y0], {});\n      return {\n        t: sol.t,\n        y: sol.y.map(Y => Y[0])\n      };\n    },\n    'function, Matrix, number | BigNumber | Unit': (f, T, y0) => {\n      var sol = _solveODE(f, T.toArray(), [y0], {});\n      return {\n        t: matrix(sol.t),\n        y: matrix(sol.y.map(Y => Y[0]))\n      };\n    },\n    'function, Array, number | BigNumber | Unit, Object': (f, T, y0, options) => {\n      var sol = _solveODE(f, T, [y0], options);\n      return {\n        t: sol.t,\n        y: sol.y.map(Y => Y[0])\n      };\n    },\n    'function, Matrix, number | BigNumber | Unit, Object': (f, T, y0, options) => {\n      var sol = _solveODE(f, T.toArray(), [y0], options);\n      return {\n        t: matrix(sol.t),\n        y: matrix(sol.y.map(Y => Y[0]))\n      };\n    }\n  });\n});"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3914, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/special/erf.js"],"sourcesContent":["/* eslint-disable no-loss-of-precision */\n\nimport { deepMap } from '../../utils/collection.js';\nimport { sign } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'erf';\nvar dependencies = ['typed'];\nexport var createErf = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Compute the erf function of a value using a rational Chebyshev\n   * approximations for different intervals of x.\n   *\n   * This is a translation of W. J. Cody's Fortran implementation from 1987\n   * ( https://www.netlib.org/specfun/erf ). See the AMS publication\n   * \"Rational Chebyshev Approximations for the Error Function\" by W. J. Cody\n   * for an explanation of this process.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.erf(x)\n   *\n   * Examples:\n   *\n   *    math.erf(0.2)    // returns 0.22270258921047847\n   *    math.erf(-0.5)   // returns -0.5204998778130465\n   *    math.erf(4)      // returns 0.9999999845827421\n   *\n   * See also:\n   *    zeta\n   *\n   * @param {number | Array | Matrix} x   A real number\n   * @return {number | Array | Matrix}    The erf of `x`\n   */\n  return typed('name', {\n    number: function number(x) {\n      var y = Math.abs(x);\n      if (y >= MAX_NUM) {\n        return sign(x);\n      }\n      if (y <= THRESH) {\n        return sign(x) * erf1(y);\n      }\n      if (y <= 4.0) {\n        return sign(x) * (1 - erfc2(y));\n      }\n      return sign(x) * (1 - erfc3(y));\n    },\n    'Array | Matrix': typed.referToSelf(self => n => deepMap(n, self))\n\n    // TODO: For complex numbers, use the approximation for the Faddeeva function\n    //  from \"More Efficient Computation of the Complex Error Function\" (AMS)\n  });\n\n  /**\n   * Approximates the error function erf() for x <= 0.46875 using this function:\n   *               n\n   * erf(x) = x * sum (p_j * x^(2j)) / (q_j * x^(2j))\n   *              j=0\n   */\n  function erf1(y) {\n    var ysq = y * y;\n    var xnum = P[0][4] * ysq;\n    var xden = ysq;\n    var i;\n    for (i = 0; i < 3; i += 1) {\n      xnum = (xnum + P[0][i]) * ysq;\n      xden = (xden + Q[0][i]) * ysq;\n    }\n    return y * (xnum + P[0][3]) / (xden + Q[0][3]);\n  }\n\n  /**\n   * Approximates the complement of the error function erfc() for\n   * 0.46875 <= x <= 4.0 using this function:\n   *                       n\n   * erfc(x) = e^(-x^2) * sum (p_j * x^j) / (q_j * x^j)\n   *                      j=0\n   */\n  function erfc2(y) {\n    var xnum = P[1][8] * y;\n    var xden = y;\n    var i;\n    for (i = 0; i < 7; i += 1) {\n      xnum = (xnum + P[1][i]) * y;\n      xden = (xden + Q[1][i]) * y;\n    }\n    var result = (xnum + P[1][7]) / (xden + Q[1][7]);\n    var ysq = parseInt(y * 16) / 16;\n    var del = (y - ysq) * (y + ysq);\n    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;\n  }\n\n  /**\n   * Approximates the complement of the error function erfc() for x > 4.0 using\n   * this function:\n   *\n   * erfc(x) = (e^(-x^2) / x) * [ 1/sqrt(pi) +\n   *               n\n   *    1/(x^2) * sum (p_j * x^(-2j)) / (q_j * x^(-2j)) ]\n   *              j=0\n   */\n  function erfc3(y) {\n    var ysq = 1 / (y * y);\n    var xnum = P[2][5] * ysq;\n    var xden = ysq;\n    var i;\n    for (i = 0; i < 4; i += 1) {\n      xnum = (xnum + P[2][i]) * ysq;\n      xden = (xden + Q[2][i]) * ysq;\n    }\n    var result = ysq * (xnum + P[2][4]) / (xden + Q[2][4]);\n    result = (SQRPI - result) / y;\n    ysq = parseInt(y * 16) / 16;\n    var del = (y - ysq) * (y + ysq);\n    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;\n  }\n});\n\n/**\n * Upper bound for the first approximation interval, 0 <= x <= THRESH\n * @constant\n */\nvar THRESH = 0.46875;\n\n/**\n * Constant used by W. J. Cody's Fortran77 implementation to denote sqrt(pi)\n * @constant\n */\nvar SQRPI = 5.6418958354775628695e-1;\n\n/**\n * Coefficients for each term of the numerator sum (p_j) for each approximation\n * interval (see W. J. Cody's paper for more details)\n * @constant\n */\nvar P = [[3.16112374387056560e00, 1.13864154151050156e02, 3.77485237685302021e02, 3.20937758913846947e03, 1.85777706184603153e-1], [5.64188496988670089e-1, 8.88314979438837594e00, 6.61191906371416295e01, 2.98635138197400131e02, 8.81952221241769090e02, 1.71204761263407058e03, 2.05107837782607147e03, 1.23033935479799725e03, 2.15311535474403846e-8], [3.05326634961232344e-1, 3.60344899949804439e-1, 1.25781726111229246e-1, 1.60837851487422766e-2, 6.58749161529837803e-4, 1.63153871373020978e-2]];\n\n/**\n * Coefficients for each term of the denominator sum (q_j) for each approximation\n * interval (see W. J. Cody's paper for more details)\n * @constant\n */\nvar Q = [[2.36012909523441209e01, 2.44024637934444173e02, 1.28261652607737228e03, 2.84423683343917062e03], [1.57449261107098347e01, 1.17693950891312499e02, 5.37181101862009858e02, 1.62138957456669019e03, 3.29079923573345963e03, 4.36261909014324716e03, 3.43936767414372164e03, 1.23033935480374942e03], [2.56852019228982242e00, 1.87295284992346047e00, 5.27905102951428412e-1, 6.05183413124413191e-2, 2.33520497626869185e-3]];\n\n/**\n * Maximum/minimum safe numbers to input to erf() (in ES6+, this number is\n * Number.[MAX|MIN]_SAFE_INTEGER). erf() for all numbers beyond this limit will\n * return 1\n */\nvar MAX_NUM = Math.pow(2, 53);"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4111, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/special/zeta.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'zeta';\nvar dependencies = ['typed', 'config', 'multiply', 'pow', 'divide', 'factorial', 'equal', 'smallerEq', 'isNegative', 'gamma', 'sin', 'subtract', 'add', '?Complex', '?BigNumber', 'pi'];\nexport var createZeta = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    multiply,\n    pow,\n    divide,\n    factorial,\n    equal,\n    smallerEq,\n    isNegative,\n    gamma,\n    sin,\n    subtract,\n    add,\n    Complex,\n    BigNumber: _BigNumber,\n    pi\n  } = _ref;\n  /**\n   * Compute the Riemann Zeta function of a value using an infinite series for\n   * all of the complex plane using Riemann's Functional equation.\n   *\n   * Based off the paper by Xavier Gourdon and Pascal Sebah\n   * ( http://numbers.computation.free.fr/Constants/Miscellaneous/zetaevaluations.pdf )\n   *\n   * Implementation and slight modification by Anik Patel\n   *\n   * Note: the implementation is accurate up to about 6 digits.\n   *\n   * Syntax:\n   *\n   *    math.zeta(n)\n   *\n   * Examples:\n   *\n   *    math.zeta(5)       // returns 1.0369277551433895\n   *    math.zeta(-0.5)    // returns -0.2078862249773449\n   *    math.zeta(math.i)  // returns 0.0033002236853253153 - 0.4181554491413212i\n   *\n   * See also:\n   *    erf\n   *\n   * @param {number | Complex | BigNumber} s   A Real, Complex or BigNumber parameter to the Riemann Zeta Function\n   * @return {number | Complex | BigNumber}    The Riemann Zeta of `s`\n   */\n  return typed(name, {\n    number: s => zetaNumeric(s, value => value, () => 20),\n    BigNumber: s => zetaNumeric(s, value => new _BigNumber(value), () => {\n      // relTol is for example 1e-12. Extract the positive exponent 12 from that\n      return Math.abs(Math.log10(config.relTol));\n    }),\n    Complex: zetaComplex\n  });\n\n  /**\n   * @param {number | BigNumber} s\n   * @param {(value: number) => number | BigNumber} createValue\n   * @param {(value: number | BigNumber | Complex) => number} determineDigits\n   * @returns {number | BigNumber}\n   */\n  function zetaNumeric(s, createValue, determineDigits) {\n    if (equal(s, 0)) {\n      return createValue(-0.5);\n    }\n    if (equal(s, 1)) {\n      return createValue(NaN);\n    }\n    if (!isFinite(s)) {\n      return isNegative(s) ? createValue(NaN) : createValue(1);\n    }\n    return zeta(s, createValue, determineDigits, s => s);\n  }\n\n  /**\n   * @param {Complex} s\n   * @returns {Complex}\n   */\n  function zetaComplex(s) {\n    if (s.re === 0 && s.im === 0) {\n      return new Complex(-0.5);\n    }\n    if (s.re === 1) {\n      return new Complex(NaN, NaN);\n    }\n    if (s.re === Infinity && s.im === 0) {\n      return new Complex(1);\n    }\n    if (s.im === Infinity || s.re === -Infinity) {\n      return new Complex(NaN, NaN);\n    }\n    return zeta(s, value => value, s => Math.round(1.3 * 15 + 0.9 * Math.abs(s.im)), s => s.re);\n  }\n\n  /**\n   * @param {number | BigNumber | Complex} s\n   * @param {(value: number) => number | BigNumber | Complex} createValue\n   * @param {(value: number | BigNumber | Complex) => number} determineDigits\n   * @param {(value: number | BigNumber | Complex) => number} getRe\n   * @returns {*|number}\n   */\n  function zeta(s, createValue, determineDigits, getRe) {\n    var n = determineDigits(s);\n    if (getRe(s) > -(n - 1) / 2) {\n      return f(s, createValue(n), createValue);\n    } else {\n      // Function Equation for reflection to x < 1\n      var c = multiply(pow(2, s), pow(createValue(pi), subtract(s, 1)));\n      c = multiply(c, sin(multiply(divide(createValue(pi), 2), s)));\n      c = multiply(c, gamma(subtract(1, s)));\n      return multiply(c, zeta(subtract(1, s), createValue, determineDigits, getRe));\n    }\n  }\n\n  /**\n   * Calculate a portion of the sum\n   * @param {number | BigNumber} k   a positive integer\n   * @param {number | BigNumber} n   a positive integer\n   * @return {number}    the portion of the sum\n   **/\n  function d(k, n) {\n    var S = k;\n    for (var j = k; smallerEq(j, n); j = add(j, 1)) {\n      var factor = divide(multiply(factorial(add(n, subtract(j, 1))), pow(4, j)), multiply(factorial(subtract(n, j)), factorial(multiply(2, j))));\n      S = add(S, factor);\n    }\n    return multiply(n, S);\n  }\n\n  /**\n   * Calculate the positive Riemann Zeta function\n   * @param {number} s   a real or complex number with s.re > 1\n   * @param {number} n   a positive integer\n   * @param {(number) => number | BigNumber | Complex} createValue\n   * @return {number}    Riemann Zeta of s\n   **/\n  function f(s, n, createValue) {\n    var c = divide(1, multiply(d(createValue(0), n), subtract(1, pow(2, subtract(1, s)))));\n    var S = createValue(0);\n    for (var k = createValue(1); smallerEq(k, n); k = add(k, 1)) {\n      S = add(S, divide(multiply((-1) ** (k - 1), d(k, n)), pow(k, s)));\n    }\n    return multiply(c, S);\n  }\n});"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4259, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/statistics/mode.js"],"sourcesContent":["import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'mode';\nvar dependencies = ['typed', 'isNaN', 'isNumeric'];\nexport var createMode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    isNaN,\n    isNumeric\n  } = _ref;\n  /**\n  * Computes the mode of a set of numbers or a list with values(numbers or characters).\n  * If there are multiple modes, it returns a list of those values.\n  *\n  * Syntax:\n  *\n  *     math.mode(a, b, c, ...)\n  *     math.mode(A)\n  *\n  * Examples:\n  *\n  *     math.mode(2, 1, 4, 3, 1)                            // returns [1]\n  *     math.mode([1, 2.7, 3.2, 4, 2.7])                    // returns [2.7]\n  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]\n  *     math.mode('a','a','b','c')                           // returns [\"a\"]\n  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, \"abc\"]\n  *\n  * See also:\n  *\n  *     median,\n  *     mean\n  *\n  * @param {... *} args  A single matrix\n  * @return {*} The mode of all values\n  */\n  return typed(name, {\n    'Array | Matrix': _mode,\n    '...': function _(args) {\n      return _mode(args);\n    }\n  });\n\n  /**\n   * Calculates the mode in an 1-dimensional array\n   * @param {Array} values\n   * @return {Array} mode\n   * @private\n   */\n  function _mode(values) {\n    values = flatten(values.valueOf());\n    var num = values.length;\n    if (num === 0) {\n      throw new Error('Cannot calculate mode of an empty array');\n    }\n    var count = {};\n    var mode = [];\n    var max = 0;\n    for (var i = 0; i < values.length; i++) {\n      var value = values[i];\n      if (isNumeric(value) && isNaN(value)) {\n        throw new Error('Cannot calculate mode of an array containing NaN values');\n      }\n      if (!(value in count)) {\n        count[value] = 0;\n      }\n      count[value]++;\n      if (count[value] === max) {\n        mode.push(value);\n      } else if (count[value] > max) {\n        max = count[value];\n        mode = [value];\n      }\n    }\n    return mode;\n  }\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAS;CAAY;AAC3C,IAAI,aAAa,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACjE,IAAI,EACF,KAAK,EACL,KAAK,EACL,SAAS,EACV,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;EAwBA,GACA,OAAO,MAAM,MAAM;QACjB,kBAAkB;QAClB,OAAO,SAAS,EAAE,IAAI;YACpB,OAAO,MAAM;QACf;IACF;;IAEA;;;;;GAKC,GACD,SAAS,MAAM,MAAM;QACnB,SAAS,CAAA,GAAA,sJAAA,CAAA,UAAO,AAAD,EAAE,OAAO,OAAO;QAC/B,IAAI,MAAM,OAAO,MAAM;QACvB,IAAI,QAAQ,GAAG;YACb,MAAM,IAAI,MAAM;QAClB;QACA,IAAI,QAAQ,CAAC;QACb,IAAI,OAAO,EAAE;QACb,IAAI,MAAM;QACV,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,MAAM,EAAE,IAAK;YACtC,IAAI,QAAQ,MAAM,CAAC,EAAE;YACrB,IAAI,UAAU,UAAU,MAAM,QAAQ;gBACpC,MAAM,IAAI,MAAM;YAClB;YACA,IAAI,CAAC,CAAC,SAAS,KAAK,GAAG;gBACrB,KAAK,CAAC,MAAM,GAAG;YACjB;YACA,KAAK,CAAC,MAAM;YACZ,IAAI,KAAK,CAAC,MAAM,KAAK,KAAK;gBACxB,KAAK,IAAI,CAAC;YACZ,OAAO,IAAI,KAAK,CAAC,MAAM,GAAG,KAAK;gBAC7B,MAAM,KAAK,CAAC,MAAM;gBAClB,OAAO;oBAAC;iBAAM;YAChB;QACF;QACA,OAAO;IACT;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4346, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/statistics/utils/improveErrorMessage.js"],"sourcesContent":["import { typeOf } from '../../../utils/is.js';\n\n/**\n * Improve error messages for statistics functions. Errors are typically\n * thrown in an internally used function like larger, causing the error\n * not to mention the function (like max) which is actually used by the user.\n *\n * @param {Error} err\n * @param {String} fnName\n * @param {*} [value]\n * @return {Error}\n */\nexport function improveErrorMessage(err, fnName, value) {\n  // TODO: add information with the index (also needs transform in expression parser)\n  var details;\n  if (String(err).includes('Unexpected type')) {\n    details = arguments.length > 2 ? ' (type: ' + typeOf(value) + ', value: ' + JSON.stringify(value) + ')' : ' (type: ' + err.data.actual + ')';\n    return new TypeError('Cannot calculate ' + fnName + ', unexpected type of argument' + details);\n  }\n  if (String(err).includes('complex numbers')) {\n    details = arguments.length > 2 ? ' (type: ' + typeOf(value) + ', value: ' + JSON.stringify(value) + ')' : '';\n    return new TypeError('Cannot calculate ' + fnName + ', no ordering relation is defined for complex numbers' + details);\n  }\n  return err;\n}"],"names":[],"mappings":";;;AAAA;;AAYO,SAAS,oBAAoB,GAAG,EAAE,MAAM,EAAE,KAAK;IACpD,mFAAmF;IACnF,IAAI;IACJ,IAAI,OAAO,KAAK,QAAQ,CAAC,oBAAoB;QAC3C,UAAU,UAAU,MAAM,GAAG,IAAI,aAAa,CAAA,GAAA,mJAAA,CAAA,SAAM,AAAD,EAAE,SAAS,cAAc,KAAK,SAAS,CAAC,SAAS,MAAM,aAAa,IAAI,IAAI,CAAC,MAAM,GAAG;QACzI,OAAO,IAAI,UAAU,sBAAsB,SAAS,kCAAkC;IACxF;IACA,IAAI,OAAO,KAAK,QAAQ,CAAC,oBAAoB;QAC3C,UAAU,UAAU,MAAM,GAAG,IAAI,aAAa,CAAA,GAAA,mJAAA,CAAA,SAAM,AAAD,EAAE,SAAS,cAAc,KAAK,SAAS,CAAC,SAAS,MAAM;QAC1G,OAAO,IAAI,UAAU,sBAAsB,SAAS,0DAA0D;IAChH;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4370, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/statistics/prod.js"],"sourcesContent":["import { deepForEach } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { safeNumberType } from '../../utils/number.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'prod';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'numeric'];\nexport var createProd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    multiplyScalar,\n    numeric\n  } = _ref;\n  /**\n   * Compute the product of a matrix or a list with values.\n   * In case of a multidimensional array or matrix, the sum of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.prod(a, b, c, ...)\n   *     math.prod(A)\n   *\n   * Examples:\n   *\n   *     math.multiply(2, 3)           // returns 6\n   *     math.prod(2, 3)               // returns 6\n   *     math.prod(2, 3, 4)            // returns 24\n   *     math.prod([2, 3, 4])          // returns 24\n   *     math.prod([[2, 5], [4, 3]])   // returns 120\n   *\n   * See also:\n   *\n   *    mean, median, min, max, sum, std, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The product of all values\n   */\n  return typed(name, {\n    // prod([a, b, c, d, ...])\n    'Array | Matrix': _prod,\n    // prod([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function Array__Matrix_number__BigNumber(array, dim) {\n      // TODO: implement prod(A, dim)\n      throw new Error('prod(A, dim) is not yet supported');\n      // return reduce(arguments[0], arguments[1], math.prod)\n    },\n    // prod(a, b, c, d, ...)\n    '...': function _(args) {\n      return _prod(args);\n    }\n  });\n\n  /**\n   * Recursively calculate the product of an n-dimensional array\n   * @param {Array} array\n   * @return {number} prod\n   * @private\n   */\n  function _prod(array) {\n    var prod;\n    deepForEach(array, function (value) {\n      try {\n        prod = prod === undefined ? value : multiplyScalar(prod, value);\n      } catch (err) {\n        throw improveErrorMessage(err, 'prod', value);\n      }\n    });\n\n    // make sure returning numeric value: parse a string into a numeric value\n    if (typeof prod === 'string') {\n      prod = numeric(prod, safeNumberType(prod, config));\n    }\n    if (prod === undefined) {\n      throw new Error('Cannot calculate prod of an empty array');\n    }\n    return prod;\n  }\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;IAAkB;CAAU;AAC5D,IAAI,aAAa,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACjE,IAAI,EACF,KAAK,EACL,MAAM,EACN,cAAc,EACd,OAAO,EACR,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;GAwBC,GACD,OAAO,MAAM,MAAM;QACjB,0BAA0B;QAC1B,kBAAkB;QAClB,+BAA+B;QAC/B,sCAAsC,SAAS,gCAAgC,KAAK,EAAE,GAAG;YACvF,+BAA+B;YAC/B,MAAM,IAAI,MAAM;QAChB,uDAAuD;QACzD;QACA,wBAAwB;QACxB,OAAO,SAAS,EAAE,IAAI;YACpB,OAAO,MAAM;QACf;IACF;;IAEA;;;;;GAKC,GACD,SAAS,MAAM,KAAK;QAClB,IAAI;QACJ,CAAA,GAAA,2JAAA,CAAA,cAAW,AAAD,EAAE,OAAO,SAAU,KAAK;YAChC,IAAI;gBACF,OAAO,SAAS,YAAY,QAAQ,eAAe,MAAM;YAC3D,EAAE,OAAO,KAAK;gBACZ,MAAM,CAAA,GAAA,8LAAA,CAAA,sBAAmB,AAAD,EAAE,KAAK,QAAQ;YACzC;QACF;QAEA,yEAAyE;QACzE,IAAI,OAAO,SAAS,UAAU;YAC5B,OAAO,QAAQ,MAAM,CAAA,GAAA,uJAAA,CAAA,iBAAc,AAAD,EAAE,MAAM;QAC5C;QACA,IAAI,SAAS,WAAW;YACtB,MAAM,IAAI,MAAM;QAClB;QACA,OAAO;IACT;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4459, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/statistics/max.js"],"sourcesContent":["import { deepForEach, reduce, containsCollections } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { safeNumberType } from '../../utils/number.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'max';\nvar dependencies = ['typed', 'config', 'numeric', 'larger'];\nexport var createMax = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    numeric,\n    larger\n  } = _ref;\n  /**\n   * Compute the maximum value of a matrix or a  list with values.\n   * In case of a multidimensional array, the maximum of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.max(a, b, c, ...)\n   *     math.max(A)\n   *     math.max(A, dimension)\n   *\n   * Examples:\n   *\n   *     math.max(2, 1, 4, 3)                  // returns 4\n   *     math.max([2, 1, 4, 3])                // returns 4\n   *\n   *     // maximum over a specified dimension (zero-based)\n   *     math.max([[2, 5], [4, 3], [1, 7]], 0) // returns [4, 7]\n   *     math.max([[2, 5], [4, 3], [1, 7]], 1) // returns [5, 4, 7]\n   *\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5\n   *\n   * See also:\n   *\n   *    mean, median, min, prod, std, sum, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The maximum value\n   */\n  return typed(name, {\n    // max([a, b, c, d, ...])\n    'Array | Matrix': _max,\n    // max([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function Array__Matrix_number__BigNumber(array, dim) {\n      return reduce(array, dim.valueOf(), _largest);\n    },\n    // max(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function max');\n      }\n      return _max(args);\n    }\n  });\n\n  /**\n   * Return the largest of two values\n   * @param {*} x\n   * @param {*} y\n   * @returns {*} Returns x when x is largest, or y when y is largest\n   * @private\n   */\n  function _largest(x, y) {\n    try {\n      return larger(x, y) ? x : y;\n    } catch (err) {\n      throw improveErrorMessage(err, 'max', y);\n    }\n  }\n\n  /**\n   * Recursively calculate the maximum value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} max\n   * @private\n   */\n  function _max(array) {\n    var res;\n    deepForEach(array, function (value) {\n      try {\n        if (isNaN(value) && typeof value === 'number') {\n          res = NaN;\n        } else if (res === undefined || larger(value, res)) {\n          res = value;\n        }\n      } catch (err) {\n        throw improveErrorMessage(err, 'max', value);\n      }\n    });\n    if (res === undefined) {\n      throw new Error('Cannot calculate max of an empty array');\n    }\n\n    // make sure returning numeric value: parse a string into a numeric value\n    if (typeof res === 'string') {\n      res = numeric(res, safeNumberType(res, config));\n    }\n    return res;\n  }\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;IAAW;CAAS;AACpD,IAAI,YAAY,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAChE,IAAI,EACF,KAAK,EACL,MAAM,EACN,OAAO,EACP,MAAM,EACP,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BC,GACD,OAAO,MAAM,MAAM;QACjB,yBAAyB;QACzB,kBAAkB;QAClB,8BAA8B;QAC9B,sCAAsC,SAAS,gCAAgC,KAAK,EAAE,GAAG;YACvF,OAAO,CAAA,GAAA,2JAAA,CAAA,SAAM,AAAD,EAAE,OAAO,IAAI,OAAO,IAAI;QACtC;QACA,uBAAuB;QACvB,OAAO,SAAS,EAAE,IAAI;YACpB,IAAI,CAAA,GAAA,2JAAA,CAAA,sBAAmB,AAAD,EAAE,OAAO;gBAC7B,MAAM,IAAI,UAAU;YACtB;YACA,OAAO,KAAK;QACd;IACF;;IAEA;;;;;;GAMC,GACD,SAAS,SAAS,CAAC,EAAE,CAAC;QACpB,IAAI;YACF,OAAO,OAAO,GAAG,KAAK,IAAI;QAC5B,EAAE,OAAO,KAAK;YACZ,MAAM,CAAA,GAAA,8LAAA,CAAA,sBAAmB,AAAD,EAAE,KAAK,OAAO;QACxC;IACF;IAEA;;;;;GAKC,GACD,SAAS,KAAK,KAAK;QACjB,IAAI;QACJ,CAAA,GAAA,2JAAA,CAAA,cAAW,AAAD,EAAE,OAAO,SAAU,KAAK;YAChC,IAAI;gBACF,IAAI,MAAM,UAAU,OAAO,UAAU,UAAU;oBAC7C,MAAM;gBACR,OAAO,IAAI,QAAQ,aAAa,OAAO,OAAO,MAAM;oBAClD,MAAM;gBACR;YACF,EAAE,OAAO,KAAK;gBACZ,MAAM,CAAA,GAAA,8LAAA,CAAA,sBAAmB,AAAD,EAAE,KAAK,OAAO;YACxC;QACF;QACA,IAAI,QAAQ,WAAW;YACrB,MAAM,IAAI,MAAM;QAClB;QAEA,yEAAyE;QACzE,IAAI,OAAO,QAAQ,UAAU;YAC3B,MAAM,QAAQ,KAAK,CAAA,GAAA,uJAAA,CAAA,iBAAc,AAAD,EAAE,KAAK;QACzC;QACA,OAAO;IACT;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4572, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/statistics/min.js"],"sourcesContent":["import { containsCollections, deepForEach, reduce } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { safeNumberType } from '../../utils/number.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'min';\nvar dependencies = ['typed', 'config', 'numeric', 'smaller'];\nexport var createMin = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    numeric,\n    smaller\n  } = _ref;\n  /**\n   * Compute the minimum value of a matrix or a  list of values.\n   * In case of a multidimensional array, the minimum of the flattened array\n   * will be calculated. When `dim` is provided, the minimum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.min(a, b, c, ...)\n   *     math.min(A)\n   *     math.min(A, dimension)\n   *\n   * Examples:\n   *\n   *     math.min(2, 1, 4, 3)                  // returns 1\n   *     math.min([2, 1, 4, 3])                // returns 1\n   *\n   *     // minimum over a specified dimension (zero-based)\n   *     math.min([[2, 5], [4, 3], [1, 7]], 0) // returns [1, 3]\n   *     math.min([[2, 5], [4, 3], [1, 7]], 1) // returns [2, 3, 1]\n   *\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5\n   *\n   * See also:\n   *\n   *    mean, median, max, prod, std, sum, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The minimum value\n   */\n  return typed(name, {\n    // min([a, b, c, d, ...])\n    'Array | Matrix': _min,\n    // min([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function Array__Matrix_number__BigNumber(array, dim) {\n      return reduce(array, dim.valueOf(), _smallest);\n    },\n    // min(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function min');\n      }\n      return _min(args);\n    }\n  });\n\n  /**\n   * Return the smallest of two values\n   * @param {*} x\n   * @param {*} y\n   * @returns {*} Returns x when x is smallest, or y when y is smallest\n   * @private\n   */\n  function _smallest(x, y) {\n    try {\n      return smaller(x, y) ? x : y;\n    } catch (err) {\n      throw improveErrorMessage(err, 'min', y);\n    }\n  }\n\n  /**\n   * Recursively calculate the minimum value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} min\n   * @private\n   */\n  function _min(array) {\n    var min;\n    deepForEach(array, function (value) {\n      try {\n        if (isNaN(value) && typeof value === 'number') {\n          min = NaN;\n        } else if (min === undefined || smaller(value, min)) {\n          min = value;\n        }\n      } catch (err) {\n        throw improveErrorMessage(err, 'min', value);\n      }\n    });\n    if (min === undefined) {\n      throw new Error('Cannot calculate min of an empty array');\n    }\n\n    // make sure returning numeric value: parse a string into a numeric value\n    if (typeof min === 'string') {\n      min = numeric(min, safeNumberType(min, config));\n    }\n    return min;\n  }\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;IAAW;CAAU;AACrD,IAAI,YAAY,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAChE,IAAI,EACF,KAAK,EACL,MAAM,EACN,OAAO,EACP,OAAO,EACR,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BC,GACD,OAAO,MAAM,MAAM;QACjB,yBAAyB;QACzB,kBAAkB;QAClB,8BAA8B;QAC9B,sCAAsC,SAAS,gCAAgC,KAAK,EAAE,GAAG;YACvF,OAAO,CAAA,GAAA,2JAAA,CAAA,SAAM,AAAD,EAAE,OAAO,IAAI,OAAO,IAAI;QACtC;QACA,uBAAuB;QACvB,OAAO,SAAS,EAAE,IAAI;YACpB,IAAI,CAAA,GAAA,2JAAA,CAAA,sBAAmB,AAAD,EAAE,OAAO;gBAC7B,MAAM,IAAI,UAAU;YACtB;YACA,OAAO,KAAK;QACd;IACF;;IAEA;;;;;;GAMC,GACD,SAAS,UAAU,CAAC,EAAE,CAAC;QACrB,IAAI;YACF,OAAO,QAAQ,GAAG,KAAK,IAAI;QAC7B,EAAE,OAAO,KAAK;YACZ,MAAM,CAAA,GAAA,8LAAA,CAAA,sBAAmB,AAAD,EAAE,KAAK,OAAO;QACxC;IACF;IAEA;;;;;GAKC,GACD,SAAS,KAAK,KAAK;QACjB,IAAI;QACJ,CAAA,GAAA,2JAAA,CAAA,cAAW,AAAD,EAAE,OAAO,SAAU,KAAK;YAChC,IAAI;gBACF,IAAI,MAAM,UAAU,OAAO,UAAU,UAAU;oBAC7C,MAAM;gBACR,OAAO,IAAI,QAAQ,aAAa,QAAQ,OAAO,MAAM;oBACnD,MAAM;gBACR;YACF,EAAE,OAAO,KAAK;gBACZ,MAAM,CAAA,GAAA,8LAAA,CAAA,sBAAmB,AAAD,EAAE,KAAK,OAAO;YACxC;QACF;QACA,IAAI,QAAQ,WAAW;YACrB,MAAM,IAAI,MAAM;QAClB;QAEA,yEAAyE;QACzE,IAAI,OAAO,QAAQ,UAAU;YAC3B,MAAM,QAAQ,KAAK,CAAA,GAAA,uJAAA,CAAA,iBAAc,AAAD,EAAE,KAAK;QACzC;QACA,OAAO;IACT;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4685, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/statistics/sum.js"],"sourcesContent":["import { containsCollections, deepForEach, reduce } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { safeNumberType } from '../../utils/number.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'sum';\nvar dependencies = ['typed', 'config', 'add', 'numeric'];\nexport var createSum = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    add,\n    numeric\n  } = _ref;\n  /**\n   * Compute the sum of a matrix or a list with values.\n   * In case of a multidimensional array or matrix, the sum of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.sum(a, b, c, ...)\n   *     math.sum(A)\n   *     math.sum(A, dimension)\n   *\n   * Examples:\n   *\n   *     math.sum(2, 1, 4, 3)               // returns 10\n   *     math.sum([2, 1, 4, 3])             // returns 10\n   *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22\n   *\n   * See also:\n   *\n   *    mean, median, min, max, prod, std, variance, cumsum\n   *\n   * @param {... *} args  A single matrix or multiple scalar values\n   * @return {*} The sum of all values\n   */\n  return typed(name, {\n    // sum([a, b, c, d, ...])\n    'Array | Matrix': _sum,\n    // sum([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nsumDim,\n    // sum(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function sum');\n      }\n      return _sum(args);\n    }\n  });\n\n  /**\n   * Recursively calculate the sum of an n-dimensional array\n   * @param {Array | Matrix} array\n   * @return {number} sum\n   * @private\n   */\n  function _sum(array) {\n    var sum;\n    deepForEach(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n      } catch (err) {\n        throw improveErrorMessage(err, 'sum', value);\n      }\n    });\n\n    // make sure returning numeric value: parse a string into a numeric value\n    if (sum === undefined) {\n      sum = numeric(0, config.number);\n    }\n    if (typeof sum === 'string') {\n      sum = numeric(sum, safeNumberType(sum, config));\n    }\n    return sum;\n  }\n  function _nsumDim(array, dim) {\n    try {\n      var sum = reduce(array, dim, add);\n      return sum;\n    } catch (err) {\n      throw improveErrorMessage(err, 'sum');\n    }\n  }\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;IAAO;CAAU;AACjD,IAAI,YAAY,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAChE,IAAI,EACF,KAAK,EACL,MAAM,EACN,GAAG,EACH,OAAO,EACR,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;GAuBC,GACD,OAAO,MAAM,MAAM;QACjB,yBAAyB;QACzB,kBAAkB;QAClB,8BAA8B;QAC9B,sCAAsC;QACtC,uBAAuB;QACvB,OAAO,SAAS,EAAE,IAAI;YACpB,IAAI,CAAA,GAAA,2JAAA,CAAA,sBAAmB,AAAD,EAAE,OAAO;gBAC7B,MAAM,IAAI,UAAU;YACtB;YACA,OAAO,KAAK;QACd;IACF;;IAEA;;;;;GAKC,GACD,SAAS,KAAK,KAAK;QACjB,IAAI;QACJ,CAAA,GAAA,2JAAA,CAAA,cAAW,AAAD,EAAE,OAAO,SAAU,KAAK;YAChC,IAAI;gBACF,MAAM,QAAQ,YAAY,QAAQ,IAAI,KAAK;YAC7C,EAAE,OAAO,KAAK;gBACZ,MAAM,CAAA,GAAA,8LAAA,CAAA,sBAAmB,AAAD,EAAE,KAAK,OAAO;YACxC;QACF;QAEA,yEAAyE;QACzE,IAAI,QAAQ,WAAW;YACrB,MAAM,QAAQ,GAAG,OAAO,MAAM;QAChC;QACA,IAAI,OAAO,QAAQ,UAAU;YAC3B,MAAM,QAAQ,KAAK,CAAA,GAAA,uJAAA,CAAA,iBAAc,AAAD,EAAE,KAAK;QACzC;QACA,OAAO;IACT;IACA,SAAS,SAAS,KAAK,EAAE,GAAG;QAC1B,IAAI;YACF,IAAI,MAAM,CAAA,GAAA,2JAAA,CAAA,SAAM,AAAD,EAAE,OAAO,KAAK;YAC7B,OAAO;QACT,EAAE,OAAO,KAAK;YACZ,MAAM,CAAA,GAAA,8LAAA,CAAA,sBAAmB,AAAD,EAAE,KAAK;QACjC;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4780, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/statistics/cumsum.js"],"sourcesContent":["import { containsCollections } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { _switch } from '../../utils/switch.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nimport { arraySize } from '../../utils/array.js';\nimport { IndexError } from '../../error/IndexError.js';\nvar name = 'cumsum';\nvar dependencies = ['typed', 'add', 'unaryPlus'];\nexport var createCumSum = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    unaryPlus\n  } = _ref;\n  /**\n   * Compute the cumulative sum of a matrix or a list with values.\n   * In case of a (multi dimensional) array or matrix, the cumulative sums\n   * along a specified dimension (defaulting to the first) will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.cumsum(a, b, c, ...)\n   *     math.cumsum(A)\n   *\n   * Examples:\n   *\n   *     math.cumsum(2, 1, 4, 3)               // returns [2, 3, 7, 10]\n   *     math.cumsum([2, 1, 4, 3])             // returns [2, 3, 7, 10]\n   *     math.cumsum([[1, 2], [3, 4]])         // returns [[1, 2], [4, 6]]\n   *     math.cumsum([[1, 2], [3, 4]], 0)      // returns [[1, 2], [4, 6]]\n   *     math.cumsum([[1, 2], [3, 4]], 1)      // returns [[1, 3], [3, 7]]\n   *     math.cumsum([[2, 5], [4, 3], [1, 7]]) // returns [[2, 5], [6, 8], [7, 15]]\n   *\n   * See also:\n   *\n   *    mean, median, min, max, prod, std, variance, sum\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The cumulative sum of all values\n   */\n  return typed(name, {\n    // sum([a, b, c, d, ...])\n    Array: _cumsum,\n    Matrix: function Matrix(matrix) {\n      return matrix.create(_cumsum(matrix.valueOf(), matrix.datatype()));\n    },\n    // sum([a, b, c, d, ...], dim)\n    'Array, number | BigNumber': _ncumSumDim,\n    'Matrix, number | BigNumber': function Matrix_number__BigNumber(matrix, dim) {\n      return matrix.create(_ncumSumDim(matrix.valueOf(), dim), matrix.datatype());\n    },\n    // cumsum(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('All values expected to be scalar in function cumsum');\n      }\n      return _cumsum(args);\n    }\n  });\n\n  /**\n     * Recursively calculate the cumulative sum of an n-dimensional array\n     * @param {Array} array\n     * @return {number} cumsum\n     * @private\n     */\n  function _cumsum(array) {\n    try {\n      return _cumsummap(array);\n    } catch (err) {\n      throw improveErrorMessage(err, name);\n    }\n  }\n  function _cumsummap(array) {\n    if (array.length === 0) {\n      return [];\n    }\n    var sums = [unaryPlus(array[0])]; // unaryPlus converts to number if need be\n    for (var i = 1; i < array.length; ++i) {\n      // Must use add below and not addScalar for the case of summing a\n      // 2+-dimensional array along the 0th dimension (the row vectors,\n      // or higher-d analogues, are literally added to each other).\n      sums.push(add(sums[i - 1], array[i]));\n    }\n    return sums;\n  }\n  function _ncumSumDim(array, dim) {\n    var size = arraySize(array);\n    if (dim < 0 || dim >= size.length) {\n      // TODO: would be more clear when throwing a DimensionError here\n      throw new IndexError(dim, size.length);\n    }\n    try {\n      return _cumsumDimensional(array, dim);\n    } catch (err) {\n      throw improveErrorMessage(err, name);\n    }\n  }\n\n  /* Possible TODO: Refactor _reduce in collection.js to be able to work here as well */\n  function _cumsumDimensional(mat, dim) {\n    var i, ret, tran;\n    if (dim <= 0) {\n      var initialValue = mat[0][0];\n      if (!Array.isArray(initialValue)) {\n        return _cumsummap(mat);\n      } else {\n        tran = _switch(mat);\n        ret = [];\n        for (i = 0; i < tran.length; i++) {\n          ret[i] = _cumsumDimensional(tran[i], dim - 1);\n        }\n        return ret;\n      }\n    } else {\n      ret = [];\n      for (i = 0; i < mat.length; i++) {\n        ret[i] = _cumsumDimensional(mat[i], dim - 1);\n      }\n      return ret;\n    }\n  }\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAO;CAAY;AACzC,IAAI,eAAe,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACnE,IAAI,EACF,KAAK,EACL,GAAG,EACH,SAAS,EACV,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;GAyBC,GACD,OAAO,MAAM,MAAM;QACjB,yBAAyB;QACzB,OAAO;QACP,QAAQ,SAAS,OAAO,MAAM;YAC5B,OAAO,OAAO,MAAM,CAAC,QAAQ,OAAO,OAAO,IAAI,OAAO,QAAQ;QAChE;QACA,8BAA8B;QAC9B,6BAA6B;QAC7B,8BAA8B,SAAS,yBAAyB,MAAM,EAAE,GAAG;YACzE,OAAO,OAAO,MAAM,CAAC,YAAY,OAAO,OAAO,IAAI,MAAM,OAAO,QAAQ;QAC1E;QACA,0BAA0B;QAC1B,OAAO,SAAS,EAAE,IAAI;YACpB,IAAI,CAAA,GAAA,2JAAA,CAAA,sBAAmB,AAAD,EAAE,OAAO;gBAC7B,MAAM,IAAI,UAAU;YACtB;YACA,OAAO,QAAQ;QACjB;IACF;;IAEA;;;;;KAKG,GACH,SAAS,QAAQ,KAAK;QACpB,IAAI;YACF,OAAO,WAAW;QACpB,EAAE,OAAO,KAAK;YACZ,MAAM,CAAA,GAAA,8LAAA,CAAA,sBAAmB,AAAD,EAAE,KAAK;QACjC;IACF;IACA,SAAS,WAAW,KAAK;QACvB,IAAI,MAAM,MAAM,KAAK,GAAG;YACtB,OAAO,EAAE;QACX;QACA,IAAI,OAAO;YAAC,UAAU,KAAK,CAAC,EAAE;SAAE,EAAE,0CAA0C;QAC5E,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,EAAE,EAAG;YACrC,iEAAiE;YACjE,iEAAiE;YACjE,6DAA6D;YAC7D,KAAK,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,KAAK,CAAC,EAAE;QACrC;QACA,OAAO;IACT;IACA,SAAS,YAAY,KAAK,EAAE,GAAG;QAC7B,IAAI,OAAO,CAAA,GAAA,sJAAA,CAAA,YAAS,AAAD,EAAE;QACrB,IAAI,MAAM,KAAK,OAAO,KAAK,MAAM,EAAE;YACjC,gEAAgE;YAChE,MAAM,IAAI,2JAAA,CAAA,aAAU,CAAC,KAAK,KAAK,MAAM;QACvC;QACA,IAAI;YACF,OAAO,mBAAmB,OAAO;QACnC,EAAE,OAAO,KAAK;YACZ,MAAM,CAAA,GAAA,8LAAA,CAAA,sBAAmB,AAAD,EAAE,KAAK;QACjC;IACF;IAEA,oFAAoF,GACpF,SAAS,mBAAmB,GAAG,EAAE,GAAG;QAClC,IAAI,GAAG,KAAK;QACZ,IAAI,OAAO,GAAG;YACZ,IAAI,eAAe,GAAG,CAAC,EAAE,CAAC,EAAE;YAC5B,IAAI,CAAC,MAAM,OAAO,CAAC,eAAe;gBAChC,OAAO,WAAW;YACpB,OAAO;gBACL,OAAO,CAAA,GAAA,uJAAA,CAAA,UAAO,AAAD,EAAE;gBACf,MAAM,EAAE;gBACR,IAAK,IAAI,GAAG,IAAI,KAAK,MAAM,EAAE,IAAK;oBAChC,GAAG,CAAC,EAAE,GAAG,mBAAmB,IAAI,CAAC,EAAE,EAAE,MAAM;gBAC7C;gBACA,OAAO;YACT;QACF,OAAO;YACL,MAAM,EAAE;YACR,IAAK,IAAI,GAAG,IAAI,IAAI,MAAM,EAAE,IAAK;gBAC/B,GAAG,CAAC,EAAE,GAAG,mBAAmB,GAAG,CAAC,EAAE,EAAE,MAAM;YAC5C;YACA,OAAO;QACT;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4916, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/statistics/mean.js"],"sourcesContent":["import { containsCollections, deepForEach, reduce } from '../../utils/collection.js';\nimport { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'mean';\nvar dependencies = ['typed', 'add', 'divide'];\nexport var createMean = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    divide\n  } = _ref;\n  /**\n   * Compute the mean value of matrix or a list with values.\n   * In case of a multidimensional array, the mean of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.mean(a, b, c, ...)\n   *     math.mean(A)\n   *     math.mean(A, dimension)\n   *\n   * Examples:\n   *\n   *     math.mean(2, 1, 4, 3)                     // returns 2.5\n   *     math.mean([1, 2.7, 3.2, 4])               // returns 2.725\n   *\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 0)    // returns [3, 5]\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 1)    // returns [3.5, 4.5, 4]\n   *\n   * See also:\n   *\n   *     median, min, max, sum, prod, std, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The mean of all values\n   */\n  return typed(name, {\n    // mean([a, b, c, d, ...])\n    'Array | Matrix': _mean,\n    // mean([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nmeanDim,\n    // mean(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function mean');\n      }\n      return _mean(args);\n    }\n  });\n\n  /**\n   * Calculate the mean value in an n-dimensional array, returning a\n   * n-1 dimensional array\n   * @param {Array} array\n   * @param {number} dim\n   * @return {number} mean\n   * @private\n   */\n  function _nmeanDim(array, dim) {\n    try {\n      var sum = reduce(array, dim, add);\n      var s = Array.isArray(array) ? arraySize(array) : array.size();\n      return divide(sum, s[dim]);\n    } catch (err) {\n      throw improveErrorMessage(err, 'mean');\n    }\n  }\n\n  /**\n   * Recursively calculate the mean value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} mean\n   * @private\n   */\n  function _mean(array) {\n    var sum;\n    var num = 0;\n    deepForEach(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n        num++;\n      } catch (err) {\n        throw improveErrorMessage(err, 'mean', value);\n      }\n    });\n    if (num === 0) {\n      throw new Error('Cannot calculate the mean of an empty array');\n    }\n    return divide(sum, num);\n  }\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAO;CAAS;AACtC,IAAI,aAAa,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACjE,IAAI,EACF,KAAK,EACL,GAAG,EACH,MAAM,EACP,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BC,GACD,OAAO,MAAM,MAAM;QACjB,0BAA0B;QAC1B,kBAAkB;QAClB,+BAA+B;QAC/B,sCAAsC;QACtC,wBAAwB;QACxB,OAAO,SAAS,EAAE,IAAI;YACpB,IAAI,CAAA,GAAA,2JAAA,CAAA,sBAAmB,AAAD,EAAE,OAAO;gBAC7B,MAAM,IAAI,UAAU;YACtB;YACA,OAAO,MAAM;QACf;IACF;;IAEA;;;;;;;GAOC,GACD,SAAS,UAAU,KAAK,EAAE,GAAG;QAC3B,IAAI;YACF,IAAI,MAAM,CAAA,GAAA,2JAAA,CAAA,SAAM,AAAD,EAAE,OAAO,KAAK;YAC7B,IAAI,IAAI,MAAM,OAAO,CAAC,SAAS,CAAA,GAAA,sJAAA,CAAA,YAAS,AAAD,EAAE,SAAS,MAAM,IAAI;YAC5D,OAAO,OAAO,KAAK,CAAC,CAAC,IAAI;QAC3B,EAAE,OAAO,KAAK;YACZ,MAAM,CAAA,GAAA,8LAAA,CAAA,sBAAmB,AAAD,EAAE,KAAK;QACjC;IACF;IAEA;;;;;GAKC,GACD,SAAS,MAAM,KAAK;QAClB,IAAI;QACJ,IAAI,MAAM;QACV,CAAA,GAAA,2JAAA,CAAA,cAAW,AAAD,EAAE,OAAO,SAAU,KAAK;YAChC,IAAI;gBACF,MAAM,QAAQ,YAAY,QAAQ,IAAI,KAAK;gBAC3C;YACF,EAAE,OAAO,KAAK;gBACZ,MAAM,CAAA,GAAA,8LAAA,CAAA,sBAAmB,AAAD,EAAE,KAAK,QAAQ;YACzC;QACF;QACA,IAAI,QAAQ,GAAG;YACb,MAAM,IAAI,MAAM;QAClB;QACA,OAAO,OAAO,KAAK;IACrB;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5019, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/statistics/median.js"],"sourcesContent":["import { containsCollections } from '../../utils/collection.js';\nimport { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'median';\nvar dependencies = ['typed', 'add', 'divide', 'compare', 'partitionSelect'];\nexport var createMedian = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    divide,\n    compare,\n    partitionSelect\n  } = _ref;\n  /**\n   * Recursively calculate the median of an n-dimensional array\n   * @param {Array} array\n   * @return {Number} median\n   * @private\n   */\n  function _median(array) {\n    try {\n      array = flatten(array.valueOf());\n      var num = array.length;\n      if (num === 0) {\n        throw new Error('Cannot calculate median of an empty array');\n      }\n      if (num % 2 === 0) {\n        // even: return the average of the two middle values\n        var mid = num / 2 - 1;\n        var right = partitionSelect(array, mid + 1);\n\n        // array now partitioned at mid + 1, take max of left part\n        var left = array[mid];\n        for (var i = 0; i < mid; ++i) {\n          if (compare(array[i], left) > 0) {\n            left = array[i];\n          }\n        }\n        return middle2(left, right);\n      } else {\n        // odd: return the middle value\n        var m = partitionSelect(array, (num - 1) / 2);\n        return middle(m);\n      }\n    } catch (err) {\n      throw improveErrorMessage(err, 'median');\n    }\n  }\n\n  // helper function to type check the middle value of the array\n  var middle = typed({\n    'number | BigNumber | Complex | Unit': function number__BigNumber__Complex__Unit(value) {\n      return value;\n    }\n  });\n\n  // helper function to type check the two middle value of the array\n  var middle2 = typed({\n    'number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit': function number__BigNumber__Complex__Unit_number__BigNumber__Complex__Unit(left, right) {\n      return divide(add(left, right), 2);\n    }\n  });\n\n  /**\n   * Compute the median of a matrix or a list with values. The values are\n   * sorted and the middle value is returned. In case of an even number of\n   * values, the average of the two middle values is returned.\n   * Supported types of values are: Number, BigNumber, Unit\n   *\n   * In case of a (multi dimensional) array or matrix, the median of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.median(a, b, c, ...)\n   *     math.median(A)\n   *\n   * Examples:\n   *\n   *     math.median(5, 2, 7)        // returns 5\n   *     math.median([3, -1, 5, 7])  // returns 4\n   *\n   * See also:\n   *\n   *     mean, min, max, sum, prod, std, variance, quantileSeq\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The median\n   */\n  return typed(name, {\n    // median([a, b, c, d, ...])\n    'Array | Matrix': _median,\n    // median([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function Array__Matrix_number__BigNumber(array, dim) {\n      // TODO: implement median(A, dim)\n      throw new Error('median(A, dim) is not yet supported');\n      // return reduce(arguments[0], arguments[1], ...)\n    },\n    // median(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function median');\n      }\n      return _median(args);\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAO;IAAU;IAAW;CAAkB;AACpE,IAAI,eAAe,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACnE,IAAI,EACF,KAAK,EACL,GAAG,EACH,MAAM,EACN,OAAO,EACP,eAAe,EAChB,GAAG;IACJ;;;;;GAKC,GACD,SAAS,QAAQ,KAAK;QACpB,IAAI;YACF,QAAQ,CAAA,GAAA,sJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,OAAO;YAC7B,IAAI,MAAM,MAAM,MAAM;YACtB,IAAI,QAAQ,GAAG;gBACb,MAAM,IAAI,MAAM;YAClB;YACA,IAAI,MAAM,MAAM,GAAG;gBACjB,oDAAoD;gBACpD,IAAI,MAAM,MAAM,IAAI;gBACpB,IAAI,QAAQ,gBAAgB,OAAO,MAAM;gBAEzC,0DAA0D;gBAC1D,IAAI,OAAO,KAAK,CAAC,IAAI;gBACrB,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,EAAE,EAAG;oBAC5B,IAAI,QAAQ,KAAK,CAAC,EAAE,EAAE,QAAQ,GAAG;wBAC/B,OAAO,KAAK,CAAC,EAAE;oBACjB;gBACF;gBACA,OAAO,QAAQ,MAAM;YACvB,OAAO;gBACL,+BAA+B;gBAC/B,IAAI,IAAI,gBAAgB,OAAO,CAAC,MAAM,CAAC,IAAI;gBAC3C,OAAO,OAAO;YAChB;QACF,EAAE,OAAO,KAAK;YACZ,MAAM,CAAA,GAAA,8LAAA,CAAA,sBAAmB,AAAD,EAAE,KAAK;QACjC;IACF;IAEA,8DAA8D;IAC9D,IAAI,SAAS,MAAM;QACjB,uCAAuC,SAAS,iCAAiC,KAAK;YACpF,OAAO;QACT;IACF;IAEA,kEAAkE;IAClE,IAAI,UAAU,MAAM;QAClB,4EAA4E,SAAS,kEAAkE,IAAI,EAAE,KAAK;YAChK,OAAO,OAAO,IAAI,MAAM,QAAQ;QAClC;IACF;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;GAyBC,GACD,OAAO,MAAM,MAAM;QACjB,4BAA4B;QAC5B,kBAAkB;QAClB,iCAAiC;QACjC,sCAAsC,SAAS,gCAAgC,KAAK,EAAE,GAAG;YACvF,iCAAiC;YACjC,MAAM,IAAI,MAAM;QAChB,iDAAiD;QACnD;QACA,0BAA0B;QAC1B,OAAO,SAAS,EAAE,IAAI;YACpB,IAAI,CAAA,GAAA,2JAAA,CAAA,sBAAmB,AAAD,EAAE,OAAO;gBAC7B,MAAM,IAAI,UAAU;YACtB;YACA,OAAO,QAAQ;QACjB;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5134, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/statistics/mad.js"],"sourcesContent":["import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'mad';\nvar dependencies = ['typed', 'abs', 'map', 'median', 'subtract'];\nexport var createMad = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    abs,\n    map,\n    median,\n    subtract\n  } = _ref;\n  /**\n   * Compute the median absolute deviation of a matrix or a list with values.\n   * The median absolute deviation is defined as the median of the absolute\n   * deviations from the median.\n   *\n   * Syntax:\n   *\n   *     math.mad(a, b, c, ...)\n   *     math.mad(A)\n   *\n   * Examples:\n   *\n   *     math.mad(10, 20, 30)             // returns 10\n   *     math.mad([1, 2, 3])              // returns 1\n   *     math.mad([[1, 2, 3], [4, 5, 6]]) // returns 1.5\n   *\n   * See also:\n   *\n   *     median, mean, std, abs\n   *\n   * @param {Array | Matrix} array\n   *                        A single matrix or multiple scalar values.\n   * @return {*} The median absolute deviation.\n   */\n  return typed(name, {\n    // mad([a, b, c, d, ...])\n    'Array | Matrix': _mad,\n    // mad(a, b, c, d, ...)\n    '...': function _(args) {\n      return _mad(args);\n    }\n  });\n  function _mad(array) {\n    array = flatten(array.valueOf());\n    if (array.length === 0) {\n      throw new Error('Cannot calculate median absolute deviation (mad) of an empty array');\n    }\n    try {\n      var med = median(array);\n      return median(map(array, function (value) {\n        return abs(subtract(value, med));\n      }));\n    } catch (err) {\n      if (err instanceof TypeError && err.message.includes('median')) {\n        throw new TypeError(err.message.replace('median', 'mad'));\n      } else {\n        throw improveErrorMessage(err, 'mad');\n      }\n    }\n  }\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAO;IAAO;IAAU;CAAW;AACzD,IAAI,YAAY,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAChE,IAAI,EACF,KAAK,EACL,GAAG,EACH,GAAG,EACH,MAAM,EACN,QAAQ,EACT,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;GAuBC,GACD,OAAO,MAAM,MAAM;QACjB,yBAAyB;QACzB,kBAAkB;QAClB,uBAAuB;QACvB,OAAO,SAAS,EAAE,IAAI;YACpB,OAAO,KAAK;QACd;IACF;;IACA,SAAS,KAAK,KAAK;QACjB,QAAQ,CAAA,GAAA,sJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,OAAO;QAC7B,IAAI,MAAM,MAAM,KAAK,GAAG;YACtB,MAAM,IAAI,MAAM;QAClB;QACA,IAAI;YACF,IAAI,MAAM,OAAO;YACjB,OAAO,OAAO,IAAI,OAAO,SAAU,KAAK;gBACtC,OAAO,IAAI,SAAS,OAAO;YAC7B;QACF,EAAE,OAAO,KAAK;YACZ,IAAI,eAAe,aAAa,IAAI,OAAO,CAAC,QAAQ,CAAC,WAAW;gBAC9D,MAAM,IAAI,UAAU,IAAI,OAAO,CAAC,OAAO,CAAC,UAAU;YACpD,OAAO;gBACL,MAAM,CAAA,GAAA,8LAAA,CAAA,sBAAmB,AAAD,EAAE,KAAK;YACjC;QACF;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5210, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/statistics/variance.js"],"sourcesContent":["import { deepForEach } from '../../utils/collection.js';\nimport { isBigNumber } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar DEFAULT_NORMALIZATION = 'unbiased';\nvar name = 'variance';\nvar dependencies = ['typed', 'add', 'subtract', 'multiply', 'divide', 'apply', 'isNaN'];\nexport var createVariance = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    subtract,\n    multiply,\n    divide,\n    apply,\n    isNaN\n  } = _ref;\n  /**\n   * Compute the variance of a matrix or a  list with values.\n   * In case of a multidimensional array or matrix, the variance over all\n   * elements will be calculated.\n   *\n   * Additionally, it is possible to compute the variance along the rows\n   * or columns of a matrix by specifying the dimension as the second argument.\n   *\n   * Optionally, the type of normalization can be specified as the final\n   * parameter. The parameter `normalization` can be one of the following values:\n   *\n   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\n   * - 'uncorrected'        The sum of squared errors is divided by n\n   * - 'biased'             The sum of squared errors is divided by (n + 1)\n   *\n   *\n   * Note that older browser may not like the variable name `var`. In that\n   * case, the function can be called as `math['var'](...)` instead of\n   * `math.var(...)`.\n   *\n   * Syntax:\n   *\n   *     math.variance(a, b, c, ...)\n   *     math.variance(A)\n   *     math.variance(A, normalization)\n   *     math.variance(A, dimension)\n   *     math.variance(A, dimension, normalization)\n   *\n   * Examples:\n   *\n   *     math.variance(2, 4, 6)                     // returns 4\n   *     math.variance([2, 4, 6, 8])                // returns 6.666666666666667\n   *     math.variance([2, 4, 6, 8], 'uncorrected') // returns 5\n   *     math.variance([2, 4, 6, 8], 'biased')      // returns 4\n   *\n   *     math.variance([[1, 2, 3], [4, 5, 6]])      // returns 3.5\n   *     math.variance([[1, 2, 3], [4, 6, 8]], 0)   // returns [4.5, 8, 12.5]\n   *     math.variance([[1, 2, 3], [4, 6, 8]], 1)   // returns [1, 4]\n   *     math.variance([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.5, 2]\n   *\n   * See also:\n   *\n   *    mean, median, max, min, prod, std, sum\n   *\n   * @param {Array | Matrix} array\n   *                        A single matrix or or multiple scalar values\n   * @param {string} [normalization='unbiased']\n   *                        Determines how to normalize the variance.\n   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\n   * @param dimension {number | BigNumber}\n   *                        Determines the axis to compute the variance for a matrix\n   * @return {*} The variance\n   */\n  return typed(name, {\n    // variance([a, b, c, d, ...])\n    'Array | Matrix': function Array__Matrix(array) {\n      return _var(array, DEFAULT_NORMALIZATION);\n    },\n    // variance([a, b, c, d, ...], normalization)\n    'Array | Matrix, string': _var,\n    // variance([a, b, c, c, ...], dim)\n    'Array | Matrix, number | BigNumber': function Array__Matrix_number__BigNumber(array, dim) {\n      return _varDim(array, dim, DEFAULT_NORMALIZATION);\n    },\n    // variance([a, b, c, c, ...], dim, normalization)\n    'Array | Matrix, number | BigNumber, string': _varDim,\n    // variance(a, b, c, d, ...)\n    '...': function _(args) {\n      return _var(args, DEFAULT_NORMALIZATION);\n    }\n  });\n\n  /**\n   * Recursively calculate the variance of an n-dimensional array\n   * @param {Array} array\n   * @param {string} normalization\n   *                        Determines how to normalize the variance:\n   *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)\n   *                        - 'uncorrected' The sum of squared errors is divided by n\n   *                        - 'biased'      The sum of squared errors is divided by (n + 1)\n   * @return {number | BigNumber} variance\n   * @private\n   */\n  function _var(array, normalization) {\n    var sum;\n    var num = 0;\n    if (array.length === 0) {\n      throw new SyntaxError('Function variance requires one or more parameters (0 provided)');\n    }\n\n    // calculate the mean and number of elements\n    deepForEach(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n        num++;\n      } catch (err) {\n        throw improveErrorMessage(err, 'variance', value);\n      }\n    });\n    if (num === 0) throw new Error('Cannot calculate variance of an empty array');\n    var mean = divide(sum, num);\n\n    // calculate the variance\n    sum = undefined;\n    deepForEach(array, function (value) {\n      var diff = subtract(value, mean);\n      sum = sum === undefined ? multiply(diff, diff) : add(sum, multiply(diff, diff));\n    });\n    if (isNaN(sum)) {\n      return sum;\n    }\n    switch (normalization) {\n      case 'uncorrected':\n        return divide(sum, num);\n      case 'biased':\n        return divide(sum, num + 1);\n      case 'unbiased':\n        {\n          var zero = isBigNumber(sum) ? sum.mul(0) : 0;\n          return num === 1 ? zero : divide(sum, num - 1);\n        }\n      default:\n        throw new Error('Unknown normalization \"' + normalization + '\". ' + 'Choose \"unbiased\" (default), \"uncorrected\", or \"biased\".');\n    }\n  }\n  function _varDim(array, dim, normalization) {\n    try {\n      if (array.length === 0) {\n        throw new SyntaxError('Function variance requires one or more parameters (0 provided)');\n      }\n      return apply(array, dim, x => _var(x, normalization));\n    } catch (err) {\n      throw improveErrorMessage(err, 'variance');\n    }\n  }\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AACA,IAAI,wBAAwB;AAC5B,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAO;IAAY;IAAY;IAAU;IAAS;CAAQ;AAChF,IAAI,iBAAiB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACrE,IAAI,EACF,KAAK,EACL,GAAG,EACH,QAAQ,EACR,QAAQ,EACR,MAAM,EACN,KAAK,EACL,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoDC,GACD,OAAO,MAAM,MAAM;QACjB,8BAA8B;QAC9B,kBAAkB,SAAS,cAAc,KAAK;YAC5C,OAAO,KAAK,OAAO;QACrB;QACA,6CAA6C;QAC7C,0BAA0B;QAC1B,mCAAmC;QACnC,sCAAsC,SAAS,gCAAgC,KAAK,EAAE,GAAG;YACvF,OAAO,QAAQ,OAAO,KAAK;QAC7B;QACA,kDAAkD;QAClD,8CAA8C;QAC9C,4BAA4B;QAC5B,OAAO,SAAS,EAAE,IAAI;YACpB,OAAO,KAAK,MAAM;QACpB;IACF;;IAEA;;;;;;;;;;GAUC,GACD,SAAS,KAAK,KAAK,EAAE,aAAa;QAChC,IAAI;QACJ,IAAI,MAAM;QACV,IAAI,MAAM,MAAM,KAAK,GAAG;YACtB,MAAM,IAAI,YAAY;QACxB;QAEA,4CAA4C;QAC5C,CAAA,GAAA,2JAAA,CAAA,cAAW,AAAD,EAAE,OAAO,SAAU,KAAK;YAChC,IAAI;gBACF,MAAM,QAAQ,YAAY,QAAQ,IAAI,KAAK;gBAC3C;YACF,EAAE,OAAO,KAAK;gBACZ,MAAM,CAAA,GAAA,8LAAA,CAAA,sBAAmB,AAAD,EAAE,KAAK,YAAY;YAC7C;QACF;QACA,IAAI,QAAQ,GAAG,MAAM,IAAI,MAAM;QAC/B,IAAI,OAAO,OAAO,KAAK;QAEvB,yBAAyB;QACzB,MAAM;QACN,CAAA,GAAA,2JAAA,CAAA,cAAW,AAAD,EAAE,OAAO,SAAU,KAAK;YAChC,IAAI,OAAO,SAAS,OAAO;YAC3B,MAAM,QAAQ,YAAY,SAAS,MAAM,QAAQ,IAAI,KAAK,SAAS,MAAM;QAC3E;QACA,IAAI,MAAM,MAAM;YACd,OAAO;QACT;QACA,OAAQ;YACN,KAAK;gBACH,OAAO,OAAO,KAAK;YACrB,KAAK;gBACH,OAAO,OAAO,KAAK,MAAM;YAC3B,KAAK;gBACH;oBACE,IAAI,OAAO,CAAA,GAAA,mJAAA,CAAA,cAAW,AAAD,EAAE,OAAO,IAAI,GAAG,CAAC,KAAK;oBAC3C,OAAO,QAAQ,IAAI,OAAO,OAAO,KAAK,MAAM;gBAC9C;YACF;gBACE,MAAM,IAAI,MAAM,4BAA4B,gBAAgB,QAAQ;QACxE;IACF;IACA,SAAS,QAAQ,KAAK,EAAE,GAAG,EAAE,aAAa;QACxC,IAAI;YACF,IAAI,MAAM,MAAM,KAAK,GAAG;gBACtB,MAAM,IAAI,YAAY;YACxB;YACA,OAAO,MAAM,OAAO,KAAK,CAAA,IAAK,KAAK,GAAG;QACxC,EAAE,OAAO,KAAK;YACZ,MAAM,CAAA,GAAA,8LAAA,CAAA,sBAAmB,AAAD,EAAE,KAAK;QACjC;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5372, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/statistics/quantileSeq.js"],"sourcesContent":["import { isNumber } from '../../utils/is.js';\nimport { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { createApply } from '../matrix/apply.js';\nvar name = 'quantileSeq';\nvar dependencies = ['typed', '?bignumber', 'add', 'subtract', 'divide', 'multiply', 'partitionSelect', 'compare', 'isInteger', 'smaller', 'smallerEq', 'larger'];\nexport var createQuantileSeq = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    bignumber,\n    add,\n    subtract,\n    divide,\n    multiply,\n    partitionSelect,\n    compare,\n    isInteger,\n    smaller,\n    smallerEq,\n    larger\n  } = _ref;\n  var apply = createApply({\n    typed,\n    isInteger\n  });\n\n  /**\n   * Compute the prob order quantile of a matrix or a list with values.\n   * The sequence is sorted and the middle value is returned.\n   * Supported types of sequence values are: Number, BigNumber, Unit\n   * Supported types of probability are: Number, BigNumber\n   *\n   * In case of a multidimensional array or matrix, the prob order quantile\n   * of all elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.quantileSeq(A, prob[, sorted])\n   *     math.quantileSeq(A, [prob1, prob2, ...][, sorted])\n   *     math.quantileSeq(A, N[, sorted])\n   *\n   * Examples:\n   *\n   *     math.quantileSeq([3, -1, 5, 7], 0.5)         // returns 4\n   *     math.quantileSeq([3, -1, 5, 7], [1/3, 2/3])  // returns [3, 5]\n   *     math.quantileSeq([3, -1, 5, 7], 2)           // returns [3, 5]\n   *     math.quantileSeq([-1, 3, 5, 7], 0.5, true)   // returns 4\n   *\n   * See also:\n   *\n   *     median, mean, min, max, sum, prod, std, variance\n   *\n   * @param {Array, Matrix} data                A single matrix or Array\n   * @param {Number, BigNumber, Array} probOrN  prob is the order of the quantile, while N is\n   *                                            the amount of evenly distributed steps of\n   *                                            probabilities; only one of these options can\n   *                                            be provided\n   * @param {Boolean} sorted=false              is data sorted in ascending order\n   * @return {Number, BigNumber, Unit, Array}   Quantile(s)\n   */\n  return typed(name, {\n    'Array | Matrix, number | BigNumber': (data, p) => _quantileSeqProbNumber(data, p, false),\n    'Array | Matrix, number | BigNumber, number': (data, prob, dim) => _quantileSeqDim(data, prob, false, dim, _quantileSeqProbNumber),\n    'Array | Matrix, number | BigNumber, boolean': _quantileSeqProbNumber,\n    'Array | Matrix, number | BigNumber, boolean, number': (data, prob, sorted, dim) => _quantileSeqDim(data, prob, sorted, dim, _quantileSeqProbNumber),\n    'Array | Matrix, Array | Matrix': (data, p) => _quantileSeqProbCollection(data, p, false),\n    'Array | Matrix, Array | Matrix, number': (data, prob, dim) => _quantileSeqDim(data, prob, false, dim, _quantileSeqProbCollection),\n    'Array | Matrix, Array | Matrix, boolean': _quantileSeqProbCollection,\n    'Array | Matrix, Array | Matrix, boolean, number': (data, prob, sorted, dim) => _quantileSeqDim(data, prob, sorted, dim, _quantileSeqProbCollection)\n  });\n  function _quantileSeqDim(data, prob, sorted, dim, fn) {\n    return apply(data, dim, x => fn(x, prob, sorted));\n  }\n  function _quantileSeqProbNumber(data, probOrN, sorted) {\n    var probArr;\n    var dataArr = data.valueOf();\n    if (smaller(probOrN, 0)) {\n      throw new Error('N/prob must be non-negative');\n    }\n    if (smallerEq(probOrN, 1)) {\n      // quantileSeq([a, b, c, d, ...], prob[,sorted])\n      return isNumber(probOrN) ? _quantileSeq(dataArr, probOrN, sorted) : bignumber(_quantileSeq(dataArr, probOrN, sorted));\n    }\n    if (larger(probOrN, 1)) {\n      // quantileSeq([a, b, c, d, ...], N[,sorted])\n      if (!isInteger(probOrN)) {\n        throw new Error('N must be a positive integer');\n      }\n\n      // largest possible Array length is 2^32-1\n      // 2^32 < 10^15, thus safe conversion guaranteed\n      if (larger(probOrN, 4294967295)) {\n        throw new Error('N must be less than or equal to 2^32-1, as that is the maximum length of an Array');\n      }\n      var nPlusOne = add(probOrN, 1);\n      probArr = [];\n      for (var i = 0; smaller(i, probOrN); i++) {\n        var prob = divide(i + 1, nPlusOne);\n        probArr.push(_quantileSeq(dataArr, prob, sorted));\n      }\n      return isNumber(probOrN) ? probArr : bignumber(probArr);\n    }\n  }\n\n  /**\n   * Calculate the prob order quantile of an n-dimensional array.\n   *\n   * @param {Array, Matrix} array\n   * @param {Array, Matrix} prob\n   * @param {Boolean} sorted\n   * @return {Number, BigNumber, Unit} prob order quantile\n   * @private\n   */\n\n  function _quantileSeqProbCollection(data, probOrN, sorted) {\n    var dataArr = data.valueOf();\n    // quantileSeq([a, b, c, d, ...], [prob1, prob2, ...][,sorted])\n    var probOrNArr = probOrN.valueOf();\n    var probArr = [];\n    for (var i = 0; i < probOrNArr.length; ++i) {\n      probArr.push(_quantileSeq(dataArr, probOrNArr[i], sorted));\n    }\n    return probArr;\n  }\n\n  /**\n   * Calculate the prob order quantile of an n-dimensional array.\n   *\n   * @param {Array} array\n   * @param {Number, BigNumber} prob\n   * @param {Boolean} sorted\n   * @return {Number, BigNumber, Unit} prob order quantile\n   * @private\n   */\n  function _quantileSeq(array, prob, sorted) {\n    var flat = flatten(array);\n    var len = flat.length;\n    if (len === 0) {\n      throw new Error('Cannot calculate quantile of an empty sequence');\n    }\n    var index = isNumber(prob) ? prob * (len - 1) : prob.times(len - 1);\n    var integerPart = isNumber(prob) ? Math.floor(index) : index.floor().toNumber();\n    var fracPart = isNumber(prob) ? index % 1 : index.minus(integerPart);\n    if (isInteger(index)) {\n      return sorted ? flat[index] : partitionSelect(flat, isNumber(prob) ? index : index.valueOf());\n    }\n    var left;\n    var right;\n    if (sorted) {\n      left = flat[integerPart];\n      right = flat[integerPart + 1];\n    } else {\n      right = partitionSelect(flat, integerPart + 1);\n\n      // max of partition is kth largest\n      left = flat[integerPart];\n      for (var i = 0; i < integerPart; ++i) {\n        if (compare(flat[i], left) > 0) {\n          left = flat[i];\n        }\n      }\n    }\n    // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]\n    return add(multiply(left, subtract(1, fracPart)), multiply(right, fracPart));\n  }\n});"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5543, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/statistics/std.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { isCollection } from '../../utils/is.js';\nvar name = 'std';\nvar dependencies = ['typed', 'map', 'sqrt', 'variance'];\nexport var createStd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    map,\n    sqrt,\n    variance\n  } = _ref;\n  /**\n   * Compute the standard deviation of a matrix or a  list with values.\n   * The standard deviations is defined as the square root of the variance:\n   * `std(A) = sqrt(variance(A))`.\n   * In case of a (multi dimensional) array or matrix, the standard deviation\n   * over all elements will be calculated by default, unless an axis is specified\n   * in which case the standard deviation will be computed along that axis.\n   *\n   * Additionally, it is possible to compute the standard deviation along the rows\n   * or columns of a matrix by specifying the dimension as the second argument.\n   *\n   * Optionally, the type of normalization can be specified as the final\n   * parameter. The parameter `normalization` can be one of the following values:\n   *\n   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\n   * - 'uncorrected'        The sum of squared errors is divided by n\n   * - 'biased'             The sum of squared errors is divided by (n + 1)\n   *\n   *\n   * Syntax:\n   *\n   *     math.std(a, b, c, ...)\n   *     math.std(A)\n   *     math.std(A, normalization)\n   *     math.std(A, dimension)\n   *     math.std(A, dimension, normalization)\n   *\n   * Examples:\n   *\n   *     math.std(2, 4, 6)                     // returns 2\n   *     math.std([2, 4, 6, 8])                // returns 2.581988897471611\n   *     math.std([2, 4, 6, 8], 'uncorrected') // returns 2.23606797749979\n   *     math.std([2, 4, 6, 8], 'biased')      // returns 2\n   *\n   *     math.std([[1, 2, 3], [4, 5, 6]])      // returns 1.8708286933869707\n   *     math.std([[1, 2, 3], [4, 6, 8]], 0)    // returns [2.1213203435596424, 2.8284271247461903, 3.5355339059327378]\n   *     math.std([[1, 2, 3], [4, 6, 8]], 1)    // returns [1, 2]\n   *     math.std([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.7071067811865476, 1.4142135623730951]\n   *\n   * See also:\n   *\n   *    mean, median, max, min, prod, sum, variance\n   *\n   * @param {Array | Matrix} array\n   *                        A single matrix or or multiple scalar values\n   * @param {string} [normalization='unbiased']\n   *                        Determines how to normalize the variance.\n   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\n   * @param dimension {number | BigNumber}\n   *                        Determines the axis to compute the standard deviation for a matrix\n   * @return {*} The standard deviation\n   */\n  return typed(name, {\n    // std([a, b, c, d, ...])\n    'Array | Matrix': _std,\n    // std([a, b, c, d, ...], normalization)\n    'Array | Matrix, string': _std,\n    // std([a, b, c, c, ...], dim)\n    'Array | Matrix, number | BigNumber': _std,\n    // std([a, b, c, c, ...], dim, normalization)\n    'Array | Matrix, number | BigNumber, string': _std,\n    // std(a, b, c, d, ...)\n    '...': function _(args) {\n      return _std(args);\n    }\n  });\n  function _std(array, normalization) {\n    if (array.length === 0) {\n      throw new SyntaxError('Function std requires one or more parameters (0 provided)');\n    }\n    try {\n      var v = variance.apply(null, arguments);\n      if (isCollection(v)) {\n        return map(v, sqrt);\n      } else {\n        return sqrt(v);\n      }\n    } catch (err) {\n      if (err instanceof TypeError && err.message.includes(' variance')) {\n        throw new TypeError(err.message.replace(' variance', ' std'));\n      } else {\n        throw err;\n      }\n    }\n  }\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAO;IAAQ;CAAW;AAChD,IAAI,YAAY,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAChE,IAAI,EACF,KAAK,EACL,GAAG,EACH,IAAI,EACJ,QAAQ,EACT,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmDC,GACD,OAAO,MAAM,MAAM;QACjB,yBAAyB;QACzB,kBAAkB;QAClB,wCAAwC;QACxC,0BAA0B;QAC1B,8BAA8B;QAC9B,sCAAsC;QACtC,6CAA6C;QAC7C,8CAA8C;QAC9C,uBAAuB;QACvB,OAAO,SAAS,EAAE,IAAI;YACpB,OAAO,KAAK;QACd;IACF;;IACA,SAAS,KAAK,KAAK,EAAE,aAAa;QAChC,IAAI,MAAM,MAAM,KAAK,GAAG;YACtB,MAAM,IAAI,YAAY;QACxB;QACA,IAAI;YACF,IAAI,IAAI,SAAS,KAAK,CAAC,MAAM;YAC7B,IAAI,CAAA,GAAA,mJAAA,CAAA,eAAY,AAAD,EAAE,IAAI;gBACnB,OAAO,IAAI,GAAG;YAChB,OAAO;gBACL,OAAO,KAAK;YACd;QACF,EAAE,OAAO,KAAK;YACZ,IAAI,eAAe,aAAa,IAAI,OAAO,CAAC,QAAQ,CAAC,cAAc;gBACjE,MAAM,IAAI,UAAU,IAAI,OAAO,CAAC,OAAO,CAAC,aAAa;YACvD,OAAO;gBACL,MAAM;YACR;QACF;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5651, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/statistics/corr.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'corr';\nvar dependencies = ['typed', 'matrix', 'mean', 'sqrt', 'sum', 'add', 'subtract', 'multiply', 'pow', 'divide'];\nexport var createCorr = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    sqrt,\n    sum,\n    add,\n    subtract,\n    multiply,\n    pow,\n    divide\n  } = _ref;\n  /**\n   * Compute the correlation coefficient of a two list with values, For matrices, the matrix correlation coefficient is calculated.\n   *\n   * Syntax:\n   *\n   *     math.corr(A, B)\n   *\n   * Examples:\n   *\n   *     math.corr([1, 2, 3, 4, 5], [4, 5, 6, 7, 8])     // returns 1\n   *     math.corr([1, 2.2, 3, 4.8, 5], [4, 5.3, 6.6, 7, 8])     //returns 0.9569941688503644\n   *     math.corr([[1, 2.2, 3, 4.8, 5], [4, 5.3, 6.6, 7, 8]],[[1, 2.2, 3, 4.8, 5], [4, 5.3, 6.6, 7, 8]])   // returns [1,1]\n   *\n   * See also:\n   *\n   *     median, mean, min, max, sum, prod, std, variance\n   *\n   * @param {Array | Matrix} A The first array or matrix to compute correlation coefficient\n   * @param {Array | Matrix} B The second array or matrix to compute correlation coefficient\n   * @return {*} The correlation coefficient\n   */\n  return typed(name, {\n    'Array, Array': function Array_Array(A, B) {\n      return _corr(A, B);\n    },\n    'Matrix, Matrix': function Matrix_Matrix(A, B) {\n      var res = _corr(A.toArray(), B.toArray());\n      return Array.isArray(res) ? matrix(res) : res;\n    }\n  });\n  /**\n   * Calculate the correlation coefficient between two arrays or matrices.\n   * @param {Array | Matrix} A\n   * @param {Array | Matrix} B\n   * @return {*} correlation coefficient\n   * @private\n   */\n  function _corr(A, B) {\n    var correlations = [];\n    if (Array.isArray(A[0]) && Array.isArray(B[0])) {\n      if (A.length !== B.length) {\n        throw new SyntaxError('Dimension mismatch. Array A and B must have the same length.');\n      }\n      for (var i = 0; i < A.length; i++) {\n        if (A[i].length !== B[i].length) {\n          throw new SyntaxError('Dimension mismatch. Array A and B must have the same number of elements.');\n        }\n        correlations.push(correlation(A[i], B[i]));\n      }\n      return correlations;\n    } else {\n      if (A.length !== B.length) {\n        throw new SyntaxError('Dimension mismatch. Array A and B must have the same number of elements.');\n      }\n      return correlation(A, B);\n    }\n  }\n  function correlation(A, B) {\n    var n = A.length;\n    var sumX = sum(A);\n    var sumY = sum(B);\n    var sumXY = A.reduce((acc, x, index) => add(acc, multiply(x, B[index])), 0);\n    var sumXSquare = sum(A.map(x => pow(x, 2)));\n    var sumYSquare = sum(B.map(y => pow(y, 2)));\n    var numerator = subtract(multiply(n, sumXY), multiply(sumX, sumY));\n    var denominator = sqrt(multiply(subtract(multiply(n, sumXSquare), pow(sumX, 2)), subtract(multiply(n, sumYSquare), pow(sumY, 2))));\n    return divide(numerator, denominator);\n  }\n});"],"names":[],"mappings":";;;AAAA;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;IAAQ;IAAQ;IAAO;IAAO;IAAY;IAAY;IAAO;CAAS;AACtG,IAAI,aAAa,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACjE,IAAI,EACF,KAAK,EACL,MAAM,EACN,IAAI,EACJ,GAAG,EACH,GAAG,EACH,QAAQ,EACR,QAAQ,EACR,GAAG,EACH,MAAM,EACP,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;GAoBC,GACD,OAAO,MAAM,MAAM;QACjB,gBAAgB,SAAS,YAAY,CAAC,EAAE,CAAC;YACvC,OAAO,MAAM,GAAG;QAClB;QACA,kBAAkB,SAAS,cAAc,CAAC,EAAE,CAAC;YAC3C,IAAI,MAAM,MAAM,EAAE,OAAO,IAAI,EAAE,OAAO;YACtC,OAAO,MAAM,OAAO,CAAC,OAAO,OAAO,OAAO;QAC5C;IACF;;IACA;;;;;;GAMC,GACD,SAAS,MAAM,CAAC,EAAE,CAAC;QACjB,IAAI,eAAe,EAAE;QACrB,IAAI,MAAM,OAAO,CAAC,CAAC,CAAC,EAAE,KAAK,MAAM,OAAO,CAAC,CAAC,CAAC,EAAE,GAAG;YAC9C,IAAI,EAAE,MAAM,KAAK,EAAE,MAAM,EAAE;gBACzB,MAAM,IAAI,YAAY;YACxB;YACA,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,MAAM,EAAE,IAAK;gBACjC,IAAI,CAAC,CAAC,EAAE,CAAC,MAAM,KAAK,CAAC,CAAC,EAAE,CAAC,MAAM,EAAE;oBAC/B,MAAM,IAAI,YAAY;gBACxB;gBACA,aAAa,IAAI,CAAC,YAAY,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;YAC1C;YACA,OAAO;QACT,OAAO;YACL,IAAI,EAAE,MAAM,KAAK,EAAE,MAAM,EAAE;gBACzB,MAAM,IAAI,YAAY;YACxB;YACA,OAAO,YAAY,GAAG;QACxB;IACF;IACA,SAAS,YAAY,CAAC,EAAE,CAAC;QACvB,IAAI,IAAI,EAAE,MAAM;QAChB,IAAI,OAAO,IAAI;QACf,IAAI,OAAO,IAAI;QACf,IAAI,QAAQ,EAAE,MAAM,CAAC,CAAC,KAAK,GAAG,QAAU,IAAI,KAAK,SAAS,GAAG,CAAC,CAAC,MAAM,IAAI;QACzE,IAAI,aAAa,IAAI,EAAE,GAAG,CAAC,CAAA,IAAK,IAAI,GAAG;QACvC,IAAI,aAAa,IAAI,EAAE,GAAG,CAAC,CAAA,IAAK,IAAI,GAAG;QACvC,IAAI,YAAY,SAAS,SAAS,GAAG,QAAQ,SAAS,MAAM;QAC5D,IAAI,cAAc,KAAK,SAAS,SAAS,SAAS,GAAG,aAAa,IAAI,MAAM,KAAK,SAAS,SAAS,GAAG,aAAa,IAAI,MAAM;QAC7H,OAAO,OAAO,WAAW;IAC3B;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5745, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/string/format.js"],"sourcesContent":["import { format as formatString } from '../../utils/string.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'format';\nvar dependencies = ['typed'];\nexport var createFormat = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Format a value of any type into a string.\n   *\n   * Syntax:\n   *\n   *    math.format(value)\n   *    math.format(value, options)\n   *    math.format(value, precision)\n   *    math.format(value, callback)\n   *\n   * Where:\n   *\n   *  - `value: *`\n   *    The value to be formatted\n   *  - `options: Object`\n   *    An object with formatting options. Available options:\n   *    - `notation: string`\n   *      Number notation. Choose from:\n   *      - `'fixed'`\n   *        Always use regular number notation.\n   *        For example `'123.40'` and `'14000000'`\n   *      - `'exponential'`\n   *        Always use exponential notation.\n   *        For example `'1.234e+2'` and `'1.4e+7'`\n   *      - `'engineering'`\n   *        Always use engineering notation: always have exponential notation,\n   *        and select the exponent to be a multiple of `3`.\n   *        For example `'123.4e+0'` and `'14.0e+6'`\n   *      - `'auto'` (default)\n   *        Regular number notation for numbers having an absolute value between\n   *        `lower` and `upper` bounds, and uses exponential notation elsewhere.\n   *        Lower bound is included, upper bound is excluded.\n   *        For example `'123.4'` and `'1.4e7'`.\n   *      - `'bin'`, `'oct'`, or `'hex'`\n   *        Format the number using binary, octal, or hexadecimal notation.\n   *        For example `'0b1101'` and `'0x10fe'`.\n   *    - `wordSize: number | BigNumber`\n   *      The word size in bits to use for formatting in binary, octal, or\n   *      hexadecimal notation. To be used only with `'bin'`, `'oct'`, or `'hex'`\n   *      values for `notation` option. When this option is defined the value\n   *      is formatted as a signed twos complement integer of the given word\n   *      size and the size suffix is appended to the output.\n   *      For example `format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'`.\n   *      Default value is undefined.\n   *    - `precision: number | BigNumber`\n   *      Limit the number of digits of the formatted value.\n   *      For regular numbers, must be a number between `0` and `16`.\n   *      For bignumbers, the maximum depends on the configured precision,\n   *      see function `config()`.\n   *      In case of notations `'exponential'`, `'engineering'`, and `'auto'`,\n   *      `precision` defines the total number of significant digits returned.\n   *      In case of notation `'fixed'`, `precision` defines the number of\n   *      significant digits after the decimal point.\n   *      `precision` is undefined by default.\n   *    - `lowerExp: number`\n   *      Exponent determining the lower boundary for formatting a value with\n   *      an exponent when `notation='auto'`. Default value is `-3`.\n   *    - `upperExp: number`\n   *      Exponent determining the upper boundary for formatting a value with\n   *      an exponent when `notation='auto'`. Default value is `5`.\n   *    - `fraction: string`. Available values: `'ratio'` (default) or `'decimal'`.\n   *      For example `format(fraction(1, 3))` will output `'1/3'` when `'ratio'`\n   *      is configured, and will output `'0.(3)'` when `'decimal'` is configured.\n   *    - `truncate: number`. Specifies the maximum allowed length of the\n   *      returned string. If it had been longer, the excess characters\n   *      are deleted and replaced with `'...'`.\n   * - `callback: function`\n   *   A custom formatting function, invoked for all numeric elements in `value`,\n   *   for example all elements of a matrix, or the real and imaginary\n   *   parts of a complex number. This callback can be used to override the\n   *   built-in numeric notation with any type of formatting. Function `callback`\n   *   is called with `value` as parameter and must return a string.\n   *\n   * When `value` is an Object:\n   *\n   * - When the object contains a property `format` being a function, this function\n   *   is invoked as `value.format(options)` and the result is returned.\n   * - When the object has its own `toString` method, this method is invoked\n   *   and the result is returned.\n   * - In other cases the function will loop over all object properties and\n   *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n   *\n   * When value is a function:\n   *\n   * - When the function has a property `syntax`, it returns this\n   *   syntax description.\n   * - In other cases, a string `'function'` is returned.\n   *\n   * Examples:\n   *\n   *    math.format(6.4)                                        // returns '6.4'\n   *    math.format(1240000)                                    // returns '1.24e+6'\n   *    math.format(1/3)                                        // returns '0.3333333333333333'\n   *    math.format(1/3, 3)                                     // returns '0.333'\n   *    math.format(21385, 2)                                   // returns '21000'\n   *    math.format(12e8, {notation: 'fixed'})                  // returns '1200000000'\n   *    math.format(2.3,  {notation: 'fixed', precision: 4})    // returns '2.3000'\n   *    math.format(52.8, {notation: 'exponential'})            // returns '5.28e+1'\n   *    math.format(12400, {notation: 'engineering'})           // returns '12.4e+3'\n   *    math.format(2000, {lowerExp: -2, upperExp: 2})          // returns '2e+3'\n   *\n   *    function formatCurrency(value) {\n   *      // return currency notation with two digits:\n   *      return '$' + value.toFixed(2)\n   *\n   *      // you could also use math.format inside the callback:\n   *      // return '$' + math.format(value, {notation: 'fixed', precision: 2})\n   *    }\n   *    math.format([2.1, 3, 0.016], formatCurrency)            // returns '[$2.10, $3.00, $0.02]'\n   *\n   * See also:\n   *\n   *    print\n   *\n   * @param {*} value                               Value to be stringified\n   * @param {Object | Function | number} [options]  Formatting options\n   * @return {string} The formatted value\n   */\n  return typed(name, {\n    any: formatString,\n    'any, Object | function | number | BigNumber': formatString\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,eAAe,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACnE,IAAI,EACF,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqHC,GACD,OAAO,MAAM,MAAM;QACjB,KAAK,uJAAA,CAAA,SAAY;QACjB,+CAA+C,uJAAA,CAAA,SAAY;IAC7D;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5886, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/string/bin.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'bin';\nvar dependencies = ['typed', 'format'];\n\n/**\n * Format a number as binary.\n *\n * Syntax:\n *\n *    math.bin(value)\n *\n * Examples:\n *\n *    //the following outputs \"0b10\"\n *    math.bin(2)\n *\n * See also:\n *\n *    oct\n *    hex\n *\n * @param {number | BigNumber} value    Value to be stringified\n * @param {number | BigNumber} wordSize Optional word size (see `format`)\n * @return {string}         The formatted value\n */\nexport var createBin = factory(name, dependencies, _ref => {\n  var {\n    typed,\n    format\n  } = _ref;\n  return typed(name, {\n    'number | BigNumber': function number__BigNumber(n) {\n      return format(n, {\n        notation: 'bin'\n      });\n    },\n    'number | BigNumber, number | BigNumber': function number__BigNumber_number__BigNumber(n, wordSize) {\n      return format(n, {\n        notation: 'bin',\n        wordSize\n      });\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;CAAS;AAuB/B,IAAI,YAAY,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACjD,IAAI,EACF,KAAK,EACL,MAAM,EACP,GAAG;IACJ,OAAO,MAAM,MAAM;QACjB,sBAAsB,SAAS,kBAAkB,CAAC;YAChD,OAAO,OAAO,GAAG;gBACf,UAAU;YACZ;QACF;QACA,0CAA0C,SAAS,oCAAoC,CAAC,EAAE,QAAQ;YAChG,OAAO,OAAO,GAAG;gBACf,UAAU;gBACV;YACF;QACF;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5918, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/string/oct.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'oct';\nvar dependencies = ['typed', 'format'];\n\n/**\n * Format a number as octal.\n *\n * Syntax:\n *\n *    math.oct(value)\n *\n * Examples:\n *\n *    //the following outputs \"0o70\"\n *    math.oct(56)\n *\n * See also:\n *\n *    bin\n *    hex\n *\n * @param {number | BigNumber} value    Value to be stringified\n * @param {number | BigNumber} wordSize Optional word size (see `format`)\n * @return {string}         The formatted value\n */\n\nexport var createOct = factory(name, dependencies, _ref => {\n  var {\n    typed,\n    format\n  } = _ref;\n  return typed(name, {\n    'number | BigNumber': function number__BigNumber(n) {\n      return format(n, {\n        notation: 'oct'\n      });\n    },\n    'number | BigNumber, number | BigNumber': function number__BigNumber_number__BigNumber(n, wordSize) {\n      return format(n, {\n        notation: 'oct',\n        wordSize\n      });\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;CAAS;AAwB/B,IAAI,YAAY,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACjD,IAAI,EACF,KAAK,EACL,MAAM,EACP,GAAG;IACJ,OAAO,MAAM,MAAM;QACjB,sBAAsB,SAAS,kBAAkB,CAAC;YAChD,OAAO,OAAO,GAAG;gBACf,UAAU;YACZ;QACF;QACA,0CAA0C,SAAS,oCAAoC,CAAC,EAAE,QAAQ;YAChG,OAAO,OAAO,GAAG;gBACf,UAAU;gBACV;YACF;QACF;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5950, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/string/hex.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'hex';\nvar dependencies = ['typed', 'format'];\n\n/**\n * Format a number as hexadecimal.\n *\n * Syntax:\n *\n *    math.hex(value)\n *\n * Examples:\n *\n *    math.hex(240) // returns \"0xF0\"\n *\n * See also:\n *\n *    oct\n *    bin\n *\n * @param {number | BigNumber} value    Value to be stringified\n * @param {number | BigNumber} wordSize Optional word size (see `format`)\n * @return {string}         The formatted value\n */\nexport var createHex = factory(name, dependencies, _ref => {\n  var {\n    typed,\n    format\n  } = _ref;\n  return typed(name, {\n    'number | BigNumber': function number__BigNumber(n) {\n      return format(n, {\n        notation: 'hex'\n      });\n    },\n    'number | BigNumber, number | BigNumber': function number__BigNumber_number__BigNumber(n, wordSize) {\n      return format(n, {\n        notation: 'hex',\n        wordSize\n      });\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;CAAS;AAsB/B,IAAI,YAAY,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACjD,IAAI,EACF,KAAK,EACL,MAAM,EACP,GAAG;IACJ,OAAO,MAAM,MAAM;QACjB,sBAAsB,SAAS,kBAAkB,CAAC;YAChD,OAAO,OAAO,GAAG;gBACf,UAAU;YACZ;QACF;QACA,0CAA0C,SAAS,oCAAoC,CAAC,EAAE,QAAQ;YAChG,OAAO,OAAO,GAAG;gBACf,UAAU;gBACV;YACF;QACF;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5982, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/string/print.js"],"sourcesContent":["import { format } from '../../utils/string.js';\nimport { isString } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { printTemplate } from '../../utils/print.js';\nvar name = 'print';\nvar dependencies = ['typed'];\nexport var createPrint = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Interpolate values into a string template.\n   *\n   * Syntax:\n   *\n   *     math.print(template, values)\n   *     math.print(template, values, precision)\n   *     math.print(template, values, options)\n   *\n   * Example usage:\n   *\n   *     // the following outputs: 'Lucy is 5 years old'\n   *     math.print('Lucy is $age years old', {age: 5})\n   *\n   *     // the following outputs: 'The value of pi is 3.141592654'\n   *     math.print('The value of pi is $pi', {pi: math.pi}, 10)\n   *\n   *     // the following outputs: 'hello Mary! The date is 2013-03-23'\n   *     math.print('Hello $user.name! The date is $date', {\n   *       user: {\n   *         name: 'Mary',\n   *       },\n   *       date: new Date(2013, 2, 23).toISOString().substring(0, 10)\n   *     })\n   *\n   *     // the following outputs: 'My favorite fruits are apples and bananas !'\n   *     math.print('My favorite fruits are $0 and $1 !', [\n   *       'apples',\n   *       'bananas'\n   *     ])\n   *\n   * See also:\n   *\n   *     format\n   *\n   * @param {string} template           A string containing variable placeholders.\n   * @param {Object | Array | Matrix}   values An object or array containing variables\n   *                                    which will be filled in in the template.\n   * @param {number | Object} [options] Formatting options,\n   *                                    or the number of digits to format numbers.\n   *                                    See function math.format for a description\n   *                                    of all options.\n   * @return {string} Interpolated string\n   */\n  return typed(name, {\n    // note: Matrix will be converted automatically to an Array\n    'string, Object | Array': _print,\n    'string, Object | Array, number | Object': _print\n  });\n});\n\n/**\n * Interpolate values into a string template.\n * @param {string} template\n * @param {Object} values\n * @param {number | Object} [options]\n * @returns {string} Interpolated string\n * @private\n */\nfunction _print(template, values, options) {\n  return template.replace(printTemplate, function (original, key) {\n    var keys = key.split('.');\n    var value = values[keys.shift()];\n    if (value !== undefined && value.isMatrix) {\n      value = value.toArray();\n    }\n    while (keys.length && value !== undefined) {\n      var k = keys.shift();\n      value = k ? value[k] : value + '.';\n    }\n    if (value !== undefined) {\n      if (!isString(value)) {\n        return format(value, options);\n      } else {\n        return value;\n      }\n    }\n    return original;\n  });\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,cAAc,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAClE,IAAI,EACF,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2CC,GACD,OAAO,MAAM,MAAM;QACjB,2DAA2D;QAC3D,0BAA0B;QAC1B,2CAA2C;IAC7C;AACF;AAEA;;;;;;;CAOC,GACD,SAAS,OAAO,QAAQ,EAAE,MAAM,EAAE,OAAO;IACvC,OAAO,SAAS,OAAO,CAAC,sJAAA,CAAA,gBAAa,EAAE,SAAU,QAAQ,EAAE,GAAG;QAC5D,IAAI,OAAO,IAAI,KAAK,CAAC;QACrB,IAAI,QAAQ,MAAM,CAAC,KAAK,KAAK,GAAG;QAChC,IAAI,UAAU,aAAa,MAAM,QAAQ,EAAE;YACzC,QAAQ,MAAM,OAAO;QACvB;QACA,MAAO,KAAK,MAAM,IAAI,UAAU,UAAW;YACzC,IAAI,IAAI,KAAK,KAAK;YAClB,QAAQ,IAAI,KAAK,CAAC,EAAE,GAAG,QAAQ;QACjC;QACA,IAAI,UAAU,WAAW;YACvB,IAAI,CAAC,CAAA,GAAA,mJAAA,CAAA,WAAQ,AAAD,EAAE,QAAQ;gBACpB,OAAO,CAAA,GAAA,uJAAA,CAAA,SAAM,AAAD,EAAE,OAAO;YACvB,OAAO;gBACL,OAAO;YACT;QACF;QACA,OAAO;IACT;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6082, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/unit/to.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'to';\nvar dependencies = ['typed', 'matrix', 'concat'];\nexport var createTo = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    concat\n  } = _ref;\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\n   * Change the unit of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.to(x, unit)\n   *\n   * Examples:\n   *\n   *    math.to(math.unit('2 inch'), 'cm')             // returns Unit 5.08 cm\n   *    math.to(math.unit('2 inch'), math.unit('cm'))  // returns Unit 5.08 cm\n   *    math.to(math.unit(16, 'bytes'), 'bits')        // returns Unit 128 bits\n   *\n   * See also:\n   *\n   *    unit\n   *\n   * @param {Unit | Array | Matrix} x     The unit to be converted.\n   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like \"cm\"\n   *                                      or a unit without value.\n   * @return {Unit | Array | Matrix} value with changed, fixed unit.\n   */\n  return typed(name, {\n    'Unit, Unit | string': (x, unit) => x.to(unit)\n  }, matrixAlgorithmSuite({\n    Ds: true\n  }));\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;CAAS;AACzC,IAAI,WAAW,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAC/D,IAAI,EACF,KAAK,EACL,MAAM,EACN,MAAM,EACP,GAAG;IACJ,IAAI,uBAAuB,CAAA,GAAA,uLAAA,CAAA,6BAA0B,AAAD,EAAE;QACpD;QACA;QACA;IACF;IAEA;;;;;;;;;;;;;;;;;;;;;;;GAuBC,GACD,OAAO,MAAM,MAAM;QACjB,uBAAuB,CAAC,GAAG,OAAS,EAAE,EAAE,CAAC;IAC3C,GAAG,qBAAqB;QACtB,IAAI;IACN;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6137, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/trigonometry/acos.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'acos';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createAcos = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex\n  } = _ref;\n  /**\n   * Calculate the inverse cosine of a value.\n   *\n   * To avoid confusion with the matrix arccosine, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.acos(x)\n   *\n   * Examples:\n   *\n   *    math.acos(0.5)           // returns number 1.0471975511965979\n   *    math.acos(math.cos(1.5)) // returns number 1.5\n   *\n   *    math.acos(2)             // returns Complex 0 + 1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    cos, atan, asin\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} The arc cosine of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= -1 && x <= 1 || config.predictable) {\n        return Math.acos(x);\n      } else {\n        return new Complex(x, 0).acos();\n      }\n    },\n    Complex: function Complex(x) {\n      return x.acos();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.acos();\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;CAAU;AAC1C,IAAI,aAAa,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACjE,IAAI,EACF,KAAK,EACL,MAAM,EACN,OAAO,EACR,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;GAuBC,GACD,OAAO,MAAM,MAAM;QACjB,QAAQ,SAAS,OAAO,CAAC;YACvB,IAAI,KAAK,CAAC,KAAK,KAAK,KAAK,OAAO,WAAW,EAAE;gBAC3C,OAAO,KAAK,IAAI,CAAC;YACnB,OAAO;gBACL,OAAO,IAAI,QAAQ,GAAG,GAAG,IAAI;YAC/B;QACF;QACA,SAAS,SAAS,QAAQ,CAAC;YACzB,OAAO,EAAE,IAAI;QACf;QACA,WAAW,SAAS,UAAU,CAAC;YAC7B,OAAO,EAAE,IAAI;QACf;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6195, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/trigonometry/acosh.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { acoshNumber } from '../../plain/number/index.js';\nvar name = 'acosh';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createAcosh = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex\n  } = _ref;\n  /**\n   * Calculate the hyperbolic arccos of a value,\n   * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.acosh(x)\n   *\n   * Examples:\n   *\n   *    math.acosh(1.5)       // returns 0.9624236501192069\n   *\n   * See also:\n   *\n   *    cosh, asinh, atanh\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic arccosine of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 1 || config.predictable) {\n        return acoshNumber(x);\n      }\n      if (x <= -1) {\n        return new Complex(Math.log(Math.sqrt(x * x - 1) - x), Math.PI);\n      }\n      return new Complex(x, 0).acosh();\n    },\n    Complex: function Complex(x) {\n      return x.acosh();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.acosh();\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;CAAU;AAC1C,IAAI,cAAc,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAClE,IAAI,EACF,KAAK,EACL,MAAM,EACN,OAAO,EACR,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;GAoBC,GACD,OAAO,MAAM,MAAM;QACjB,QAAQ,SAAS,OAAO,CAAC;YACvB,IAAI,KAAK,KAAK,OAAO,WAAW,EAAE;gBAChC,OAAO,CAAA,GAAA,uKAAA,CAAA,cAAW,AAAD,EAAE;YACrB;YACA,IAAI,KAAK,CAAC,GAAG;gBACX,OAAO,IAAI,QAAQ,KAAK,GAAG,CAAC,KAAK,IAAI,CAAC,IAAI,IAAI,KAAK,IAAI,KAAK,EAAE;YAChE;YACA,OAAO,IAAI,QAAQ,GAAG,GAAG,KAAK;QAChC;QACA,SAAS,SAAS,QAAQ,CAAC;YACzB,OAAO,EAAE,KAAK;QAChB;QACA,WAAW,SAAS,UAAU,CAAC;YAC7B,OAAO,EAAE,KAAK;QAChB;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6254, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/trigonometry/acot.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { acotNumber } from '../../plain/number/index.js';\nvar name = 'acot';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createAcot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.\n   *\n   * To avoid confusion with the matrix arccotanget, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.acot(x)\n   *\n   * Examples:\n   *\n   *    math.acot(0.5)           // returns number 1.1071487177940904\n   *    math.acot(2)             // returns number 0.4636476090008061\n   *    math.acot(math.cot(1.5)) // returns number 1.5\n   *\n   * See also:\n   *\n   *    cot, atan\n   *\n   * @param {number | BigNumber| Complex} x   Function input\n   * @return {number | BigNumber| Complex} The arc cotangent of x\n   */\n  return typed(name, {\n    number: acotNumber,\n    Complex: function Complex(x) {\n      return x.acot();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).atan();\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;CAAY;AAClC,IAAI,aAAa,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACjE,IAAI,EACF,KAAK,EACL,WAAW,UAAU,EACtB,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;GAsBC,GACD,OAAO,MAAM,MAAM;QACjB,QAAQ,uKAAA,CAAA,aAAU;QAClB,SAAS,SAAS,QAAQ,CAAC;YACzB,OAAO,EAAE,IAAI;QACf;QACA,WAAW,SAAS,UAAU,CAAC;YAC7B,OAAO,IAAI,WAAW,GAAG,GAAG,CAAC,GAAG,IAAI;QACtC;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6306, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/trigonometry/acoth.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { acothNumber } from '../../plain/number/index.js';\nvar name = 'acoth';\nvar dependencies = ['typed', 'config', 'Complex', 'BigNumber'];\nexport var createAcoth = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the inverse hyperbolic tangent of a value,\n   * defined as `acoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.\n   *\n   * To avoid confusion with the matrix inverse hyperbolic tangent, this\n   * function does not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.acoth(x)\n   *\n   * Examples:\n   *\n   *    math.acoth(0.5)       // returns 0.8047189562170503\n   *\n   * See also:\n   *\n   *    acsch, asech\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic arccotangent of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 1 || x <= -1 || config.predictable) {\n        return acothNumber(x);\n      }\n      return new Complex(x, 0).acoth();\n    },\n    Complex: function Complex(x) {\n      return x.acoth();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).atanh();\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;IAAW;CAAY;AACvD,IAAI,cAAc,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAClE,IAAI,EACF,KAAK,EACL,MAAM,EACN,OAAO,EACP,WAAW,UAAU,EACtB,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;GAqBC,GACD,OAAO,MAAM,MAAM;QACjB,QAAQ,SAAS,OAAO,CAAC;YACvB,IAAI,KAAK,KAAK,KAAK,CAAC,KAAK,OAAO,WAAW,EAAE;gBAC3C,OAAO,CAAA,GAAA,uKAAA,CAAA,cAAW,AAAD,EAAE;YACrB;YACA,OAAO,IAAI,QAAQ,GAAG,GAAG,KAAK;QAChC;QACA,SAAS,SAAS,QAAQ,CAAC;YACzB,OAAO,EAAE,KAAK;QAChB;QACA,WAAW,SAAS,UAAU,CAAC;YAC7B,OAAO,IAAI,WAAW,GAAG,GAAG,CAAC,GAAG,KAAK;QACvC;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6364, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/trigonometry/acsc.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { acscNumber } from '../../plain/number/index.js';\nvar name = 'acsc';\nvar dependencies = ['typed', 'config', 'Complex', 'BigNumber'];\nexport var createAcsc = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.\n   *\n   * To avoid confusion with the matrix arccosecant, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.acsc(x)\n   *\n   * Examples:\n   *\n   *    math.acsc(2)             // returns 0.5235987755982989\n   *    math.acsc(0.5)           // returns Complex 1.5707963267948966 -1.3169578969248166i\n   *    math.acsc(math.csc(1.5)) // returns number ~1.5\n   *\n   * See also:\n   *\n   *    csc, asin, asec\n   *\n   * @param {number | BigNumber | Complex} x   Function input\n   * @return {number | BigNumber | Complex} The arc cosecant of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x <= -1 || x >= 1 || config.predictable) {\n        return acscNumber(x);\n      }\n      return new Complex(x, 0).acsc();\n    },\n    Complex: function Complex(x) {\n      return x.acsc();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).asin();\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;IAAW;CAAY;AACvD,IAAI,aAAa,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACjE,IAAI,EACF,KAAK,EACL,MAAM,EACN,OAAO,EACP,WAAW,UAAU,EACtB,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;GAsBC,GACD,OAAO,MAAM,MAAM;QACjB,QAAQ,SAAS,OAAO,CAAC;YACvB,IAAI,KAAK,CAAC,KAAK,KAAK,KAAK,OAAO,WAAW,EAAE;gBAC3C,OAAO,CAAA,GAAA,uKAAA,CAAA,aAAU,AAAD,EAAE;YACpB;YACA,OAAO,IAAI,QAAQ,GAAG,GAAG,IAAI;QAC/B;QACA,SAAS,SAAS,QAAQ,CAAC;YACzB,OAAO,EAAE,IAAI;QACf;QACA,WAAW,SAAS,UAAU,CAAC;YAC7B,OAAO,IAAI,WAAW,GAAG,GAAG,CAAC,GAAG,IAAI;QACtC;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6423, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/trigonometry/acsch.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { acschNumber } from '../../plain/number/index.js';\nvar name = 'acsch';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createAcsch = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the inverse hyperbolic cosecant of a value,\n   * defined as `acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))`.\n   *\n   * To avoid confusion with the matrix inverse hyperbolic cosecant, this function\n   * does not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.acsch(x)\n   *\n   * Examples:\n   *\n   *    math.acsch(0.5)       // returns 1.4436354751788103\n   *\n   * See also:\n   *\n   *    asech, acoth\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic arccosecant of x\n   */\n  return typed(name, {\n    number: acschNumber,\n    Complex: function Complex(x) {\n      return x.acsch();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).asinh();\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;CAAY;AAClC,IAAI,cAAc,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAClE,IAAI,EACF,KAAK,EACL,WAAW,UAAU,EACtB,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;GAqBC,GACD,OAAO,MAAM,MAAM;QACjB,QAAQ,uKAAA,CAAA,cAAW;QACnB,SAAS,SAAS,QAAQ,CAAC;YACzB,OAAO,EAAE,KAAK;QAChB;QACA,WAAW,SAAS,UAAU,CAAC;YAC7B,OAAO,IAAI,WAAW,GAAG,GAAG,CAAC,GAAG,KAAK;QACvC;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6474, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/trigonometry/asec.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { asecNumber } from '../../plain/number/index.js';\nvar name = 'asec';\nvar dependencies = ['typed', 'config', 'Complex', 'BigNumber'];\nexport var createAsec = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the inverse secant of a value. Defined as `asec(x) = acos(1/x)`.\n   *\n   * To avoid confusion with the matrix arcsecant, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.asec(x)\n   *\n   * Examples:\n   *\n   *    math.asec(2)             // returns 1.0471975511965979\n   *    math.asec(math.sec(1.5)) // returns 1.5\n   *\n   *    math.asec(0.5)           // returns Complex 0 + 1.3169578969248166i\n   *\n   * See also:\n   *\n   *    acos, acot, acsc\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} The arc secant of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x <= -1 || x >= 1 || config.predictable) {\n        return asecNumber(x);\n      }\n      return new Complex(x, 0).asec();\n    },\n    Complex: function Complex(x) {\n      return x.asec();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).acos();\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;IAAW;CAAY;AACvD,IAAI,aAAa,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACjE,IAAI,EACF,KAAK,EACL,MAAM,EACN,OAAO,EACP,WAAW,UAAU,EACtB,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;GAuBC,GACD,OAAO,MAAM,MAAM;QACjB,QAAQ,SAAS,OAAO,CAAC;YACvB,IAAI,KAAK,CAAC,KAAK,KAAK,KAAK,OAAO,WAAW,EAAE;gBAC3C,OAAO,CAAA,GAAA,uKAAA,CAAA,aAAU,AAAD,EAAE;YACpB;YACA,OAAO,IAAI,QAAQ,GAAG,GAAG,IAAI;QAC/B;QACA,SAAS,SAAS,QAAQ,CAAC;YACzB,OAAO,EAAE,IAAI;QACf;QACA,WAAW,SAAS,UAAU,CAAC;YAC7B,OAAO,IAAI,WAAW,GAAG,GAAG,CAAC,GAAG,IAAI;QACtC;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6534, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/trigonometry/asech.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { asechNumber } from '../../plain/number/index.js';\nvar name = 'asech';\nvar dependencies = ['typed', 'config', 'Complex', 'BigNumber'];\nexport var createAsech = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the hyperbolic arcsecant of a value,\n   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.\n   *\n   * To avoid confusion with the matrix hyperbolic arcsecant, this function\n   * does not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.asech(x)\n   *\n   * Examples:\n   *\n   *    math.asech(0.5)       // returns 1.3169578969248166\n   *\n   * See also:\n   *\n   *    acsch, acoth\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic arcsecant of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x <= 1 && x >= -1 || config.predictable) {\n        var xInv = 1 / x;\n        if (xInv > 0 || config.predictable) {\n          return asechNumber(x);\n        }\n        var ret = Math.sqrt(xInv * xInv - 1);\n        return new Complex(Math.log(ret - xInv), Math.PI);\n      }\n      return new Complex(x, 0).asech();\n    },\n    Complex: function Complex(x) {\n      return x.asech();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).acosh();\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;IAAW;CAAY;AACvD,IAAI,cAAc,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAClE,IAAI,EACF,KAAK,EACL,MAAM,EACN,OAAO,EACP,WAAW,UAAU,EACtB,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;GAqBC,GACD,OAAO,MAAM,MAAM;QACjB,QAAQ,SAAS,OAAO,CAAC;YACvB,IAAI,KAAK,KAAK,KAAK,CAAC,KAAK,OAAO,WAAW,EAAE;gBAC3C,IAAI,OAAO,IAAI;gBACf,IAAI,OAAO,KAAK,OAAO,WAAW,EAAE;oBAClC,OAAO,CAAA,GAAA,uKAAA,CAAA,cAAW,AAAD,EAAE;gBACrB;gBACA,IAAI,MAAM,KAAK,IAAI,CAAC,OAAO,OAAO;gBAClC,OAAO,IAAI,QAAQ,KAAK,GAAG,CAAC,MAAM,OAAO,KAAK,EAAE;YAClD;YACA,OAAO,IAAI,QAAQ,GAAG,GAAG,KAAK;QAChC;QACA,SAAS,SAAS,QAAQ,CAAC;YACzB,OAAO,EAAE,KAAK;QAChB;QACA,WAAW,SAAS,UAAU,CAAC;YAC7B,OAAO,IAAI,WAAW,GAAG,GAAG,CAAC,GAAG,KAAK;QACvC;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6597, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/trigonometry/asin.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'asin';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createAsin = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex\n  } = _ref;\n  /**\n   * Calculate the inverse sine of a value.\n   *\n   * To avoid confusion with the matric arcsine, this function does not apply\n   * to matrices.\n   *\n   * Syntax:\n   *\n   *    math.asin(x)\n   *\n   * Examples:\n   *\n   *    math.asin(0.5)           // returns number 0.5235987755982989\n   *    math.asin(math.sin(1.5)) // returns number ~1.5\n   *\n   *    math.asin(2)             // returns Complex 1.5707963267948966 -1.3169578969248166i\n   *\n   * See also:\n   *\n   *    sin, atan, acos\n   *\n   * @param {number | BigNumber | Complex} x   Function input\n   * @return {number | BigNumber | Complex} The arc sine of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= -1 && x <= 1 || config.predictable) {\n        return Math.asin(x);\n      } else {\n        return new Complex(x, 0).asin();\n      }\n    },\n    Complex: function Complex(x) {\n      return x.asin();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.asin();\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;CAAU;AAC1C,IAAI,aAAa,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACjE,IAAI,EACF,KAAK,EACL,MAAM,EACN,OAAO,EACR,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;GAuBC,GACD,OAAO,MAAM,MAAM;QACjB,QAAQ,SAAS,OAAO,CAAC;YACvB,IAAI,KAAK,CAAC,KAAK,KAAK,KAAK,OAAO,WAAW,EAAE;gBAC3C,OAAO,KAAK,IAAI,CAAC;YACnB,OAAO;gBACL,OAAO,IAAI,QAAQ,GAAG,GAAG,IAAI;YAC/B;QACF;QACA,SAAS,SAAS,QAAQ,CAAC;YACzB,OAAO,EAAE,IAAI;QACf;QACA,WAAW,SAAS,UAAU,CAAC;YAC7B,OAAO,EAAE,IAAI;QACf;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6655, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/trigonometry/asinh.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { asinhNumber } from '../../plain/number/index.js';\nvar name = 'asinh';\nvar dependencies = ['typed'];\nexport var createAsinh = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Calculate the hyperbolic arcsine of a value,\n   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.\n   *\n   * To avoid confusion with the matrix hyperbolic arcsine, this function\n   * does not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.asinh(x)\n   *\n   * Examples:\n   *\n   *    math.asinh(0.5)       // returns 0.48121182505960347\n   *\n   * See also:\n   *\n   *    acosh, atanh\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic arcsine of x\n   */\n  return typed('asinh', {\n    number: asinhNumber,\n    Complex: function Complex(x) {\n      return x.asinh();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.asinh();\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,cAAc,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAClE,IAAI,EACF,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;GAqBC,GACD,OAAO,MAAM,SAAS;QACpB,QAAQ,uKAAA,CAAA,cAAW;QACnB,SAAS,SAAS,QAAQ,CAAC;YACzB,OAAO,EAAE,KAAK;QAChB;QACA,WAAW,SAAS,UAAU,CAAC;YAC7B,OAAO,EAAE,KAAK;QAChB;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6705, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/trigonometry/atan.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'atan';\nvar dependencies = ['typed'];\nexport var createAtan = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Calculate the inverse tangent of a value.\n   *\n   * To avoid confusion with matrix arctangent, this function does not apply\n   * to matrices.\n   *\n   * Syntax:\n   *\n   *    math.atan(x)\n   *\n   * Examples:\n   *\n   *    math.atan(0.5)           // returns number 0.4636476090008061\n   *    math.atan(2)             // returns number 1.1071487177940904\n   *    math.atan(math.tan(1.5)) // returns number 1.5\n   *\n   * See also:\n   *\n   *    tan, asin, acos\n   *\n   * @param {number | BigNumber | Complex} x   Function input\n   * @return {number | BigNumber | Complex} The arc tangent of x\n   */\n  return typed('atan', {\n    number: function number(x) {\n      return Math.atan(x);\n    },\n    Complex: function Complex(x) {\n      return x.atan();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.atan();\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,aAAa,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACjE,IAAI,EACF,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;GAsBC,GACD,OAAO,MAAM,QAAQ;QACnB,QAAQ,SAAS,OAAO,CAAC;YACvB,OAAO,KAAK,IAAI,CAAC;QACnB;QACA,SAAS,SAAS,QAAQ,CAAC;YACzB,OAAO,EAAE,IAAI;QACf;QACA,WAAW,SAAS,UAAU,CAAC;YAC7B,OAAO,EAAE,IAAI;QACf;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6756, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/trigonometry/atan2.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo09xS0Sf } from '../../type/matrix/utils/matAlgo09xS0Sf.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'atan2';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix', 'concat'];\nexport var createAtan2 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    BigNumber,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo09xS0Sf = createMatAlgo09xS0Sf({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\n   * Calculate the inverse tangent function with two arguments, y/x.\n   * By providing two arguments, the right quadrant of the computed angle can be\n   * determined.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.atan2(y, x)\n   *\n   * Examples:\n   *\n   *    math.atan2(2, 2) / math.pi       // returns number 0.25\n   *\n   *    const angle = math.unit(60, 'deg') // returns Unit 60 deg\n   *    const x = math.cos(angle)\n   *    const y = math.sin(angle)\n   *\n   *    math.atan(2)             // returns number 1.1071487177940904\n   *\n   * See also:\n   *\n   *    tan, atan, sin, cos\n   *\n   * @param {number | Array | Matrix} y  Second dimension\n   * @param {number | Array | Matrix} x  First dimension\n   * @return {number | Array | Matrix} Four-quadrant inverse tangent\n   */\n  return typed(name, {\n    'number, number': Math.atan2,\n    // Complex numbers doesn't seem to have a reasonable implementation of\n    // atan2(). Even Matlab removed the support, after they only calculated\n    // the atan only on base of the real part of the numbers and ignored\n    // the imaginary.\n\n    'BigNumber, BigNumber': (y, x) => BigNumber.atan2(y, x)\n  }, matrixAlgorithmSuite({\n    scalar: 'number | BigNumber',\n    SS: matAlgo09xS0Sf,\n    DS: matAlgo03xDSf,\n    SD: matAlgo02xDS0,\n    Ss: matAlgo11xS0s,\n    sS: matAlgo12xSfs\n  }));\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;IAAe;IAAa;IAAe;CAAS;AACpF,IAAI,cAAc,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAClE,IAAI,EACF,KAAK,EACL,MAAM,EACN,WAAW,EACX,SAAS,EACT,WAAW,EACX,MAAM,EACP,GAAG;IACJ,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;QACA;IACF;IACA,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;IACF;IACA,IAAI,iBAAiB,CAAA,GAAA,iLAAA,CAAA,uBAAoB,AAAD,EAAE;QACxC;QACA;IACF;IACA,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;QACA;IACF;IACA,IAAI,gBAAgB,CAAA,GAAA,gLAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC;QACA;IACF;IACA,IAAI,uBAAuB,CAAA,GAAA,uLAAA,CAAA,6BAA0B,AAAD,EAAE;QACpD;QACA;QACA;IACF;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BC,GACD,OAAO,MAAM,MAAM;QACjB,kBAAkB,KAAK,KAAK;QAC5B,sEAAsE;QACtE,uEAAuE;QACvE,oEAAoE;QACpE,iBAAiB;QAEjB,wBAAwB,CAAC,GAAG,IAAM,UAAU,KAAK,CAAC,GAAG;IACvD,GAAG,qBAAqB;QACtB,QAAQ;QACR,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;IACN;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6858, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/trigonometry/atanh.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { atanhNumber } from '../../plain/number/index.js';\nvar name = 'atanh';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createAtanh = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex\n  } = _ref;\n  /**\n   * Calculate the hyperbolic arctangent of a value,\n   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.\n   *\n   * To avoid confusion with the matrix hyperbolic arctangent, this function\n   * does not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.atanh(x)\n   *\n   * Examples:\n   *\n   *    math.atanh(0.5)       // returns 0.5493061443340549\n   *\n   * See also:\n   *\n   *    acosh, asinh\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic arctangent of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x <= 1 && x >= -1 || config.predictable) {\n        return atanhNumber(x);\n      }\n      return new Complex(x, 0).atanh();\n    },\n    Complex: function Complex(x) {\n      return x.atanh();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.atanh();\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;CAAU;AAC1C,IAAI,cAAc,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAClE,IAAI,EACF,KAAK,EACL,MAAM,EACN,OAAO,EACR,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;GAqBC,GACD,OAAO,MAAM,MAAM;QACjB,QAAQ,SAAS,OAAO,CAAC;YACvB,IAAI,KAAK,KAAK,KAAK,CAAC,KAAK,OAAO,WAAW,EAAE;gBAC3C,OAAO,CAAA,GAAA,uKAAA,CAAA,cAAW,AAAD,EAAE;YACrB;YACA,OAAO,IAAI,QAAQ,GAAG,GAAG,KAAK;QAChC;QACA,SAAS,SAAS,QAAQ,CAAC;YACzB,OAAO,EAAE,KAAK;QAChB;QACA,WAAW,SAAS,UAAU,CAAC;YAC7B,OAAO,EAAE,KAAK;QAChB;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6915, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/trigonometry/trigUnit.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nexport var createTrigUnit = /* #__PURE__ */factory('trigUnit', ['typed'], _ref => {\n  var {\n    typed\n  } = _ref;\n  return {\n    Unit: typed.referToSelf(self => x => {\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function cot is no angle');\n      }\n      return typed.find(self, x.valueType())(x.value);\n    })\n  };\n});"],"names":[],"mappings":";;;AAAA;;AACO,IAAI,iBAAiB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,YAAY;IAAC;CAAQ,EAAE,CAAA;IACxE,IAAI,EACF,KAAK,EACN,GAAG;IACJ,OAAO;QACL,MAAM,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAA;gBAC9B,IAAI,CAAC,EAAE,OAAO,CAAC,EAAE,WAAW,CAAC,UAAU,CAAC,KAAK,GAAG;oBAC9C,MAAM,IAAI,UAAU;gBACtB;gBACA,OAAO,MAAM,IAAI,CAAC,MAAM,EAAE,SAAS,IAAI,EAAE,KAAK;YAChD;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6939, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/trigonometry/cos.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'cos';\nvar dependencies = ['typed'];\nexport var createCos = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  var trigUnit = createTrigUnit({\n    typed\n  });\n\n  /**\n   * Calculate the cosine of a value.\n   *\n   * To avoid confusion with the matrix cosine, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.cos(x)\n   *\n   * Examples:\n   *\n   *    math.cos(2)                      // returns number -0.4161468365471422\n   *    math.cos(math.pi / 4)            // returns number  0.7071067811865475\n   *    math.cos(math.unit(180, 'deg'))  // returns number -1\n   *    math.cos(math.unit(60, 'deg'))   // returns number  0.5\n   *\n   *    const angle = 0.2\n   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1\n   *\n   * See also:\n   *\n   *    cos, tan\n   *\n   * @param {number | BigNumber | Complex | Unit} x  Function input\n   * @return {number | BigNumber | Complex} Cosine of x\n   */\n  return typed(name, {\n    number: Math.cos,\n    'Complex | BigNumber': x => x.cos()\n  }, trigUnit);\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,YAAY,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAChE,IAAI,EACF,KAAK,EACN,GAAG;IACJ,IAAI,WAAW,CAAA,GAAA,4KAAA,CAAA,iBAAc,AAAD,EAAE;QAC5B;IACF;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BC,GACD,OAAO,MAAM,MAAM;QACjB,QAAQ,KAAK,GAAG;QAChB,uBAAuB,CAAA,IAAK,EAAE,GAAG;IACnC,GAAG;AACL","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6992, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/trigonometry/cosh.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { cosh as coshNumber } from '../../utils/number.js';\nvar name = 'cosh';\nvar dependencies = ['typed'];\nexport var createCosh = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Calculate the hyperbolic cosine of a value,\n   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.\n   *\n   * To avoid confusion with the matrix hyperbolic cosine, this function does\n   * not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.cosh(x)\n   *\n   * Examples:\n   *\n   *    math.cosh(0.5)       // returns number 1.1276259652063807\n   *\n   * See also:\n   *\n   *    sinh, tanh\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic cosine of x\n   */\n  return typed(name, {\n    number: coshNumber,\n    'Complex | BigNumber': x => x.cosh()\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,aAAa,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACjE,IAAI,EACF,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;GAqBC,GACD,OAAO,MAAM,MAAM;QACjB,QAAQ,uJAAA,CAAA,OAAU;QAClB,uBAAuB,CAAA,IAAK,EAAE,IAAI;IACpC;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7037, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/trigonometry/cot.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { cotNumber } from '../../plain/number/index.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'cot';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createCot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  var trigUnit = createTrigUnit({\n    typed\n  });\n\n  /**\n   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.\n   *\n   * To avoid confusion with the matrix cotangent, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.cot(x)\n   *\n   * Examples:\n   *\n   *    math.cot(2)      // returns number -0.45765755436028577\n   *    1 / math.tan(2)  // returns number -0.45765755436028577\n   *\n   * See also:\n   *\n   *    tan, sec, csc\n   *\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Cotangent of x\n   */\n  return typed(name, {\n    number: cotNumber,\n    Complex: x => x.cot(),\n    BigNumber: x => new _BigNumber(1).div(x.tan())\n  }, trigUnit);\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;CAAY;AAClC,IAAI,YAAY,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAChE,IAAI,EACF,KAAK,EACL,WAAW,UAAU,EACtB,GAAG;IACJ,IAAI,WAAW,CAAA,GAAA,4KAAA,CAAA,iBAAc,AAAD,EAAE;QAC5B;IACF;IAEA;;;;;;;;;;;;;;;;;;;;;GAqBC,GACD,OAAO,MAAM,MAAM;QACjB,QAAQ,uKAAA,CAAA,YAAS;QACjB,SAAS,CAAA,IAAK,EAAE,GAAG;QACnB,WAAW,CAAA,IAAK,IAAI,WAAW,GAAG,GAAG,CAAC,EAAE,GAAG;IAC7C,GAAG;AACL","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7089, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/trigonometry/coth.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { cothNumber } from '../../plain/number/index.js';\nvar name = 'coth';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createCoth = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the hyperbolic cotangent of a value,\n   * defined as `coth(x) = 1 / tanh(x)`.\n   *\n   * To avoid confusion with the matrix hyperbolic cotangent, this function\n   * does not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.coth(x)\n   *\n   * Examples:\n   *\n   *    // coth(x) = 1 / tanh(x)\n   *    math.coth(2)         // returns 1.0373147207275482\n   *    1 / math.tanh(2)     // returns 1.0373147207275482\n   *\n   * See also:\n   *\n   *    sinh, tanh, cosh\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic cotangent of x\n   */\n  return typed(name, {\n    number: cothNumber,\n    Complex: x => x.coth(),\n    BigNumber: x => new _BigNumber(1).div(x.tanh())\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;CAAY;AAClC,IAAI,aAAa,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACjE,IAAI,EACF,KAAK,EACL,WAAW,UAAU,EACtB,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;GAuBC,GACD,OAAO,MAAM,MAAM;QACjB,QAAQ,uKAAA,CAAA,aAAU;QAClB,SAAS,CAAA,IAAK,EAAE,IAAI;QACpB,WAAW,CAAA,IAAK,IAAI,WAAW,GAAG,GAAG,CAAC,EAAE,IAAI;IAC9C;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7138, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/trigonometry/csc.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { cscNumber } from '../../plain/number/index.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'csc';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createCsc = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  var trigUnit = createTrigUnit({\n    typed\n  });\n\n  /**\n   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.\n   *\n   * To avoid confusion with the matrix cosecant, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.csc(x)\n   *\n   * Examples:\n   *\n   *    math.csc(2)      // returns number 1.099750170294617\n   *    1 / math.sin(2)  // returns number 1.099750170294617\n   *\n   * See also:\n   *\n   *    sin, sec, cot\n   *\n   * @param {number | BigNumber | Complex | Unit} x  Function input\n   * @return {number | BigNumber | Complex} Cosecant of x\n   */\n  return typed(name, {\n    number: cscNumber,\n    Complex: x => x.csc(),\n    BigNumber: x => new _BigNumber(1).div(x.sin())\n  }, trigUnit);\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;CAAY;AAClC,IAAI,YAAY,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAChE,IAAI,EACF,KAAK,EACL,WAAW,UAAU,EACtB,GAAG;IACJ,IAAI,WAAW,CAAA,GAAA,4KAAA,CAAA,iBAAc,AAAD,EAAE;QAC5B;IACF;IAEA;;;;;;;;;;;;;;;;;;;;;GAqBC,GACD,OAAO,MAAM,MAAM;QACjB,QAAQ,uKAAA,CAAA,YAAS;QACjB,SAAS,CAAA,IAAK,EAAE,GAAG;QACnB,WAAW,CAAA,IAAK,IAAI,WAAW,GAAG,GAAG,CAAC,EAAE,GAAG;IAC7C,GAAG;AACL","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7190, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/trigonometry/csch.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { cschNumber } from '../../plain/number/index.js';\nvar name = 'csch';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createCsch = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the hyperbolic cosecant of a value,\n   * defined as `csch(x) = 1 / sinh(x)`.\n   *\n   * To avoid confusion with the matrix hyperbolic cosecant, this function\n   * does not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.csch(x)\n   *\n   * Examples:\n   *\n   *    // csch(x) = 1/ sinh(x)\n   *    math.csch(0.5)       // returns 1.9190347513349437\n   *    1 / math.sinh(0.5)   // returns 1.9190347513349437\n   *\n   * See also:\n   *\n   *    sinh, sech, coth\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic cosecant of x\n   */\n  return typed(name, {\n    number: cschNumber,\n    Complex: x => x.csch(),\n    BigNumber: x => new _BigNumber(1).div(x.sinh())\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;CAAY;AAClC,IAAI,aAAa,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACjE,IAAI,EACF,KAAK,EACL,WAAW,UAAU,EACtB,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;GAuBC,GACD,OAAO,MAAM,MAAM;QACjB,QAAQ,uKAAA,CAAA,aAAU;QAClB,SAAS,CAAA,IAAK,EAAE,IAAI;QACpB,WAAW,CAAA,IAAK,IAAI,WAAW,GAAG,GAAG,CAAC,EAAE,IAAI;IAC9C;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7239, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/trigonometry/sec.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { secNumber } from '../../plain/number/index.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'sec';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createSec = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  var trigUnit = createTrigUnit({\n    typed\n  });\n\n  /**\n   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.\n   *\n   * To avoid confusion with the matrix secant, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.sec(x)\n   *\n   * Examples:\n   *\n   *    math.sec(2)      // returns number -2.4029979617223822\n   *    1 / math.cos(2)  // returns number -2.4029979617223822\n   *\n   * See also:\n   *\n   *    cos, csc, cot\n   *\n   * @param {number | BigNumber | Complex | Unit} x  Function input\n   * @return {number | BigNumber | Complex} Secant of x\n   */\n  return typed(name, {\n    number: secNumber,\n    Complex: x => x.sec(),\n    BigNumber: x => new _BigNumber(1).div(x.cos())\n  }, trigUnit);\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;CAAY;AAClC,IAAI,YAAY,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAChE,IAAI,EACF,KAAK,EACL,WAAW,UAAU,EACtB,GAAG;IACJ,IAAI,WAAW,CAAA,GAAA,4KAAA,CAAA,iBAAc,AAAD,EAAE;QAC5B;IACF;IAEA;;;;;;;;;;;;;;;;;;;;;GAqBC,GACD,OAAO,MAAM,MAAM;QACjB,QAAQ,uKAAA,CAAA,YAAS;QACjB,SAAS,CAAA,IAAK,EAAE,GAAG;QACnB,WAAW,CAAA,IAAK,IAAI,WAAW,GAAG,GAAG,CAAC,EAAE,GAAG;IAC7C,GAAG;AACL","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7291, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/trigonometry/sech.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { sechNumber } from '../../plain/number/index.js';\nvar name = 'sech';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createSech = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\n   * Calculate the hyperbolic secant of a value,\n   * defined as `sech(x) = 1 / cosh(x)`.\n   *\n   * To avoid confusion with the matrix hyperbolic secant, this function does\n   * not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.sech(x)\n   *\n   * Examples:\n   *\n   *    // sech(x) = 1/ cosh(x)\n   *    math.sech(0.5)       // returns 0.886818883970074\n   *    1 / math.cosh(0.5)   // returns 0.886818883970074\n   *\n   * See also:\n   *\n   *    cosh, csch, coth\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic secant of x\n   */\n  return typed(name, {\n    number: sechNumber,\n    Complex: x => x.sech(),\n    BigNumber: x => new _BigNumber(1).div(x.cosh())\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;CAAY;AAClC,IAAI,aAAa,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACjE,IAAI,EACF,KAAK,EACL,WAAW,UAAU,EACtB,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;GAuBC,GACD,OAAO,MAAM,MAAM;QACjB,QAAQ,uKAAA,CAAA,aAAU;QAClB,SAAS,CAAA,IAAK,EAAE,IAAI;QACpB,WAAW,CAAA,IAAK,IAAI,WAAW,GAAG,GAAG,CAAC,EAAE,IAAI;IAC9C;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7340, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/trigonometry/sin.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'sin';\nvar dependencies = ['typed'];\nexport var createSin = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  var trigUnit = createTrigUnit({\n    typed\n  });\n\n  /**\n   * Calculate the sine of a value.\n   *\n   * To avoid confusion with the matrix sine, this function does not apply\n   * to matrices.\n   *\n   * Syntax:\n   *\n   *    math.sin(x)\n   *\n   * Examples:\n   *\n   *    math.sin(2)                      // returns number 0.9092974268256813\n   *    math.sin(math.pi / 4)            // returns number 0.7071067811865475\n   *    math.sin(math.unit(90, 'deg'))   // returns number 1\n   *    math.sin(math.unit(30, 'deg'))   // returns number 0.5\n   *\n   *    const angle = 0.2\n   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1\n   *\n   * See also:\n   *\n   *    cos, tan\n   *\n   * @param {number | BigNumber | Complex | Unit} x  Function input\n   * @return {number | BigNumber | Complex} Sine of x\n   */\n  return typed(name, {\n    number: Math.sin,\n    'Complex | BigNumber': x => x.sin()\n  }, trigUnit);\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,YAAY,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAChE,IAAI,EACF,KAAK,EACN,GAAG;IACJ,IAAI,WAAW,CAAA,GAAA,4KAAA,CAAA,iBAAc,AAAD,EAAE;QAC5B;IACF;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BC,GACD,OAAO,MAAM,MAAM;QACjB,QAAQ,KAAK,GAAG;QAChB,uBAAuB,CAAA,IAAK,EAAE,GAAG;IACnC,GAAG;AACL","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7393, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/trigonometry/sinh.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { sinhNumber } from '../../plain/number/index.js';\nvar name = 'sinh';\nvar dependencies = ['typed'];\nexport var createSinh = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Calculate the hyperbolic sine of a value,\n   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.\n   *\n   * To avoid confusion with the matrix hyperbolic sine, this function does\n   * not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.sinh(x)\n   *\n   * Examples:\n   *\n   *    math.sinh(0.5)       // returns number 0.5210953054937474\n   *\n   * See also:\n   *\n   *    cosh, tanh\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic sine of x\n   */\n  return typed(name, {\n    number: sinhNumber,\n    'Complex | BigNumber': x => x.sinh()\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,aAAa,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACjE,IAAI,EACF,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;GAqBC,GACD,OAAO,MAAM,MAAM;QACjB,QAAQ,uKAAA,CAAA,aAAU;QAClB,uBAAuB,CAAA,IAAK,EAAE,IAAI;IACpC;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7438, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/trigonometry/tan.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'tan';\nvar dependencies = ['typed'];\nexport var createTan = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  var trigUnit = createTrigUnit({\n    typed\n  });\n\n  /**\n   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.\n   *\n   * To avoid confusion with the matrix tangent, this function does not apply\n   * to matrices.\n   *\n   * Syntax:\n   *\n   *    math.tan(x)\n   *\n   * Examples:\n   *\n   *    math.tan(0.5)                    // returns number 0.5463024898437905\n   *    math.sin(0.5) / math.cos(0.5)    // returns number 0.5463024898437905\n   *    math.tan(math.pi / 4)            // returns number 1\n   *    math.tan(math.unit(45, 'deg'))   // returns number 1\n   *\n   * See also:\n   *\n   *    atan, sin, cos\n   *\n   * @param {number | BigNumber | Complex | Unit} x  Function input\n   * @return {number | BigNumber | Complex} Tangent of x\n   */\n  return typed(name, {\n    number: Math.tan,\n    'Complex | BigNumber': x => x.tan()\n  }, trigUnit);\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,YAAY,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAChE,IAAI,EACF,KAAK,EACN,GAAG;IACJ,IAAI,WAAW,CAAA,GAAA,4KAAA,CAAA,iBAAc,AAAD,EAAE;QAC5B;IACF;IAEA;;;;;;;;;;;;;;;;;;;;;;;GAuBC,GACD,OAAO,MAAM,MAAM;QACjB,QAAQ,KAAK,GAAG;QAChB,uBAAuB,CAAA,IAAK,EAAE,GAAG;IACnC,GAAG;AACL","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7488, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/trigonometry/tanh.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { tanh as _tanh } from '../../utils/number.js';\nvar name = 'tanh';\nvar dependencies = ['typed'];\nexport var createTanh = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Calculate the hyperbolic tangent of a value,\n   * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.\n   *\n   * To avoid confusion with matrix hyperbolic tangent, this function does\n   * not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.tanh(x)\n   *\n   * Examples:\n   *\n   *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)\n   *    math.tanh(0.5)                   // returns 0.46211715726000974\n   *    math.sinh(0.5) / math.cosh(0.5)  // returns 0.46211715726000974\n   *    1 / math.coth(0.5)               // returns 0.46211715726000974\n   *\n   * See also:\n   *\n   *    sinh, cosh, coth\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic tangent of x\n   */\n  return typed('tanh', {\n    number: _tanh,\n    'Complex | BigNumber': x => x.tanh()\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,aAAa,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACjE,IAAI,EACF,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;GAwBC,GACD,OAAO,MAAM,QAAQ;QACnB,QAAQ,uJAAA,CAAA,OAAK;QACb,uBAAuB,CAAA,IAAK,EAAE,IAAI;IACpC;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7536, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/set/setCartesian.js"],"sourcesContent":["import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setCartesian';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nexport var createSetCartesian = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    subset,\n    compareNatural,\n    Index,\n    DenseMatrix\n  } = _ref;\n  /**\n   * Create the cartesian product of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays\n   * and the values will be sorted in ascending order before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setCartesian(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setCartesian([1, 2], [3, 4])        // returns [[1, 3], [1, 4], [2, 3], [2, 4]]\n   *    math.setCartesian([4, 3], [2, 1])        // returns [[3, 1], [3, 2], [4, 1], [4, 2]]\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference, setPowerset\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The cartesian product of two (multi)sets\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function Array__Matrix_Array__Matrix(a1, a2) {\n      var result = [];\n      if (subset(size(a1), new Index(0)) !== 0 && subset(size(a2), new Index(0)) !== 0) {\n        // if any of them is empty, return empty\n        var b1 = flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural);\n        var b2 = flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural);\n        result = [];\n        for (var i = 0; i < b1.length; i++) {\n          for (var j = 0; j < b2.length; j++) {\n            result.push([b1[i], b2[j]]);\n          }\n        }\n      }\n      // return an array, if both inputs were arrays\n      if (Array.isArray(a1) && Array.isArray(a2)) {\n        return result;\n      }\n      // return a matrix otherwise\n      return new DenseMatrix(result);\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAQ;IAAU;IAAkB;IAAS;CAAc;AACjF,IAAI,qBAAqB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACzE,IAAI,EACF,KAAK,EACL,IAAI,EACJ,MAAM,EACN,cAAc,EACd,KAAK,EACL,WAAW,EACZ,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;GAqBC,GACD,OAAO,MAAM,MAAM;QACjB,kCAAkC,SAAS,4BAA4B,EAAE,EAAE,EAAE;YAC3E,IAAI,SAAS,EAAE;YACf,IAAI,OAAO,KAAK,KAAK,IAAI,MAAM,QAAQ,KAAK,OAAO,KAAK,KAAK,IAAI,MAAM,QAAQ,GAAG;gBAChF,wCAAwC;gBACxC,IAAI,KAAK,CAAA,GAAA,sJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,OAAO,CAAC,MAAM,KAAK,GAAG,OAAO,IAAI,IAAI,CAAC;gBAC7D,IAAI,KAAK,CAAA,GAAA,sJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,OAAO,CAAC,MAAM,KAAK,GAAG,OAAO,IAAI,IAAI,CAAC;gBAC7D,SAAS,EAAE;gBACX,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,MAAM,EAAE,IAAK;oBAClC,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,MAAM,EAAE,IAAK;wBAClC,OAAO,IAAI,CAAC;4BAAC,EAAE,CAAC,EAAE;4BAAE,EAAE,CAAC,EAAE;yBAAC;oBAC5B;gBACF;YACF;YACA,8CAA8C;YAC9C,IAAI,MAAM,OAAO,CAAC,OAAO,MAAM,OAAO,CAAC,KAAK;gBAC1C,OAAO;YACT;YACA,4BAA4B;YAC5B,OAAO,IAAI,YAAY;QACzB;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7607, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/set/setDifference.js"],"sourcesContent":["import { flatten, generalize, identify } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setDifference';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nexport var createSetDifference = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    subset,\n    compareNatural,\n    Index,\n    DenseMatrix\n  } = _ref;\n  /**\n   * Create the difference of two (multi)sets: every element of set1, that is not the element of set2.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setDifference(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2]\n   *    math.setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2]\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setSymDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The difference of two (multi)sets\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function Array__Matrix_Array__Matrix(a1, a2) {\n      var result;\n      if (subset(size(a1), new Index(0)) === 0) {\n        // empty-anything=empty\n        result = [];\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        // anything-empty=anything\n        return flatten(a1.toArray());\n      } else {\n        var b1 = identify(flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n        var b2 = identify(flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n        result = [];\n        var inb2;\n        for (var i = 0; i < b1.length; i++) {\n          inb2 = false;\n          for (var j = 0; j < b2.length; j++) {\n            if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\n              // the identifier is always a decimal int\n              inb2 = true;\n              break;\n            }\n          }\n          if (!inb2) {\n            result.push(b1[i]);\n          }\n        }\n      }\n      // return an array, if both inputs were arrays\n      if (Array.isArray(a1) && Array.isArray(a2)) {\n        return generalize(result);\n      }\n      // return a matrix otherwise\n      return new DenseMatrix(generalize(result));\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAQ;IAAU;IAAkB;IAAS;CAAc;AACjF,IAAI,sBAAsB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAC1E,IAAI,EACF,KAAK,EACL,IAAI,EACJ,MAAM,EACN,cAAc,EACd,KAAK,EACL,WAAW,EACZ,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;GAoBC,GACD,OAAO,MAAM,MAAM;QACjB,kCAAkC,SAAS,4BAA4B,EAAE,EAAE,EAAE;YAC3E,IAAI;YACJ,IAAI,OAAO,KAAK,KAAK,IAAI,MAAM,QAAQ,GAAG;gBACxC,uBAAuB;gBACvB,SAAS,EAAE;YACb,OAAO,IAAI,OAAO,KAAK,KAAK,IAAI,MAAM,QAAQ,GAAG;gBAC/C,0BAA0B;gBAC1B,OAAO,CAAA,GAAA,sJAAA,CAAA,UAAO,AAAD,EAAE,GAAG,OAAO;YAC3B,OAAO;gBACL,IAAI,KAAK,CAAA,GAAA,sJAAA,CAAA,WAAQ,AAAD,EAAE,CAAA,GAAA,sJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,OAAO,CAAC,MAAM,KAAK,GAAG,OAAO,IAAI,IAAI,CAAC;gBACtE,IAAI,KAAK,CAAA,GAAA,sJAAA,CAAA,WAAQ,AAAD,EAAE,CAAA,GAAA,sJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,OAAO,CAAC,MAAM,KAAK,GAAG,OAAO,IAAI,IAAI,CAAC;gBACtE,SAAS,EAAE;gBACX,IAAI;gBACJ,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,MAAM,EAAE,IAAK;oBAClC,OAAO;oBACP,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,MAAM,EAAE,IAAK;wBAClC,IAAI,eAAe,EAAE,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,KAAK,MAAM,KAAK,EAAE,CAAC,EAAE,CAAC,UAAU,KAAK,EAAE,CAAC,EAAE,CAAC,UAAU,EAAE;4BAC3F,yCAAyC;4BACzC,OAAO;4BACP;wBACF;oBACF;oBACA,IAAI,CAAC,MAAM;wBACT,OAAO,IAAI,CAAC,EAAE,CAAC,EAAE;oBACnB;gBACF;YACF;YACA,8CAA8C;YAC9C,IAAI,MAAM,OAAO,CAAC,OAAO,MAAM,OAAO,CAAC,KAAK;gBAC1C,OAAO,CAAA,GAAA,sJAAA,CAAA,aAAU,AAAD,EAAE;YACpB;YACA,4BAA4B;YAC5B,OAAO,IAAI,YAAY,CAAA,GAAA,sJAAA,CAAA,aAAU,AAAD,EAAE;QACpC;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7688, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/set/setDistinct.js"],"sourcesContent":["import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setDistinct';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nexport var createSetDistinct = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    subset,\n    compareNatural,\n    Index,\n    DenseMatrix\n  } = _ref;\n  /**\n   * Collect the distinct elements of a multiset.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setDistinct(set)\n   *\n   * Examples:\n   *\n   *    math.setDistinct([1, 1, 1, 2, 2, 3])        // returns [1, 2, 3]\n   *\n   * See also:\n   *\n   *    setMultiplicity\n   *\n   * @param {Array | Matrix}    a  A multiset\n   * @return {Array | Matrix}    A set containing the distinc elements of the multiset\n   */\n  return typed(name, {\n    'Array | Matrix': function Array__Matrix(a) {\n      var result;\n      if (subset(size(a), new Index(0)) === 0) {\n        // if empty, return empty\n        result = [];\n      } else {\n        var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n        result = [];\n        result.push(b[0]);\n        for (var i = 1; i < b.length; i++) {\n          if (compareNatural(b[i], b[i - 1]) !== 0) {\n            result.push(b[i]);\n          }\n        }\n      }\n      // return an array, if the input was an array\n      if (Array.isArray(a)) {\n        return result;\n      }\n      // return a matrix otherwise\n      return new DenseMatrix(result);\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAQ;IAAU;IAAkB;IAAS;CAAc;AACjF,IAAI,oBAAoB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACxE,IAAI,EACF,KAAK,EACL,IAAI,EACJ,MAAM,EACN,cAAc,EACd,KAAK,EACL,WAAW,EACZ,GAAG;IACJ;;;;;;;;;;;;;;;;;;GAkBC,GACD,OAAO,MAAM,MAAM;QACjB,kBAAkB,SAAS,cAAc,CAAC;YACxC,IAAI;YACJ,IAAI,OAAO,KAAK,IAAI,IAAI,MAAM,QAAQ,GAAG;gBACvC,yBAAyB;gBACzB,SAAS,EAAE;YACb,OAAO;gBACL,IAAI,IAAI,CAAA,GAAA,sJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,OAAO,CAAC,KAAK,IAAI,EAAE,OAAO,IAAI,IAAI,CAAC;gBACzD,SAAS,EAAE;gBACX,OAAO,IAAI,CAAC,CAAC,CAAC,EAAE;gBAChB,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,MAAM,EAAE,IAAK;oBACjC,IAAI,eAAe,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,MAAM,GAAG;wBACxC,OAAO,IAAI,CAAC,CAAC,CAAC,EAAE;oBAClB;gBACF;YACF;YACA,6CAA6C;YAC7C,IAAI,MAAM,OAAO,CAAC,IAAI;gBACpB,OAAO;YACT;YACA,4BAA4B;YAC5B,OAAO,IAAI,YAAY;QACzB;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7755, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/set/setIntersect.js"],"sourcesContent":["import { flatten, generalize, identify } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setIntersect';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nexport var createSetIntersect = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    subset,\n    compareNatural,\n    Index,\n    DenseMatrix\n  } = _ref;\n  /**\n   * Create the intersection of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setIntersect(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setIntersect([1, 2, 3, 4], [3, 4, 5, 6])            // returns [3, 4]\n   *    math.setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [3, 4]\n   *\n   * See also:\n   *\n   *    setUnion, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The intersection of two (multi)sets\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function Array__Matrix_Array__Matrix(a1, a2) {\n      var result;\n      if (subset(size(a1), new Index(0)) === 0 || subset(size(a2), new Index(0)) === 0) {\n        // of any of them is empty, return empty\n        result = [];\n      } else {\n        var b1 = identify(flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n        var b2 = identify(flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n        result = [];\n        for (var i = 0; i < b1.length; i++) {\n          for (var j = 0; j < b2.length; j++) {\n            if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\n              // the identifier is always a decimal int\n              result.push(b1[i]);\n              break;\n            }\n          }\n        }\n      }\n      // return an array, if both inputs were arrays\n      if (Array.isArray(a1) && Array.isArray(a2)) {\n        return generalize(result);\n      }\n      // return a matrix otherwise\n      return new DenseMatrix(generalize(result));\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAQ;IAAU;IAAkB;IAAS;CAAc;AACjF,IAAI,qBAAqB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACzE,IAAI,EACF,KAAK,EACL,IAAI,EACJ,MAAM,EACN,cAAc,EACd,KAAK,EACL,WAAW,EACZ,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;GAoBC,GACD,OAAO,MAAM,MAAM;QACjB,kCAAkC,SAAS,4BAA4B,EAAE,EAAE,EAAE;YAC3E,IAAI;YACJ,IAAI,OAAO,KAAK,KAAK,IAAI,MAAM,QAAQ,KAAK,OAAO,KAAK,KAAK,IAAI,MAAM,QAAQ,GAAG;gBAChF,wCAAwC;gBACxC,SAAS,EAAE;YACb,OAAO;gBACL,IAAI,KAAK,CAAA,GAAA,sJAAA,CAAA,WAAQ,AAAD,EAAE,CAAA,GAAA,sJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,OAAO,CAAC,MAAM,KAAK,GAAG,OAAO,IAAI,IAAI,CAAC;gBACtE,IAAI,KAAK,CAAA,GAAA,sJAAA,CAAA,WAAQ,AAAD,EAAE,CAAA,GAAA,sJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,OAAO,CAAC,MAAM,KAAK,GAAG,OAAO,IAAI,IAAI,CAAC;gBACtE,SAAS,EAAE;gBACX,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,MAAM,EAAE,IAAK;oBAClC,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,MAAM,EAAE,IAAK;wBAClC,IAAI,eAAe,EAAE,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,KAAK,MAAM,KAAK,EAAE,CAAC,EAAE,CAAC,UAAU,KAAK,EAAE,CAAC,EAAE,CAAC,UAAU,EAAE;4BAC3F,yCAAyC;4BACzC,OAAO,IAAI,CAAC,EAAE,CAAC,EAAE;4BACjB;wBACF;oBACF;gBACF;YACF;YACA,8CAA8C;YAC9C,IAAI,MAAM,OAAO,CAAC,OAAO,MAAM,OAAO,CAAC,KAAK;gBAC1C,OAAO,CAAA,GAAA,sJAAA,CAAA,aAAU,AAAD,EAAE;YACpB;YACA,4BAA4B;YAC5B,OAAO,IAAI,YAAY,CAAA,GAAA,sJAAA,CAAA,aAAU,AAAD,EAAE;QACpC;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7828, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/set/setIsSubset.js"],"sourcesContent":["import { flatten, identify } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setIsSubset';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];\nexport var createSetIsSubset = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    subset,\n    compareNatural,\n    Index\n  } = _ref;\n  /**\n   * Check whether a (multi)set is a subset of another (multi)set. (Every element of set1 is the element of set2.)\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setIsSubset(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setIsSubset([1, 2], [3, 4, 5, 6])        // returns false\n   *    math.setIsSubset([3, 4], [3, 4, 5, 6])        // returns true\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {boolean} Returns true when a1 is a subset of a2, returns false otherwise\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function Array__Matrix_Array__Matrix(a1, a2) {\n      if (subset(size(a1), new Index(0)) === 0) {\n        // empty is a subset of anything\n        return true;\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        // anything is not a subset of empty\n        return false;\n      }\n      var b1 = identify(flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n      var b2 = identify(flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n      var inb2;\n      for (var i = 0; i < b1.length; i++) {\n        inb2 = false;\n        for (var j = 0; j < b2.length; j++) {\n          if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\n            // the identifier is always a decimal int\n            inb2 = true;\n            break;\n          }\n        }\n        if (inb2 === false) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAQ;IAAU;IAAkB;CAAQ;AAClE,IAAI,oBAAoB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACxE,IAAI,EACF,KAAK,EACL,IAAI,EACJ,MAAM,EACN,cAAc,EACd,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;GAoBC,GACD,OAAO,MAAM,MAAM;QACjB,kCAAkC,SAAS,4BAA4B,EAAE,EAAE,EAAE;YAC3E,IAAI,OAAO,KAAK,KAAK,IAAI,MAAM,QAAQ,GAAG;gBACxC,gCAAgC;gBAChC,OAAO;YACT,OAAO,IAAI,OAAO,KAAK,KAAK,IAAI,MAAM,QAAQ,GAAG;gBAC/C,oCAAoC;gBACpC,OAAO;YACT;YACA,IAAI,KAAK,CAAA,GAAA,sJAAA,CAAA,WAAQ,AAAD,EAAE,CAAA,GAAA,sJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,OAAO,CAAC,MAAM,KAAK,GAAG,OAAO,IAAI,IAAI,CAAC;YACtE,IAAI,KAAK,CAAA,GAAA,sJAAA,CAAA,WAAQ,AAAD,EAAE,CAAA,GAAA,sJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,OAAO,CAAC,MAAM,KAAK,GAAG,OAAO,IAAI,IAAI,CAAC;YACtE,IAAI;YACJ,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,MAAM,EAAE,IAAK;gBAClC,OAAO;gBACP,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,MAAM,EAAE,IAAK;oBAClC,IAAI,eAAe,EAAE,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,KAAK,MAAM,KAAK,EAAE,CAAC,EAAE,CAAC,UAAU,KAAK,EAAE,CAAC,EAAE,CAAC,UAAU,EAAE;wBAC3F,yCAAyC;wBACzC,OAAO;wBACP;oBACF;gBACF;gBACA,IAAI,SAAS,OAAO;oBAClB,OAAO;gBACT;YACF;YACA,OAAO;QACT;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7900, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/set/setMultiplicity.js"],"sourcesContent":["import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setMultiplicity';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];\nexport var createSetMultiplicity = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    subset,\n    compareNatural,\n    Index\n  } = _ref;\n  /**\n   * Count the multiplicity of an element in a multiset.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setMultiplicity(element, set)\n   *\n   * Examples:\n   *\n   *    math.setMultiplicity(1, [1, 2, 2, 4])    // returns 1\n   *    math.setMultiplicity(2, [1, 2, 2, 4])    // returns 2\n   *\n   * See also:\n   *\n   *    setDistinct, setSize\n   *\n   * @param {number | BigNumber | Fraction | Complex} e  An element in the multiset\n   * @param {Array | Matrix}     a  A multiset\n   * @return {number}            The number of how many times the multiset contains the element\n   */\n  return typed(name, {\n    'number | BigNumber | Fraction | Complex, Array | Matrix': function number__BigNumber__Fraction__Complex_Array__Matrix(e, a) {\n      if (subset(size(a), new Index(0)) === 0) {\n        // if empty, return 0\n        return 0;\n      }\n      var b = flatten(Array.isArray(a) ? a : a.toArray());\n      var count = 0;\n      for (var i = 0; i < b.length; i++) {\n        if (compareNatural(b[i], e) === 0) {\n          count++;\n        }\n      }\n      return count;\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAQ;IAAU;IAAkB;CAAQ;AAClE,IAAI,wBAAwB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAC5E,IAAI,EACF,KAAK,EACL,IAAI,EACJ,MAAM,EACN,cAAc,EACd,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;GAoBC,GACD,OAAO,MAAM,MAAM;QACjB,2DAA2D,SAAS,mDAAmD,CAAC,EAAE,CAAC;YACzH,IAAI,OAAO,KAAK,IAAI,IAAI,MAAM,QAAQ,GAAG;gBACvC,qBAAqB;gBACrB,OAAO;YACT;YACA,IAAI,IAAI,CAAA,GAAA,sJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,OAAO,CAAC,KAAK,IAAI,EAAE,OAAO;YAChD,IAAI,QAAQ;YACZ,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,MAAM,EAAE,IAAK;gBACjC,IAAI,eAAe,CAAC,CAAC,EAAE,EAAE,OAAO,GAAG;oBACjC;gBACF;YACF;YACA,OAAO;QACT;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7960, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/set/setPowerset.js"],"sourcesContent":["import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setPowerset';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];\nexport var createSetPowerset = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    subset,\n    compareNatural,\n    Index\n  } = _ref;\n  /**\n   * Create the powerset of a (multi)set. (The powerset contains very possible subsets of a (multi)set.)\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setPowerset(set)\n   *\n   * Examples:\n   *\n   *    math.setPowerset([1, 2, 3])        // returns [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n   *\n   * See also:\n   *\n   *    setCartesian\n   *\n   * @param {Array | Matrix}    a  A (multi)set\n   * @return {Array}    The powerset of the (multi)set\n   */\n  return typed(name, {\n    'Array | Matrix': function Array__Matrix(a) {\n      if (subset(size(a), new Index(0)) === 0) {\n        // if empty, return empty\n        return [];\n      }\n      var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n      var result = [];\n      var number = 0;\n      while (number.toString(2).length <= b.length) {\n        result.push(_subset(b, number.toString(2).split('').reverse()));\n        number++;\n      }\n      // can not return a matrix, because of the different size of the subarrays\n      return _sort(result);\n    }\n  });\n\n  // create subset\n  function _subset(array, bitarray) {\n    var result = [];\n    for (var i = 0; i < bitarray.length; i++) {\n      if (bitarray[i] === '1') {\n        result.push(array[i]);\n      }\n    }\n    return result;\n  }\n\n  // sort subsests by length\n  function _sort(array) {\n    var temp = [];\n    for (var i = array.length - 1; i > 0; i--) {\n      for (var j = 0; j < i; j++) {\n        if (array[j].length > array[j + 1].length) {\n          temp = array[j];\n          array[j] = array[j + 1];\n          array[j + 1] = temp;\n        }\n      }\n    }\n    return array;\n  }\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAQ;IAAU;IAAkB;CAAQ;AAClE,IAAI,oBAAoB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACxE,IAAI,EACF,KAAK,EACL,IAAI,EACJ,MAAM,EACN,cAAc,EACd,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;GAkBC,GACD,OAAO,MAAM,MAAM;QACjB,kBAAkB,SAAS,cAAc,CAAC;YACxC,IAAI,OAAO,KAAK,IAAI,IAAI,MAAM,QAAQ,GAAG;gBACvC,yBAAyB;gBACzB,OAAO,EAAE;YACX;YACA,IAAI,IAAI,CAAA,GAAA,sJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,OAAO,CAAC,KAAK,IAAI,EAAE,OAAO,IAAI,IAAI,CAAC;YACzD,IAAI,SAAS,EAAE;YACf,IAAI,SAAS;YACb,MAAO,OAAO,QAAQ,CAAC,GAAG,MAAM,IAAI,EAAE,MAAM,CAAE;gBAC5C,OAAO,IAAI,CAAC,QAAQ,GAAG,OAAO,QAAQ,CAAC,GAAG,KAAK,CAAC,IAAI,OAAO;gBAC3D;YACF;YACA,0EAA0E;YAC1E,OAAO,MAAM;QACf;IACF;;IAEA,gBAAgB;IAChB,SAAS,QAAQ,KAAK,EAAE,QAAQ;QAC9B,IAAI,SAAS,EAAE;QACf,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,MAAM,EAAE,IAAK;YACxC,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK;gBACvB,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE;YACtB;QACF;QACA,OAAO;IACT;IAEA,0BAA0B;IAC1B,SAAS,MAAM,KAAK;QAClB,IAAI,OAAO,EAAE;QACb,IAAK,IAAI,IAAI,MAAM,MAAM,GAAG,GAAG,IAAI,GAAG,IAAK;YACzC,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IAAK;gBAC1B,IAAI,KAAK,CAAC,EAAE,CAAC,MAAM,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC,MAAM,EAAE;oBACzC,OAAO,KAAK,CAAC,EAAE;oBACf,KAAK,CAAC,EAAE,GAAG,KAAK,CAAC,IAAI,EAAE;oBACvB,KAAK,CAAC,IAAI,EAAE,GAAG;gBACjB;YACF;QACF;QACA,OAAO;IACT;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8044, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/set/setSize.js"],"sourcesContent":["import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setSize';\nvar dependencies = ['typed', 'compareNatural'];\nexport var createSetSize = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    compareNatural\n  } = _ref;\n  /**\n   * Count the number of elements of a (multi)set. When a second parameter is 'true', count only the unique values.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setSize(set)\n   *    math.setSize(set, unique)\n   *\n   * Examples:\n   *\n   *    math.setSize([1, 2, 2, 4])          // returns 4\n   *    math.setSize([1, 2, 2, 4], true)    // returns 3\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix} a  A multiset\n   * @param {boolean} [unique]  If true, only the unique values are counted. False by default\n   * @return {number}           The number of elements of the (multi)set\n   */\n  return typed(name, {\n    'Array | Matrix': function Array__Matrix(a) {\n      return Array.isArray(a) ? flatten(a).length : flatten(a.toArray()).length;\n    },\n    'Array | Matrix, boolean': function Array__Matrix_boolean(a, unique) {\n      if (unique === false || a.length === 0) {\n        return Array.isArray(a) ? flatten(a).length : flatten(a.toArray()).length;\n      } else {\n        var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n        var count = 1;\n        for (var i = 1; i < b.length; i++) {\n          if (compareNatural(b[i], b[i - 1]) !== 0) {\n            count++;\n          }\n        }\n        return count;\n      }\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;CAAiB;AACvC,IAAI,gBAAgB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACpE,IAAI,EACF,KAAK,EACL,cAAc,EACf,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;GAqBC,GACD,OAAO,MAAM,MAAM;QACjB,kBAAkB,SAAS,cAAc,CAAC;YACxC,OAAO,MAAM,OAAO,CAAC,KAAK,CAAA,GAAA,sJAAA,CAAA,UAAO,AAAD,EAAE,GAAG,MAAM,GAAG,CAAA,GAAA,sJAAA,CAAA,UAAO,AAAD,EAAE,EAAE,OAAO,IAAI,MAAM;QAC3E;QACA,2BAA2B,SAAS,sBAAsB,CAAC,EAAE,MAAM;YACjE,IAAI,WAAW,SAAS,EAAE,MAAM,KAAK,GAAG;gBACtC,OAAO,MAAM,OAAO,CAAC,KAAK,CAAA,GAAA,sJAAA,CAAA,UAAO,AAAD,EAAE,GAAG,MAAM,GAAG,CAAA,GAAA,sJAAA,CAAA,UAAO,AAAD,EAAE,EAAE,OAAO,IAAI,MAAM;YAC3E,OAAO;gBACL,IAAI,IAAI,CAAA,GAAA,sJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,OAAO,CAAC,KAAK,IAAI,EAAE,OAAO,IAAI,IAAI,CAAC;gBACzD,IAAI,QAAQ;gBACZ,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,MAAM,EAAE,IAAK;oBACjC,IAAI,eAAe,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,MAAM,GAAG;wBACxC;oBACF;gBACF;gBACA,OAAO;YACT;QACF;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8105, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/set/setSymDifference.js"],"sourcesContent":["import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setSymDifference';\nvar dependencies = ['typed', 'size', 'concat', 'subset', 'setDifference', 'Index'];\nexport var createSetSymDifference = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    concat,\n    subset,\n    setDifference,\n    Index\n  } = _ref;\n  /**\n   * Create the symmetric difference of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setSymDifference(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 5, 6]\n   *    math.setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 5, 6]\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The symmetric difference of two (multi)sets\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function Array__Matrix_Array__Matrix(a1, a2) {\n      if (subset(size(a1), new Index(0)) === 0) {\n        // if any of them is empty, return the other one\n        return flatten(a2);\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        return flatten(a1);\n      }\n      var b1 = flatten(a1);\n      var b2 = flatten(a2);\n      return concat(setDifference(b1, b2), setDifference(b2, b1));\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAQ;IAAU;IAAU;IAAiB;CAAQ;AAC3E,IAAI,yBAAyB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAC7E,IAAI,EACF,KAAK,EACL,IAAI,EACJ,MAAM,EACN,MAAM,EACN,aAAa,EACb,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;GAoBC,GACD,OAAO,MAAM,MAAM;QACjB,kCAAkC,SAAS,4BAA4B,EAAE,EAAE,EAAE;YAC3E,IAAI,OAAO,KAAK,KAAK,IAAI,MAAM,QAAQ,GAAG;gBACxC,gDAAgD;gBAChD,OAAO,CAAA,GAAA,sJAAA,CAAA,UAAO,AAAD,EAAE;YACjB,OAAO,IAAI,OAAO,KAAK,KAAK,IAAI,MAAM,QAAQ,GAAG;gBAC/C,OAAO,CAAA,GAAA,sJAAA,CAAA,UAAO,AAAD,EAAE;YACjB;YACA,IAAI,KAAK,CAAA,GAAA,sJAAA,CAAA,UAAO,AAAD,EAAE;YACjB,IAAI,KAAK,CAAA,GAAA,sJAAA,CAAA,UAAO,AAAD,EAAE;YACjB,OAAO,OAAO,cAAc,IAAI,KAAK,cAAc,IAAI;QACzD;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8163, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/set/setUnion.js"],"sourcesContent":["import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setUnion';\nvar dependencies = ['typed', 'size', 'concat', 'subset', 'setIntersect', 'setSymDifference', 'Index'];\nexport var createSetUnion = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    concat,\n    subset,\n    setIntersect,\n    setSymDifference,\n    Index\n  } = _ref;\n  /**\n   * Create the union of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setUnion(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setUnion([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 3, 4, 5, 6]\n   *    math.setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 3, 4, 5, 6]\n   *\n   * See also:\n   *\n   *    setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The union of two (multi)sets\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function Array__Matrix_Array__Matrix(a1, a2) {\n      if (subset(size(a1), new Index(0)) === 0) {\n        // if any of them is empty, return the other one\n        return flatten(a2);\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        return flatten(a1);\n      }\n      var b1 = flatten(a1);\n      var b2 = flatten(a2);\n      return concat(setSymDifference(b1, b2), setIntersect(b1, b2));\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAQ;IAAU;IAAU;IAAgB;IAAoB;CAAQ;AAC9F,IAAI,iBAAiB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACrE,IAAI,EACF,KAAK,EACL,IAAI,EACJ,MAAM,EACN,MAAM,EACN,YAAY,EACZ,gBAAgB,EAChB,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;GAoBC,GACD,OAAO,MAAM,MAAM;QACjB,kCAAkC,SAAS,4BAA4B,EAAE,EAAE,EAAE;YAC3E,IAAI,OAAO,KAAK,KAAK,IAAI,MAAM,QAAQ,GAAG;gBACxC,gDAAgD;gBAChD,OAAO,CAAA,GAAA,sJAAA,CAAA,UAAO,AAAD,EAAE;YACjB,OAAO,IAAI,OAAO,KAAK,KAAK,IAAI,MAAM,QAAQ,GAAG;gBAC/C,OAAO,CAAA,GAAA,sJAAA,CAAA,UAAO,AAAD,EAAE;YACjB;YACA,IAAI,KAAK,CAAA,GAAA,sJAAA,CAAA,UAAO,AAAD,EAAE;YACjB,IAAI,KAAK,CAAA,GAAA,sJAAA,CAAA,UAAO,AAAD,EAAE;YACjB,OAAO,OAAO,iBAAiB,IAAI,KAAK,aAAa,IAAI;QAC3D;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8222, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/geometry/distance.js"],"sourcesContent":["import { isBigNumber } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'distance';\nvar dependencies = ['typed', 'addScalar', 'subtractScalar', 'divideScalar', 'multiplyScalar', 'deepEqual', 'sqrt', 'abs'];\nexport var createDistance = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    addScalar,\n    subtractScalar,\n    multiplyScalar,\n    divideScalar,\n    deepEqual,\n    sqrt,\n    abs\n  } = _ref;\n  /**\n    * Calculates:\n    *    The eucledian distance between two points in N-dimensional spaces.\n    *    Distance between point and a line in 2 and 3 dimensional spaces.\n    *    Pairwise distance between a set of 2D or 3D points\n    * NOTE:\n    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c\n    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)\n    *\n    * Syntax:\n    *\n    *    math.distance([x1,y1], [x2,y2])\n    *    math.distance({pointOneX, pointOneY}, {pointTwoX, pointTwoY})\n    *    math.distance([x1,y1,z1], [x2,y2,z2])\n    *    math.distance({pointOneX, pointOneY, pointOneZ}, {pointTwoX, pointTwoY, pointTwoZ})\n    *    math.distance([x1,y1,z1,a1], [x2,y2,z2,a2])\n    *    math.distance([[x1,y1], [x2,y2], [x3,y3]])\n    *    math.distance([[x1,y1,z1], [x2,y2,z2], [x3,y3,z3]])\n    *    math.distance([pointX,pointY], [a,b,c])\n    *    math.distance([pointX,pointY], [lineOnePtX,lineOnePtY], [lineTwoPtX,lineTwoPtY])\n    *    math.distance({pointX, pointY}, {lineOnePtX, lineOnePtY}, {lineTwoPtX, lineTwoPtY})\n    *    math.distance([pointX,pointY,pointZ], [x0, y0, z0, a, b, c])\n    *    math.distance({pointX, pointY, pointZ}, {x0, y0, z0, a, b, c})\n    *\n    * Examples:\n    *    math.distance([0,0], [4,4])                     // Returns 5.656854249492381\n    *    math.distance(\n    *     {pointOneX: 0, pointOneY: 0},\n    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951\n    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.7416573867739413\n    *    math.distance(\n    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},\n    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3\n    *    math.distance([1, 0, 1, 0], [0, -1, 0, -1])     // Returns 2\n    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]\n    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]\n    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387\n    *    math.distance([0, 0], [3, 0], [0, 4])        // Returns 2.4\n    *    math.distance(\n    *     {pointX: 0, pointY: 0},\n    *     {lineOnePtX: 3, lineOnePtY: 0},\n    *     {lineTwoPtX: 0, lineTwoPtY: 4})                // Returns 2.4\n    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857\n    *    math.distance(\n    *     {pointX: 2, pointY: 3, pointZ: 1},\n    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1})       // Returns 2.3204774044612857\n    *\n    * @param {Array | Matrix | Object} x    Co-ordinates of first point\n    * @param {Array | Matrix | Object} y    Co-ordinates of second point\n    * @return {Number | BigNumber} Returns the distance from two/three points\n  */\n  return typed(name, {\n    'Array, Array, Array': function Array_Array_Array(x, y, z) {\n      // Point to Line 2D (x=Point, y=LinePoint1, z=LinePoint2)\n      if (x.length === 2 && y.length === 2 && z.length === 2) {\n        if (!_2d(x)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n        }\n        if (!_2d(y)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');\n        }\n        if (!_2d(z)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');\n        }\n        if (deepEqual(y, z)) {\n          throw new TypeError('LinePoint1 should not be same with LinePoint2');\n        }\n        var xCoeff = subtractScalar(z[1], y[1]);\n        var yCoeff = subtractScalar(y[0], z[0]);\n        var constant = subtractScalar(multiplyScalar(z[0], y[1]), multiplyScalar(y[0], z[1]));\n        return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Object, Object, Object': function Object_Object_Object(x, y, z) {\n      if (Object.keys(x).length === 2 && Object.keys(y).length === 2 && Object.keys(z).length === 2) {\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');\n        }\n        if (!_2d(y)) {\n          throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers');\n        }\n        if (!_2d(z)) {\n          throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers');\n        }\n        if (deepEqual(_objectToArray(y), _objectToArray(z))) {\n          throw new TypeError('LinePoint1 should not be same with LinePoint2');\n        }\n        if ('pointX' in x && 'pointY' in x && 'lineOnePtX' in y && 'lineOnePtY' in y && 'lineTwoPtX' in z && 'lineTwoPtY' in z) {\n          var xCoeff = subtractScalar(z.lineTwoPtY, y.lineOnePtY);\n          var yCoeff = subtractScalar(y.lineOnePtX, z.lineTwoPtX);\n          var constant = subtractScalar(multiplyScalar(z.lineTwoPtX, y.lineOnePtY), multiplyScalar(y.lineOnePtX, z.lineTwoPtY));\n          return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Array, Array': function Array_Array(x, y) {\n      // Point to Line 2D (x=[pointX, pointY], y=[x-coeff, y-coeff, const])\n      if (x.length === 2 && y.length === 3) {\n        if (!_2d(x)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n        }\n        if (!_3d(y)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n        }\n        return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);\n      } else if (x.length === 3 && y.length === 6) {\n        // Point to Line 3D\n        if (!_3d(x)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n        }\n        if (!_parametricLine(y)) {\n          throw new TypeError('Array with 6 numbers or BigNumbers expected for second argument');\n        }\n        return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);\n      } else if (x.length === y.length && x.length > 0) {\n        // Point to Point N-dimensions\n        if (!_containsOnlyNumbers(x)) {\n          throw new TypeError('All values of an array should be numbers or BigNumbers');\n        }\n        if (!_containsOnlyNumbers(y)) {\n          throw new TypeError('All values of an array should be numbers or BigNumbers');\n        }\n        return _euclideanDistance(x, y);\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Object, Object': function Object_Object(x, y) {\n      if (Object.keys(x).length === 2 && Object.keys(y).length === 3) {\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');\n        }\n        if (!_3d(y)) {\n          throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers');\n        }\n        if ('pointX' in x && 'pointY' in x && 'xCoeffLine' in y && 'yCoeffLine' in y && 'constant' in y) {\n          return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 6) {\n        // Point to Line 3D\n        if (!_3d(x)) {\n          throw new TypeError('Values of pointX, pointY and pointZ should be numbers or BigNumbers');\n        }\n        if (!_parametricLine(y)) {\n          throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers or BigNumbers');\n        }\n        if ('pointX' in x && 'pointY' in x && 'x0' in y && 'y0' in y && 'z0' in y && 'a' in y && 'b' in y && 'c' in y) {\n          return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 2 && Object.keys(y).length === 2) {\n        // Point to Point 2D\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointOneX and pointOneY should be numbers or BigNumbers');\n        }\n        if (!_2d(y)) {\n          throw new TypeError('Values of pointTwoX and pointTwoY should be numbers or BigNumbers');\n        }\n        if ('pointOneX' in x && 'pointOneY' in x && 'pointTwoX' in y && 'pointTwoY' in y) {\n          return _euclideanDistance([x.pointOneX, x.pointOneY], [y.pointTwoX, y.pointTwoY]);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 3) {\n        // Point to Point 3D\n        if (!_3d(x)) {\n          throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers');\n        }\n        if (!_3d(y)) {\n          throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers');\n        }\n        if ('pointOneX' in x && 'pointOneY' in x && 'pointOneZ' in x && 'pointTwoX' in y && 'pointTwoY' in y && 'pointTwoZ' in y) {\n          return _euclideanDistance([x.pointOneX, x.pointOneY, x.pointOneZ], [y.pointTwoX, y.pointTwoY, y.pointTwoZ]);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    Array: function Array(arr) {\n      if (!_pairwise(arr)) {\n        throw new TypeError('Incorrect array format entered for pairwise distance calculation');\n      }\n      return _distancePairwise(arr);\n    }\n  });\n  function _isNumber(a) {\n    // distance supports numbers and bignumbers\n    return typeof a === 'number' || isBigNumber(a);\n  }\n  function _2d(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n    return _isNumber(a[0]) && _isNumber(a[1]);\n  }\n  function _3d(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]);\n  }\n  function _containsOnlyNumbers(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (!Array.isArray(a)) {\n      a = _objectToArray(a);\n    }\n    return a.every(_isNumber);\n  }\n  function _parametricLine(a) {\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]) && _isNumber(a[3]) && _isNumber(a[4]) && _isNumber(a[5]);\n  }\n  function _objectToArray(o) {\n    var keys = Object.keys(o);\n    var a = [];\n    for (var i = 0; i < keys.length; i++) {\n      a.push(o[keys[i]]);\n    }\n    return a;\n  }\n  function _pairwise(a) {\n    // checks for valid arguments passed to _distancePairwise(Array)\n    if (a[0].length === 2 && _isNumber(a[0][0]) && _isNumber(a[0][1])) {\n      if (a.some(aI => aI.length !== 2 || !_isNumber(aI[0]) || !_isNumber(aI[1]))) {\n        return false;\n      }\n    } else if (a[0].length === 3 && _isNumber(a[0][0]) && _isNumber(a[0][1]) && _isNumber(a[0][2])) {\n      if (a.some(aI => aI.length !== 3 || !_isNumber(aI[0]) || !_isNumber(aI[1]) || !_isNumber(aI[2]))) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n    return true;\n  }\n  function _distancePointLine2D(x, y, a, b, c) {\n    var num = abs(addScalar(addScalar(multiplyScalar(a, x), multiplyScalar(b, y)), c));\n    var den = sqrt(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)));\n    return divideScalar(num, den);\n  }\n  function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c) {\n    var num = [subtractScalar(multiplyScalar(subtractScalar(y0, y), c), multiplyScalar(subtractScalar(z0, z), b)), subtractScalar(multiplyScalar(subtractScalar(z0, z), a), multiplyScalar(subtractScalar(x0, x), c)), subtractScalar(multiplyScalar(subtractScalar(x0, x), b), multiplyScalar(subtractScalar(y0, y), a))];\n    num = sqrt(addScalar(addScalar(multiplyScalar(num[0], num[0]), multiplyScalar(num[1], num[1])), multiplyScalar(num[2], num[2])));\n    var den = sqrt(addScalar(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)), multiplyScalar(c, c)));\n    return divideScalar(num, den);\n  }\n  function _euclideanDistance(x, y) {\n    var vectorSize = x.length;\n    var result = 0;\n    var diff = 0;\n    for (var i = 0; i < vectorSize; i++) {\n      diff = subtractScalar(x[i], y[i]);\n      result = addScalar(multiplyScalar(diff, diff), result);\n    }\n    return sqrt(result);\n  }\n  function _distancePairwise(a) {\n    var result = [];\n    var pointA = [];\n    var pointB = [];\n    for (var i = 0; i < a.length - 1; i++) {\n      for (var j = i + 1; j < a.length; j++) {\n        if (a[0].length === 2) {\n          pointA = [a[i][0], a[i][1]];\n          pointB = [a[j][0], a[j][1]];\n        } else if (a[0].length === 3) {\n          pointA = [a[i][0], a[i][1], a[i][2]];\n          pointB = [a[j][0], a[j][1], a[j][2]];\n        }\n        result.push(_euclideanDistance(pointA, pointB));\n      }\n    }\n    return result;\n  }\n});"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8570, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/geometry/intersect.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'intersect';\nvar dependencies = ['typed', 'config', 'abs', 'add', 'addScalar', 'matrix', 'multiply', 'multiplyScalar', 'divideScalar', 'subtract', 'smaller', 'equalScalar', 'flatten', 'isZero', 'isNumeric'];\nexport var createIntersect = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    abs,\n    add,\n    addScalar,\n    matrix,\n    multiply,\n    multiplyScalar,\n    divideScalar,\n    subtract,\n    smaller,\n    equalScalar,\n    flatten,\n    isZero,\n    isNumeric\n  } = _ref;\n  /**\n   * Calculates the point of intersection of two lines in two or three dimensions\n   * and of a line and a plane in three dimensions. The inputs are in the form of\n   * arrays or 1 dimensional matrices. The line intersection functions return null\n   * if the lines do not meet.\n   *\n   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.\n   *\n   * Syntax:\n   *\n   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)\n   *    math.intersect(endPoint1, endPoint2, planeCoefficients)\n   *\n   * Examples:\n   *\n   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10])              // Returns [5, 5]\n   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0])  // Returns [5, 5, 0]\n   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])            // Returns [7, -4, 3]\n   *\n   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line\n   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line\n   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line\n   *                              OR Co-efficients of the plane's equation\n   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line\n   *                              OR undefined if the calculation is for line and plane\n   * @return {Array}              Returns the point of intersection of lines/lines-planes\n   */\n  return typed('intersect', {\n    'Array, Array, Array': _AAA,\n    'Array, Array, Array, Array': _AAAA,\n    'Matrix, Matrix, Matrix': function Matrix_Matrix_Matrix(x, y, plane) {\n      var arr = _AAA(x.valueOf(), y.valueOf(), plane.valueOf());\n      return arr === null ? null : matrix(arr);\n    },\n    'Matrix, Matrix, Matrix, Matrix': function Matrix_Matrix_Matrix_Matrix(w, x, y, z) {\n      // TODO: output matrix type should match input matrix type\n      var arr = _AAAA(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf());\n      return arr === null ? null : matrix(arr);\n    }\n  });\n  function _AAA(x, y, plane) {\n    x = _coerceArr(x);\n    y = _coerceArr(y);\n    plane = _coerceArr(plane);\n    if (!_3d(x)) {\n      throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n    }\n    if (!_3d(y)) {\n      throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n    }\n    if (!_4d(plane)) {\n      throw new TypeError('Array with 4 numbers expected as third argument');\n    }\n    return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);\n  }\n  function _AAAA(w, x, y, z) {\n    w = _coerceArr(w);\n    x = _coerceArr(x);\n    y = _coerceArr(y);\n    z = _coerceArr(z);\n    if (w.length === 2) {\n      if (!_2d(w)) {\n        throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n      }\n      if (!_2d(x)) {\n        throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');\n      }\n      if (!_2d(y)) {\n        throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');\n      }\n      if (!_2d(z)) {\n        throw new TypeError('Array with 2 numbers or BigNumbers expected for fourth argument');\n      }\n      return _intersect2d(w, x, y, z);\n    } else if (w.length === 3) {\n      if (!_3d(w)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n      }\n      if (!_3d(x)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n      }\n      if (!_3d(y)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for third argument');\n      }\n      if (!_3d(z)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for fourth argument');\n      }\n      return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);\n    } else {\n      throw new TypeError('Arrays with two or thee dimensional points expected');\n    }\n  }\n\n  /** Coerce row and column 2-dim arrays to 1-dim array */\n  function _coerceArr(arr) {\n    // row matrix\n    if (arr.length === 1) return arr[0];\n\n    // column matrix\n    if (arr.length > 1 && Array.isArray(arr[0])) {\n      if (arr.every(el => Array.isArray(el) && el.length === 1)) return flatten(arr);\n    }\n    return arr;\n  }\n  function _2d(x) {\n    return x.length === 2 && isNumeric(x[0]) && isNumeric(x[1]);\n  }\n  function _3d(x) {\n    return x.length === 3 && isNumeric(x[0]) && isNumeric(x[1]) && isNumeric(x[2]);\n  }\n  function _4d(x) {\n    return x.length === 4 && isNumeric(x[0]) && isNumeric(x[1]) && isNumeric(x[2]) && isNumeric(x[3]);\n  }\n  function _intersect2d(p1a, p1b, p2a, p2b) {\n    var o1 = p1a;\n    var o2 = p2a;\n    var d1 = subtract(o1, p1b);\n    var d2 = subtract(o2, p2b);\n    var det = subtract(multiplyScalar(d1[0], d2[1]), multiplyScalar(d2[0], d1[1]));\n    if (isZero(det)) return null;\n    if (smaller(abs(det), config.relTol)) {\n      return null;\n    }\n    var d20o11 = multiplyScalar(d2[0], o1[1]);\n    var d21o10 = multiplyScalar(d2[1], o1[0]);\n    var d20o21 = multiplyScalar(d2[0], o2[1]);\n    var d21o20 = multiplyScalar(d2[1], o2[0]);\n    var t = divideScalar(addScalar(subtract(subtract(d20o11, d21o10), d20o21), d21o20), det);\n    return add(multiply(d1, t), o1);\n  }\n  function _intersect3dHelper(a, b, c, d, e, f, g, h, i, j, k, l) {\n    // (a - b)*(c - d) + (e - f)*(g - h) + (i - j)*(k - l)\n    var add1 = multiplyScalar(subtract(a, b), subtract(c, d));\n    var add2 = multiplyScalar(subtract(e, f), subtract(g, h));\n    var add3 = multiplyScalar(subtract(i, j), subtract(k, l));\n    return addScalar(addScalar(add1, add2), add3);\n  }\n  function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {\n    var d1343 = _intersect3dHelper(x1, x3, x4, x3, y1, y3, y4, y3, z1, z3, z4, z3);\n    var d4321 = _intersect3dHelper(x4, x3, x2, x1, y4, y3, y2, y1, z4, z3, z2, z1);\n    var d1321 = _intersect3dHelper(x1, x3, x2, x1, y1, y3, y2, y1, z1, z3, z2, z1);\n    var d4343 = _intersect3dHelper(x4, x3, x4, x3, y4, y3, y4, y3, z4, z3, z4, z3);\n    var d2121 = _intersect3dHelper(x2, x1, x2, x1, y2, y1, y2, y1, z2, z1, z2, z1);\n    var numerator = subtract(multiplyScalar(d1343, d4321), multiplyScalar(d1321, d4343));\n    var denominator = subtract(multiplyScalar(d2121, d4343), multiplyScalar(d4321, d4321));\n    if (isZero(denominator)) return null;\n    var ta = divideScalar(numerator, denominator);\n    var tb = divideScalar(addScalar(d1343, multiplyScalar(ta, d4321)), d4343);\n    var pax = addScalar(x1, multiplyScalar(ta, subtract(x2, x1)));\n    var pay = addScalar(y1, multiplyScalar(ta, subtract(y2, y1)));\n    var paz = addScalar(z1, multiplyScalar(ta, subtract(z2, z1)));\n    var pbx = addScalar(x3, multiplyScalar(tb, subtract(x4, x3)));\n    var pby = addScalar(y3, multiplyScalar(tb, subtract(y4, y3)));\n    var pbz = addScalar(z3, multiplyScalar(tb, subtract(z4, z3)));\n    if (equalScalar(pax, pbx) && equalScalar(pay, pby) && equalScalar(paz, pbz)) {\n      return [pax, pay, paz];\n    } else {\n      return null;\n    }\n  }\n  function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c) {\n    var x1x = multiplyScalar(x1, x);\n    var x2x = multiplyScalar(x2, x);\n    var y1y = multiplyScalar(y1, y);\n    var y2y = multiplyScalar(y2, y);\n    var z1z = multiplyScalar(z1, z);\n    var z2z = multiplyScalar(z2, z);\n    var numerator = subtract(subtract(subtract(c, x1x), y1y), z1z);\n    var denominator = subtract(subtract(subtract(addScalar(addScalar(x2x, y2y), z2z), x1x), y1y), z1z);\n    var t = divideScalar(numerator, denominator);\n    var px = addScalar(x1, multiplyScalar(t, subtract(x2, x1)));\n    var py = addScalar(y1, multiplyScalar(t, subtract(y2, y1)));\n    var pz = addScalar(z1, multiplyScalar(t, subtract(z2, z1)));\n    return [px, py, pz];\n    // TODO: Add cases when line is parallel to the plane:\n    //       (a) no intersection,\n    //       (b) line contained in plane\n  }\n});"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8785, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/probability/combinations.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { combinationsNumber } from '../../plain/number/combinations.js';\nvar name = 'combinations';\nvar dependencies = ['typed'];\nexport var createCombinations = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Compute the number of ways of picking `k` unordered outcomes from `n`\n   * possibilities.\n   *\n   * Combinations only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *     math.combinations(n, k)\n   *\n   * Examples:\n   *\n   *    math.combinations(7, 5) // returns 21\n   *\n   * See also:\n   *\n   *    combinationsWithRep, permutations, factorial\n   *\n   * @param {number | BigNumber} n    Total number of objects in the set\n   * @param {number | BigNumber} k    Number of objects in the subset\n   * @return {number | BigNumber}     Number of possible combinations.\n   */\n  return typed(name, {\n    'number, number': combinationsNumber,\n    'BigNumber, BigNumber': function BigNumber_BigNumber(n, k) {\n      var BigNumber = n.constructor;\n      var result, i;\n      var nMinusk = n.minus(k);\n      var one = new BigNumber(1);\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function combinations');\n      }\n      if (k.gt(n)) {\n        throw new TypeError('k must be less than n in function combinations');\n      }\n      result = one;\n      if (k.lt(nMinusk)) {\n        for (i = one; i.lte(nMinusk); i = i.plus(one)) {\n          result = result.times(k.plus(i)).dividedBy(i);\n        }\n      } else {\n        for (i = one; i.lte(k); i = i.plus(one)) {\n          result = result.times(nMinusk.plus(i)).dividedBy(i);\n        }\n      }\n      return result;\n    }\n\n    // TODO: implement support for collection in combinations\n  });\n});\n\n/**\n * Test whether BigNumber n is a positive integer\n * @param {BigNumber} n\n * @returns {boolean} isPositiveInteger\n */\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,qBAAqB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACzE,IAAI,EACF,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;GAsBC,GACD,OAAO,MAAM,MAAM;QACjB,kBAAkB,uKAAA,CAAA,qBAAkB;QACpC,wBAAwB,SAAS,oBAAoB,CAAC,EAAE,CAAC;YACvD,IAAI,YAAY,EAAE,WAAW;YAC7B,IAAI,QAAQ;YACZ,IAAI,UAAU,EAAE,KAAK,CAAC;YACtB,IAAI,MAAM,IAAI,UAAU;YACxB,IAAI,CAAC,kBAAkB,MAAM,CAAC,kBAAkB,IAAI;gBAClD,MAAM,IAAI,UAAU;YACtB;YACA,IAAI,EAAE,EAAE,CAAC,IAAI;gBACX,MAAM,IAAI,UAAU;YACtB;YACA,SAAS;YACT,IAAI,EAAE,EAAE,CAAC,UAAU;gBACjB,IAAK,IAAI,KAAK,EAAE,GAAG,CAAC,UAAU,IAAI,EAAE,IAAI,CAAC,KAAM;oBAC7C,SAAS,OAAO,KAAK,CAAC,EAAE,IAAI,CAAC,IAAI,SAAS,CAAC;gBAC7C;YACF,OAAO;gBACL,IAAK,IAAI,KAAK,EAAE,GAAG,CAAC,IAAI,IAAI,EAAE,IAAI,CAAC,KAAM;oBACvC,SAAS,OAAO,KAAK,CAAC,QAAQ,IAAI,CAAC,IAAI,SAAS,CAAC;gBACnD;YACF;YACA,OAAO;QACT;IAGF;AACF;AAEA;;;;CAIC,GACD,SAAS,kBAAkB,CAAC;IAC1B,OAAO,EAAE,SAAS,MAAM,EAAE,GAAG,CAAC;AAChC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8860, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/probability/combinationsWithRep.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { isInteger } from '../../utils/number.js';\nimport { product } from '../../utils/product.js';\nvar name = 'combinationsWithRep';\nvar dependencies = ['typed'];\nexport var createCombinationsWithRep = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Compute the number of ways of picking `k` unordered outcomes from `n`\n   * possibilities, allowing individual outcomes to be repeated more than once.\n   *\n   * CombinationsWithRep only takes integer arguments.\n   * The following condition must be enforced: k <= n + k -1.\n   *\n   * Syntax:\n   *\n   *     math.combinationsWithRep(n, k)\n   *\n   * Examples:\n   *\n   *    math.combinationsWithRep(7, 5) // returns 462\n   *\n   * See also:\n   *\n   *    combinations, permutations, factorial\n   *\n   * @param {number | BigNumber} n    Total number of objects in the set\n   * @param {number | BigNumber} k    Number of objects in the subset\n   * @return {number | BigNumber}     Number of possible combinations with replacement.\n   */\n  return typed(name, {\n    'number, number': function number_number(n, k) {\n      if (!isInteger(n) || n < 0) {\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\n      }\n      if (!isInteger(k) || k < 0) {\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\n      }\n      if (n < 1) {\n        throw new TypeError('k must be less than or equal to n + k - 1');\n      }\n      if (k < n - 1) {\n        var _prodrange = product(n, n + k - 1);\n        return _prodrange / product(1, k);\n      }\n      var prodrange = product(k + 1, n + k - 1);\n      return prodrange / product(1, n - 1);\n    },\n    'BigNumber, BigNumber': function BigNumber_BigNumber(n, k) {\n      var BigNumber = n.constructor;\n      var result, i;\n      var one = new BigNumber(1);\n      var nMinusOne = n.minus(one);\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\n      }\n      if (n.lt(one)) {\n        throw new TypeError('k must be less than or equal to n + k - 1 in function combinationsWithRep');\n      }\n      result = one;\n      if (k.lt(nMinusOne)) {\n        for (i = one; i.lte(nMinusOne); i = i.plus(one)) {\n          result = result.times(k.plus(i)).dividedBy(i);\n        }\n      } else {\n        for (i = one; i.lte(k); i = i.plus(one)) {\n          result = result.times(nMinusOne.plus(i)).dividedBy(i);\n        }\n      }\n      return result;\n    }\n  });\n});\n\n/**\n * Test whether BigNumber n is a positive integer\n * @param {BigNumber} n\n * @returns {boolean} isPositiveInteger\n */\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;CAAQ;AACrB,IAAI,4BAA4B,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IAChF,IAAI,EACF,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;GAsBC,GACD,OAAO,MAAM,MAAM;QACjB,kBAAkB,SAAS,cAAc,CAAC,EAAE,CAAC;YAC3C,IAAI,CAAC,CAAA,GAAA,uJAAA,CAAA,YAAS,AAAD,EAAE,MAAM,IAAI,GAAG;gBAC1B,MAAM,IAAI,UAAU;YACtB;YACA,IAAI,CAAC,CAAA,GAAA,uJAAA,CAAA,YAAS,AAAD,EAAE,MAAM,IAAI,GAAG;gBAC1B,MAAM,IAAI,UAAU;YACtB;YACA,IAAI,IAAI,GAAG;gBACT,MAAM,IAAI,UAAU;YACtB;YACA,IAAI,IAAI,IAAI,GAAG;gBACb,IAAI,aAAa,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,GAAG,IAAI,IAAI;gBACpC,OAAO,aAAa,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,GAAG;YACjC;YACA,IAAI,YAAY,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,IAAI,GAAG,IAAI,IAAI;YACvC,OAAO,YAAY,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,GAAG,IAAI;QACpC;QACA,wBAAwB,SAAS,oBAAoB,CAAC,EAAE,CAAC;YACvD,IAAI,YAAY,EAAE,WAAW;YAC7B,IAAI,QAAQ;YACZ,IAAI,MAAM,IAAI,UAAU;YACxB,IAAI,YAAY,EAAE,KAAK,CAAC;YACxB,IAAI,CAAC,kBAAkB,MAAM,CAAC,kBAAkB,IAAI;gBAClD,MAAM,IAAI,UAAU;YACtB;YACA,IAAI,EAAE,EAAE,CAAC,MAAM;gBACb,MAAM,IAAI,UAAU;YACtB;YACA,SAAS;YACT,IAAI,EAAE,EAAE,CAAC,YAAY;gBACnB,IAAK,IAAI,KAAK,EAAE,GAAG,CAAC,YAAY,IAAI,EAAE,IAAI,CAAC,KAAM;oBAC/C,SAAS,OAAO,KAAK,CAAC,EAAE,IAAI,CAAC,IAAI,SAAS,CAAC;gBAC7C;YACF,OAAO;gBACL,IAAK,IAAI,KAAK,EAAE,GAAG,CAAC,IAAI,IAAI,EAAE,IAAI,CAAC,KAAM;oBACvC,SAAS,OAAO,KAAK,CAAC,UAAU,IAAI,CAAC,IAAI,SAAS,CAAC;gBACrD;YACF;YACA,OAAO;QACT;IACF;AACF;AAEA;;;;CAIC,GACD,SAAS,kBAAkB,CAAC;IAC1B,OAAO,EAAE,SAAS,MAAM,EAAE,GAAG,CAAC;AAChC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8953, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/probability/gamma.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { gammaG, gammaNumber, gammaP } from '../../plain/number/index.js';\nvar name = 'gamma';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'pow', 'BigNumber', 'Complex'];\nexport var createGamma = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    multiplyScalar,\n    pow,\n    BigNumber: _BigNumber,\n    Complex\n  } = _ref;\n  /**\n   * Compute the gamma function of a value using Lanczos approximation for\n   * small values, and an extended Stirling approximation for large values.\n   *\n   * To avoid confusion with the matrix Gamma function, this function does\n   * not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.gamma(n)\n   *\n   * Examples:\n   *\n   *    math.gamma(5)       // returns 24\n   *    math.gamma(-0.5)    // returns -3.5449077018110335\n   *    math.gamma(math.i)  // returns -0.15494982830180973 - 0.49801566811835596i\n   *\n   * See also:\n   *\n   *    combinations, factorial, permutations\n   *\n   * @param {number | BigNumber | Complex} n   A real or complex number\n   * @return {number | BigNumber | Complex}    The gamma of `n`\n   */\n\n  function gammaComplex(n) {\n    if (n.im === 0) {\n      return gammaNumber(n.re);\n    }\n\n    // Lanczos approximation doesn't work well with real part lower than 0.5\n    // So reflection formula is required\n    if (n.re < 0.5) {\n      // Euler's reflection formula\n      // gamma(1-z) * gamma(z) = PI / sin(PI * z)\n      // real part of Z should not be integer [sin(PI) == 0 -> 1/0 - undefined]\n      // thanks to imperfect sin implementation sin(PI * n) != 0\n      // we can safely use it anyway\n      var _t = new Complex(1 - n.re, -n.im);\n      var r = new Complex(Math.PI * n.re, Math.PI * n.im);\n      return new Complex(Math.PI).div(r.sin()).div(gammaComplex(_t));\n    }\n\n    // Lanczos approximation\n    // z -= 1\n    n = new Complex(n.re - 1, n.im);\n\n    // x = gammaPval[0]\n    var x = new Complex(gammaP[0], 0);\n    // for (i, gammaPval) in enumerate(gammaP):\n    for (var i = 1; i < gammaP.length; ++i) {\n      // x += gammaPval / (z + i)\n      var gammaPval = new Complex(gammaP[i], 0);\n      x = x.add(gammaPval.div(n.add(i)));\n    }\n    // t = z + gammaG + 0.5\n    var t = new Complex(n.re + gammaG + 0.5, n.im);\n\n    // y = sqrt(2 * pi) * t ** (z + 0.5) * exp(-t) * x\n    var twoPiSqrt = Math.sqrt(2 * Math.PI);\n    var tpow = t.pow(n.add(0.5));\n    var expt = t.neg().exp();\n\n    // y = [x] * [sqrt(2 * pi)] * [t ** (z + 0.5)] * [exp(-t)]\n    return x.mul(twoPiSqrt).mul(tpow).mul(expt);\n  }\n  return typed(name, {\n    number: gammaNumber,\n    Complex: gammaComplex,\n    BigNumber: function BigNumber(n) {\n      if (n.isInteger()) {\n        return n.isNegative() || n.isZero() ? new _BigNumber(Infinity) : bigFactorial(n.minus(1));\n      }\n      if (!n.isFinite()) {\n        return new _BigNumber(n.isNegative() ? NaN : Infinity);\n      }\n      throw new Error('Integer BigNumber expected');\n    }\n  });\n\n  /**\n   * Calculate factorial for a BigNumber\n   * @param {BigNumber} n\n   * @returns {BigNumber} Returns the factorial of n\n   */\n  function bigFactorial(n) {\n    if (n < 8) {\n      return new _BigNumber([1, 1, 2, 6, 24, 120, 720, 5040][n]);\n    }\n    var precision = config.precision + (Math.log(n.toNumber()) | 0);\n    var Big = _BigNumber.clone({\n      precision\n    });\n    if (n % 2 === 1) {\n      return n.times(bigFactorial(new _BigNumber(n - 1)));\n    }\n    var p = n;\n    var prod = new Big(n);\n    var sum = n.toNumber();\n    while (p > 2) {\n      p -= 2;\n      sum += p;\n      prod = prod.times(sum);\n    }\n    return new _BigNumber(prod.toPrecision(_BigNumber.precision));\n  }\n});"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9085, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/probability/lgamma.js"],"sourcesContent":["/* eslint-disable no-loss-of-precision */\n\n// References\n// ----------\n// [1] Hare, \"Computing the Principal Branch of log-Gamma\", Journal of Algorithms, 1997.\n// [2] https://math.stackexchange.com/questions/1338753/how-do-i-calculate-values-for-gamma-function-with-complex-arguments\n\nimport { lgammaNumber, lnSqrt2PI } from '../../plain/number/index.js';\nimport { factory } from '../../utils/factory.js';\nimport { copysign } from '../../utils/number.js';\nvar name = 'lgamma';\nvar dependencies = ['Complex', 'typed'];\nexport var createLgamma = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Complex,\n    typed\n  } = _ref;\n  // Stirling series is non-convergent, we need to use the recurrence `lgamma(z) = lgamma(z+1) - log z` to get\n  // sufficient accuracy.\n  //\n  // These two values are copied from Scipy implementation:\n  // https://github.com/scipy/scipy/blob/v1.8.0/scipy/special/_loggamma.pxd#L37\n  var SMALL_RE = 7;\n  var SMALL_IM = 7;\n\n  /**\n   * The coefficients are B[2*n]/(2*n*(2*n - 1)) where B[2*n] is the (2*n)th Bernoulli number. See (1.1) in [1].\n   *\n   * If you cannot access the paper, can also get these values from the formula in [2].\n   *\n   *    1 /     12 = 0.00833333333333333333333333333333\n   *    1 /    360 = 0.00277777777777777777777777777778\n   * ...\n   * 3617 / 133400 = 0.02955065359477124183006535947712\n   */\n  var coeffs = [-2.955065359477124183e-2, 6.4102564102564102564e-3, -1.9175269175269175269e-3, 8.4175084175084175084e-4, -5.952380952380952381e-4, 7.9365079365079365079e-4, -2.7777777777777777778e-3, 8.3333333333333333333e-2];\n\n  /**\n   * Logarithm of the gamma function for real, positive numbers and complex numbers,\n   * using Lanczos approximation for numbers and Stirling series for complex numbers.\n   *\n   * Syntax:\n   *\n   *    math.lgamma(n)\n   *\n   * Examples:\n   *\n   *    math.lgamma(5)       // returns 3.178053830347945\n   *    math.lgamma(0)       // returns Infinity\n   *    math.lgamma(-0.5)    // returns NaN\n   *    math.lgamma(math.i)  // returns -0.6509231993018536 - 1.8724366472624294i\n   *\n   * See also:\n   *\n   *    gamma\n   *\n   * @param {number | Complex} n   A real or complex number\n   * @return {number | Complex}    The log gamma of `n`\n   */\n  return typed(name, {\n    number: lgammaNumber,\n    Complex: lgammaComplex,\n    BigNumber: function BigNumber() {\n      throw new Error(\"mathjs doesn't yet provide an implementation of the algorithm lgamma for BigNumber\");\n    }\n  });\n  function lgammaComplex(n) {\n    var TWOPI = 6.2831853071795864769252842; // 2*pi\n    var LOGPI = 1.1447298858494001741434262; // log(pi)\n\n    var REFLECTION = 0.1;\n    if (n.isNaN()) {\n      return new Complex(NaN, NaN);\n    } else if (n.im === 0) {\n      return new Complex(lgammaNumber(n.re), 0);\n    } else if (n.re >= SMALL_RE || Math.abs(n.im) >= SMALL_IM) {\n      return lgammaStirling(n);\n    } else if (n.re <= REFLECTION) {\n      // Reflection formula. see Proposition 3.1 in [1]\n      var tmp = copysign(TWOPI, n.im) * Math.floor(0.5 * n.re + 0.25);\n      var a = n.mul(Math.PI).sin().log();\n      var b = lgammaComplex(new Complex(1 - n.re, -n.im));\n      return new Complex(LOGPI, tmp).sub(a).sub(b);\n    } else if (n.im >= 0) {\n      return lgammaRecurrence(n);\n    } else {\n      return lgammaRecurrence(n.conjugate()).conjugate();\n    }\n  }\n  function lgammaStirling(z) {\n    // formula ref in [2]\n    // computation ref:\n    // https://github.com/scipy/scipy/blob/v1.8.0/scipy/special/_loggamma.pxd#L101\n\n    // left part\n\n    // x (log(x) - 1) + 1/2 (log(2PI) - log(x))\n    // => (x - 0.5) * log(x) - x + log(2PI) / 2\n    var leftPart = z.sub(0.5).mul(z.log()).sub(z).add(lnSqrt2PI);\n\n    // right part\n\n    var rz = new Complex(1, 0).div(z);\n    var rzz = rz.div(z);\n    var a = coeffs[0];\n    var b = coeffs[1];\n    var r = 2 * rzz.re;\n    var s = rzz.re * rzz.re + rzz.im * rzz.im;\n    for (var i = 2; i < 8; i++) {\n      var tmp = b;\n      b = -s * a + coeffs[i];\n      a = r * a + tmp;\n    }\n    var rightPart = rz.mul(rzz.mul(a).add(b));\n\n    // plus left and right\n\n    return leftPart.add(rightPart);\n  }\n  function lgammaRecurrence(z) {\n    // computation ref:\n    // https://github.com/scipy/scipy/blob/v1.8.0/scipy/special/_loggamma.pxd#L78\n\n    var signflips = 0;\n    var sb = 0;\n    var shiftprod = z;\n    z = z.add(1);\n    while (z.re <= SMALL_RE) {\n      shiftprod = shiftprod.mul(z);\n      var nsb = shiftprod.im < 0 ? 1 : 0;\n      if (nsb !== 0 && sb === 0) signflips++;\n      sb = nsb;\n      z = z.add(1);\n    }\n    return lgammaStirling(z).sub(shiftprod.log()).sub(new Complex(0, signflips * 2 * Math.PI * 1));\n  }\n});"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9229, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/probability/factorial.js"],"sourcesContent":["import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'factorial';\nvar dependencies = ['typed', 'gamma'];\nexport var createFactorial = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    gamma\n  } = _ref;\n  /**\n   * Compute the factorial of a value\n   *\n   * Factorial only supports an integer value as argument.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.factorial(n)\n   *\n   * Examples:\n   *\n   *    math.factorial(5)    // returns 120\n   *    math.factorial(3)    // returns 6\n   *\n   * See also:\n   *\n   *    combinations, combinationsWithRep, gamma, permutations\n   *\n   * @param {number | BigNumber | Array | Matrix} n   An integer number\n   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`\n   */\n  return typed(name, {\n    number: function number(n) {\n      if (n < 0) {\n        throw new Error('Value must be non-negative');\n      }\n      return gamma(n + 1);\n    },\n    BigNumber: function BigNumber(n) {\n      if (n.isNegative()) {\n        throw new Error('Value must be non-negative');\n      }\n      return gamma(n.plus(1));\n    },\n    'Array | Matrix': typed.referToSelf(self => n => deepMap(n, self))\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;CAAQ;AAC9B,IAAI,kBAAkB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACtE,IAAI,EACF,KAAK,EACL,KAAK,EACN,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;GAqBC,GACD,OAAO,MAAM,MAAM;QACjB,QAAQ,SAAS,OAAO,CAAC;YACvB,IAAI,IAAI,GAAG;gBACT,MAAM,IAAI,MAAM;YAClB;YACA,OAAO,MAAM,IAAI;QACnB;QACA,WAAW,SAAS,UAAU,CAAC;YAC7B,IAAI,EAAE,UAAU,IAAI;gBAClB,MAAM,IAAI,MAAM;YAClB;YACA,OAAO,MAAM,EAAE,IAAI,CAAC;QACtB;QACA,kBAAkB,MAAM,WAAW,CAAC,CAAA,OAAQ,CAAA,IAAK,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,GAAG;IAC9D;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9286, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/probability/kldivergence.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'kldivergence';\nvar dependencies = ['typed', 'matrix', 'divide', 'sum', 'multiply', 'map', 'dotDivide', 'log', 'isNumeric'];\nexport var createKldivergence = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    divide,\n    sum,\n    multiply,\n    map,\n    dotDivide,\n    log,\n    isNumeric\n  } = _ref;\n  /**\n     * Calculate the Kullback-Leibler (KL) divergence  between two distributions\n     *\n     * Syntax:\n     *\n     *     math.kldivergence(x, y)\n     *\n     * Examples:\n     *\n     *     math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])   //returns 0.24376698773121153\n     *\n     *\n     * @param  {Array | Matrix} q    First vector\n     * @param  {Array | Matrix} p    Second vector\n     * @return {number}              Returns distance between q and p\n     */\n  return typed(name, {\n    'Array, Array': function Array_Array(q, p) {\n      return _kldiv(matrix(q), matrix(p));\n    },\n    'Matrix, Array': function Matrix_Array(q, p) {\n      return _kldiv(q, matrix(p));\n    },\n    'Array, Matrix': function Array_Matrix(q, p) {\n      return _kldiv(matrix(q), p);\n    },\n    'Matrix, Matrix': function Matrix_Matrix(q, p) {\n      return _kldiv(q, p);\n    }\n  });\n  function _kldiv(q, p) {\n    var plength = p.size().length;\n    var qlength = q.size().length;\n    if (plength > 1) {\n      throw new Error('first object must be one dimensional');\n    }\n    if (qlength > 1) {\n      throw new Error('second object must be one dimensional');\n    }\n    if (plength !== qlength) {\n      throw new Error('Length of two vectors must be equal');\n    }\n\n    // Before calculation, apply normalization\n    var sumq = sum(q);\n    if (sumq === 0) {\n      throw new Error('Sum of elements in first object must be non zero');\n    }\n    var sump = sum(p);\n    if (sump === 0) {\n      throw new Error('Sum of elements in second object must be non zero');\n    }\n    var qnorm = divide(q, sum(q));\n    var pnorm = divide(p, sum(p));\n    var result = sum(multiply(qnorm, map(dotDivide(qnorm, pnorm), x => log(x))));\n    if (isNumeric(result)) {\n      return result;\n    } else {\n      return Number.NaN;\n    }\n  }\n});"],"names":[],"mappings":";;;AAAA;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;IAAU;IAAO;IAAY;IAAO;IAAa;IAAO;CAAY;AACpG,IAAI,qBAAqB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACzE,IAAI,EACF,KAAK,EACL,MAAM,EACN,MAAM,EACN,GAAG,EACH,QAAQ,EACR,GAAG,EACH,SAAS,EACT,GAAG,EACH,SAAS,EACV,GAAG;IACJ;;;;;;;;;;;;;;;KAeG,GACH,OAAO,MAAM,MAAM;QACjB,gBAAgB,SAAS,YAAY,CAAC,EAAE,CAAC;YACvC,OAAO,OAAO,OAAO,IAAI,OAAO;QAClC;QACA,iBAAiB,SAAS,aAAa,CAAC,EAAE,CAAC;YACzC,OAAO,OAAO,GAAG,OAAO;QAC1B;QACA,iBAAiB,SAAS,aAAa,CAAC,EAAE,CAAC;YACzC,OAAO,OAAO,OAAO,IAAI;QAC3B;QACA,kBAAkB,SAAS,cAAc,CAAC,EAAE,CAAC;YAC3C,OAAO,OAAO,GAAG;QACnB;IACF;;IACA,SAAS,OAAO,CAAC,EAAE,CAAC;QAClB,IAAI,UAAU,EAAE,IAAI,GAAG,MAAM;QAC7B,IAAI,UAAU,EAAE,IAAI,GAAG,MAAM;QAC7B,IAAI,UAAU,GAAG;YACf,MAAM,IAAI,MAAM;QAClB;QACA,IAAI,UAAU,GAAG;YACf,MAAM,IAAI,MAAM;QAClB;QACA,IAAI,YAAY,SAAS;YACvB,MAAM,IAAI,MAAM;QAClB;QAEA,0CAA0C;QAC1C,IAAI,OAAO,IAAI;QACf,IAAI,SAAS,GAAG;YACd,MAAM,IAAI,MAAM;QAClB;QACA,IAAI,OAAO,IAAI;QACf,IAAI,SAAS,GAAG;YACd,MAAM,IAAI,MAAM;QAClB;QACA,IAAI,QAAQ,OAAO,GAAG,IAAI;QAC1B,IAAI,QAAQ,OAAO,GAAG,IAAI;QAC1B,IAAI,SAAS,IAAI,SAAS,OAAO,IAAI,UAAU,OAAO,QAAQ,CAAA,IAAK,IAAI;QACvE,IAAI,UAAU,SAAS;YACrB,OAAO;QACT,OAAO;YACL,OAAO,OAAO,GAAG;QACnB;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9372, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/probability/multinomial.js"],"sourcesContent":["import { deepForEach } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'multinomial';\nvar dependencies = ['typed', 'add', 'divide', 'multiply', 'factorial', 'isInteger', 'isPositive'];\nexport var createMultinomial = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    divide,\n    multiply,\n    factorial,\n    isInteger,\n    isPositive\n  } = _ref;\n  /**\n   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.\n   *\n   * multinomial takes one array of integers as an argument.\n   * The following condition must be enforced: every ai <= 0\n   *\n   * Syntax:\n   *\n   *     math.multinomial(a) // a is an array type\n   *\n   * Examples:\n   *\n   *    math.multinomial([1,2,1]) // returns 12\n   *\n   * See also:\n   *\n   *    combinations, factorial\n   *\n   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset\n   * @return {Number | BigNumber}         Multinomial coefficient.\n   */\n  return typed(name, {\n    'Array | Matrix': function Array__Matrix(a) {\n      var sum = 0;\n      var denom = 1;\n      deepForEach(a, function (ai) {\n        if (!isInteger(ai) || !isPositive(ai)) {\n          throw new TypeError('Positive integer value expected in function multinomial');\n        }\n        sum = add(sum, ai);\n        denom = multiply(denom, factorial(ai));\n      });\n      return divide(factorial(sum), denom);\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAO;IAAU;IAAY;IAAa;IAAa;CAAa;AAC1F,IAAI,oBAAoB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACxE,IAAI,EACF,KAAK,EACL,GAAG,EACH,MAAM,EACN,QAAQ,EACR,SAAS,EACT,SAAS,EACT,UAAU,EACX,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;GAoBC,GACD,OAAO,MAAM,MAAM;QACjB,kBAAkB,SAAS,cAAc,CAAC;YACxC,IAAI,MAAM;YACV,IAAI,QAAQ;YACZ,CAAA,GAAA,2JAAA,CAAA,cAAW,AAAD,EAAE,GAAG,SAAU,EAAE;gBACzB,IAAI,CAAC,UAAU,OAAO,CAAC,WAAW,KAAK;oBACrC,MAAM,IAAI,UAAU;gBACtB;gBACA,MAAM,IAAI,KAAK;gBACf,QAAQ,SAAS,OAAO,UAAU;YACpC;YACA,OAAO,OAAO,UAAU,MAAM;QAChC;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9432, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/probability/permutations.js"],"sourcesContent":["import { isInteger } from '../../utils/number.js';\nimport { product } from '../../utils/product.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'permutations';\nvar dependencies = ['typed', 'factorial'];\nexport var createPermutations = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    factorial\n  } = _ref;\n  /**\n   * Compute the number of ways of obtaining an ordered subset of `k` elements\n   * from a set of `n` elements.\n   *\n   * Permutations only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *     math.permutations(n)\n   *     math.permutations(n, k)\n   *\n   * Examples:\n   *\n   *    math.permutations(5)     // 120\n   *    math.permutations(5, 3)  // 60\n   *\n   * See also:\n   *\n   *    combinations, combinationsWithRep, factorial\n   *\n   * @param {number | BigNumber} n   The number of objects in total\n   * @param {number | BigNumber} [k] The number of objects in the subset\n   * @return {number | BigNumber}    The number of permutations\n   */\n  return typed(name, {\n    'number | BigNumber': factorial,\n    'number, number': function number_number(n, k) {\n      if (!isInteger(n) || n < 0) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n      if (!isInteger(k) || k < 0) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n      if (k > n) {\n        throw new TypeError('second argument k must be less than or equal to first argument n');\n      }\n      // Permute n objects, k at a time\n      return product(n - k + 1, n);\n    },\n    'BigNumber, BigNumber': function BigNumber_BigNumber(n, k) {\n      var result, i;\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n      if (k.gt(n)) {\n        throw new TypeError('second argument k must be less than or equal to first argument n');\n      }\n      var one = n.mul(0).add(1);\n      result = one;\n      for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {\n        result = result.times(i);\n      }\n      return result;\n    }\n\n    // TODO: implement support for collection in permutations\n  });\n});\n\n/**\n * Test whether BigNumber n is a positive integer\n * @param {BigNumber} n\n * @returns {boolean} isPositiveInteger\n */\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;CAAY;AAClC,IAAI,qBAAqB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACzE,IAAI,EACF,KAAK,EACL,SAAS,EACV,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;;;;GAwBC,GACD,OAAO,MAAM,MAAM;QACjB,sBAAsB;QACtB,kBAAkB,SAAS,cAAc,CAAC,EAAE,CAAC;YAC3C,IAAI,CAAC,CAAA,GAAA,uJAAA,CAAA,YAAS,AAAD,EAAE,MAAM,IAAI,GAAG;gBAC1B,MAAM,IAAI,UAAU;YACtB;YACA,IAAI,CAAC,CAAA,GAAA,uJAAA,CAAA,YAAS,AAAD,EAAE,MAAM,IAAI,GAAG;gBAC1B,MAAM,IAAI,UAAU;YACtB;YACA,IAAI,IAAI,GAAG;gBACT,MAAM,IAAI,UAAU;YACtB;YACA,iCAAiC;YACjC,OAAO,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,IAAI,IAAI,GAAG;QAC5B;QACA,wBAAwB,SAAS,oBAAoB,CAAC,EAAE,CAAC;YACvD,IAAI,QAAQ;YACZ,IAAI,CAAC,kBAAkB,MAAM,CAAC,kBAAkB,IAAI;gBAClD,MAAM,IAAI,UAAU;YACtB;YACA,IAAI,EAAE,EAAE,CAAC,IAAI;gBACX,MAAM,IAAI,UAAU;YACtB;YACA,IAAI,MAAM,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC;YACvB,SAAS;YACT,IAAK,IAAI,EAAE,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,IAAI,EAAE,IAAI,CAAC,GAAI;gBACpD,SAAS,OAAO,KAAK,CAAC;YACxB;YACA,OAAO;QACT;IAGF;AACF;AAEA;;;;CAIC,GACD,SAAS,kBAAkB,CAAC;IAC1B,OAAO,EAAE,SAAS,MAAM,EAAE,GAAG,CAAC;AAChC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9517, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/probability/util/seededRNG.js"],"sourcesContent":["import seedrandom from 'seedrandom';\nvar singletonRandom = /* #__PURE__ */seedrandom(Date.now());\nexport function createRng(randomSeed) {\n  var random;\n\n  // create a new random generator with given seed\n  function setSeed(seed) {\n    random = seed === null ? singletonRandom : seedrandom(String(seed));\n  }\n\n  // initialize a seeded pseudo random number generator with config's random seed\n  setSeed(randomSeed);\n\n  // wrapper function so the rng can be updated via generator\n  function rng() {\n    return random();\n  }\n  return rng;\n}"],"names":[],"mappings":";;;AAAA;;AACA,IAAI,kBAAkB,aAAa,GAAE,CAAA,GAAA,mIAAA,CAAA,UAAU,AAAD,EAAE,KAAK,GAAG;AACjD,SAAS,UAAU,UAAU;IAClC,IAAI;IAEJ,gDAAgD;IAChD,SAAS,QAAQ,IAAI;QACnB,SAAS,SAAS,OAAO,kBAAkB,CAAA,GAAA,mIAAA,CAAA,UAAU,AAAD,EAAE,OAAO;IAC/D;IAEA,+EAA+E;IAC/E,QAAQ;IAER,2DAA2D;IAC3D,SAAS;QACP,OAAO;IACT;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9543, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/probability/pickRandom.js"],"sourcesContent":["import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { isMatrix, isNumber } from '../../utils/is.js';\nimport { createRng } from './util/seededRNG.js';\nvar name = 'pickRandom';\nvar dependencies = ['typed', 'config', '?on'];\nexport var createPickRandom = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    on\n  } = _ref;\n  // seeded pseudo random number generator\n  var rng = createRng(config.randomSeed);\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n\n  /**\n   * Random pick one or more values from a one dimensional array.\n   * Array elements are picked using a random function with uniform or weighted distribution.\n   *\n   * Syntax:\n   *\n   *     math.pickRandom(array)\n   *     math.pickRandom(array, number)\n   *     math.pickRandom(array, weights)\n   *     math.pickRandom(array, number, weights)\n   *     math.pickRandom(array, weights, number)\n   *     math.pickRandom(array, { weights, number, elementWise })\n   *\n   * Examples:\n   *\n   *     math.pickRandom([3, 6, 12, 2])                  // returns one of the values in the array\n   *     math.pickRandom([3, 6, 12, 2], 2)               // returns an array of two of the values in the array\n   *     math.pickRandom([3, 6, 12, 2], { number: 2 })   // returns an array of two of the values in the array\n   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1])    // returns one of the values in the array with weighted distribution\n   *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]) // returns an array of two of the values in the array with weighted distribution\n   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2) // returns an array of two of the values in the array with weighted distribution\n   *\n   *     math.pickRandom([{x: 1.0, y: 2.0}, {x: 1.1, y: 2.0}], { elementWise: false })\n   *         // returns one of the items in the array\n   *\n   * See also:\n   *\n   *     random, randomInt\n   *\n   * @param {Array | Matrix} array     A one dimensional array\n   * @param {Int} number               An int or float\n   * @param {Array | Matrix} weights   An array of ints or floats\n   * @return {number | Array}          Returns a single random value from array when number is undefined.\n   *                                   Returns an array with the configured number of elements when number is defined.\n   */\n  return typed(name, {\n    'Array | Matrix': function Array__Matrix(possibles) {\n      return _pickRandom(possibles, {});\n    },\n    'Array | Matrix, Object': function Array__Matrix_Object(possibles, options) {\n      return _pickRandom(possibles, options);\n    },\n    'Array | Matrix, number': function Array__Matrix_number(possibles, number) {\n      return _pickRandom(possibles, {\n        number\n      });\n    },\n    'Array | Matrix, Array | Matrix': function Array__Matrix_Array__Matrix(possibles, weights) {\n      return _pickRandom(possibles, {\n        weights\n      });\n    },\n    'Array | Matrix, Array | Matrix, number': function Array__Matrix_Array__Matrix_number(possibles, weights, number) {\n      return _pickRandom(possibles, {\n        number,\n        weights\n      });\n    },\n    'Array | Matrix, number, Array | Matrix': function Array__Matrix_number_Array__Matrix(possibles, number, weights) {\n      return _pickRandom(possibles, {\n        number,\n        weights\n      });\n    }\n  });\n\n  /**\n   * @param {Array | Matrix} possibles\n   * @param {{\n   *   number?: number,\n   *   weights?: Array | Matrix,\n   *   elementWise: boolean\n   * }} options\n   * @returns {number | Array}\n   * @private\n   */\n  function _pickRandom(possibles, _ref2) {\n    var {\n      number,\n      weights,\n      elementWise = true\n    } = _ref2;\n    var single = typeof number === 'undefined';\n    if (single) {\n      number = 1;\n    }\n    var createMatrix = isMatrix(possibles) ? possibles.create : isMatrix(weights) ? weights.create : null;\n    possibles = possibles.valueOf(); // get Array\n    if (weights) {\n      weights = weights.valueOf(); // get Array\n    }\n    if (elementWise === true) {\n      possibles = flatten(possibles);\n      weights = flatten(weights);\n    }\n    var totalWeights = 0;\n    if (typeof weights !== 'undefined') {\n      if (weights.length !== possibles.length) {\n        throw new Error('Weights must have the same length as possibles');\n      }\n      for (var i = 0, len = weights.length; i < len; i++) {\n        if (!isNumber(weights[i]) || weights[i] < 0) {\n          throw new Error('Weights must be an array of positive numbers');\n        }\n        totalWeights += weights[i];\n      }\n    }\n    var length = possibles.length;\n    var result = [];\n    var pick;\n    while (result.length < number) {\n      if (typeof weights === 'undefined') {\n        pick = possibles[Math.floor(rng() * length)];\n      } else {\n        var randKey = rng() * totalWeights;\n        for (var _i = 0, _len = possibles.length; _i < _len; _i++) {\n          randKey -= weights[_i];\n          if (randKey < 0) {\n            pick = possibles[_i];\n            break;\n          }\n        }\n      }\n      result.push(pick);\n    }\n    return single ? result[0] : createMatrix ? createMatrix(result) : result;\n  }\n});"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9699, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/probability/util/randomMatrix.js"],"sourcesContent":["/**\n * This is a util function for generating a random matrix recursively.\n * @param {number[]} size\n * @param {function} random\n * @returns {Array}\n */\nexport function randomMatrix(size, random) {\n  var data = [];\n  size = size.slice(0);\n  if (size.length > 1) {\n    for (var i = 0, length = size.shift(); i < length; i++) {\n      data.push(randomMatrix(size, random));\n    }\n  } else {\n    for (var _i = 0, _length = size.shift(); _i < _length; _i++) {\n      data.push(random());\n    }\n  }\n  return data;\n}"],"names":[],"mappings":"AAAA;;;;;CAKC;;;AACM,SAAS,aAAa,IAAI,EAAE,MAAM;IACvC,IAAI,OAAO,EAAE;IACb,OAAO,KAAK,KAAK,CAAC;IAClB,IAAI,KAAK,MAAM,GAAG,GAAG;QACnB,IAAK,IAAI,IAAI,GAAG,SAAS,KAAK,KAAK,IAAI,IAAI,QAAQ,IAAK;YACtD,KAAK,IAAI,CAAC,aAAa,MAAM;QAC/B;IACF,OAAO;QACL,IAAK,IAAI,KAAK,GAAG,UAAU,KAAK,KAAK,IAAI,KAAK,SAAS,KAAM;YAC3D,KAAK,IAAI,CAAC;QACZ;IACF;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9727, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/probability/random.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nimport { createRng } from './util/seededRNG.js';\nimport { randomMatrix } from './util/randomMatrix.js';\nvar name = 'random';\nvar dependencies = ['typed', 'config', '?on'];\nexport var createRandom = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    on\n  } = _ref;\n  // seeded pseudo random number generator\n  var rng = createRng(config.randomSeed);\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n\n  /**\n   * Return a random number larger or equal to `min` and smaller than `max`\n   * using a uniform distribution.\n   *\n   * Syntax:\n   *\n   *     math.random()                // generate a random number between 0 and 1\n   *     math.random(max)             // generate a random number between 0 and max\n   *     math.random(min, max)        // generate a random number between min and max\n   *     math.random(size)            // generate a matrix with random numbers between 0 and 1\n   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max\n   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max\n   *\n   * Examples:\n   *\n   *     math.random()       // returns a random number between 0 and 1\n   *     math.random(100)    // returns a random number between 0 and 100\n   *     math.random(30, 40) // returns a random number between 30 and 40\n   *     math.random([2, 3]) // returns a 2x3 matrix with random numbers between 0 and 1\n   *\n   * See also:\n   *\n   *     randomInt, pickRandom\n   *\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n   *                                size and filled with random values is returned\n   * @param {number} [min]  Minimum boundary for the random value, included\n   * @param {number} [max]  Maximum boundary for the random value, excluded\n   * @return {number | Array | Matrix} A random number\n   */\n  return typed(name, {\n    '': () => _random(0, 1),\n    number: max => _random(0, max),\n    'number, number': (min, max) => _random(min, max),\n    'Array | Matrix': size => _randomMatrix(size, 0, 1),\n    'Array | Matrix, number': (size, max) => _randomMatrix(size, 0, max),\n    'Array | Matrix, number, number': (size, min, max) => _randomMatrix(size, min, max)\n  });\n  function _randomMatrix(size, min, max) {\n    var res = randomMatrix(size.valueOf(), () => _random(min, max));\n    return isMatrix(size) ? size.create(res, 'number') : res;\n  }\n  function _random(min, max) {\n    return min + rng() * (max - min);\n  }\n});\n\n// number only implementation of random, no matrix support\n// TODO: there is quite some duplicate code in both createRandom and createRandomNumber, can we improve that?\nexport var createRandomNumber = /* #__PURE__ */factory(name, ['typed', 'config', '?on'], _ref2 => {\n  var {\n    typed,\n    config,\n    on,\n    matrix\n  } = _ref2;\n  // seeded pseudo random number generator1\n  var rng = createRng(config.randomSeed);\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n  return typed(name, {\n    '': () => _random(0, 1),\n    number: max => _random(0, max),\n    'number, number': (min, max) => _random(min, max)\n  });\n  function _random(min, max) {\n    return min + rng() * (max - min);\n  }\n});"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;CAAM;AACtC,IAAI,eAAe,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACnE,IAAI,EACF,KAAK,EACL,MAAM,EACN,EAAE,EACH,GAAG;IACJ,wCAAwC;IACxC,IAAI,MAAM,CAAA,GAAA,oLAAA,CAAA,YAAS,AAAD,EAAE,OAAO,UAAU;IACrC,IAAI,IAAI;QACN,GAAG,UAAU,SAAU,IAAI,EAAE,IAAI;YAC/B,IAAI,KAAK,UAAU,KAAK,KAAK,UAAU,EAAE;gBACvC,MAAM,CAAA,GAAA,oLAAA,CAAA,YAAS,AAAD,EAAE,KAAK,UAAU;YACjC;QACF;IACF;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BC,GACD,OAAO,MAAM,MAAM;QACjB,IAAI,IAAM,QAAQ,GAAG;QACrB,QAAQ,CAAA,MAAO,QAAQ,GAAG;QAC1B,kBAAkB,CAAC,KAAK,MAAQ,QAAQ,KAAK;QAC7C,kBAAkB,CAAA,OAAQ,cAAc,MAAM,GAAG;QACjD,0BAA0B,CAAC,MAAM,MAAQ,cAAc,MAAM,GAAG;QAChE,kCAAkC,CAAC,MAAM,KAAK,MAAQ,cAAc,MAAM,KAAK;IACjF;;IACA,SAAS,cAAc,IAAI,EAAE,GAAG,EAAE,GAAG;QACnC,IAAI,MAAM,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,EAAE,KAAK,OAAO,IAAI,IAAM,QAAQ,KAAK;QAC1D,OAAO,CAAA,GAAA,mJAAA,CAAA,WAAQ,AAAD,EAAE,QAAQ,KAAK,MAAM,CAAC,KAAK,YAAY;IACvD;IACA,SAAS,QAAQ,GAAG,EAAE,GAAG;QACvB,OAAO,MAAM,QAAQ,CAAC,MAAM,GAAG;IACjC;AACF;AAIO,IAAI,qBAAqB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM;IAAC;IAAS;IAAU;CAAM,EAAE,CAAA;IACvF,IAAI,EACF,KAAK,EACL,MAAM,EACN,EAAE,EACF,MAAM,EACP,GAAG;IACJ,yCAAyC;IACzC,IAAI,MAAM,CAAA,GAAA,oLAAA,CAAA,YAAS,AAAD,EAAE,OAAO,UAAU;IACrC,IAAI,IAAI;QACN,GAAG,UAAU,SAAU,IAAI,EAAE,IAAI;YAC/B,IAAI,KAAK,UAAU,KAAK,KAAK,UAAU,EAAE;gBACvC,MAAM,CAAA,GAAA,oLAAA,CAAA,YAAS,AAAD,EAAE,KAAK,UAAU;YACjC;QACF;IACF;IACA,OAAO,MAAM,MAAM;QACjB,IAAI,IAAM,QAAQ,GAAG;QACrB,QAAQ,CAAA,MAAO,QAAQ,GAAG;QAC1B,kBAAkB,CAAC,KAAK,MAAQ,QAAQ,KAAK;IAC/C;;IACA,SAAS,QAAQ,GAAG,EAAE,GAAG;QACvB,OAAO,MAAM,QAAQ,CAAC,MAAM,GAAG;IACjC;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9833, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/probability/randomInt.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { randomMatrix } from './util/randomMatrix.js';\nimport { createRng } from './util/seededRNG.js';\nimport { isMatrix } from '../../utils/is.js';\nvar name = 'randomInt';\nvar dependencies = ['typed', 'config', '?on'];\nexport var createRandomInt = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    on\n  } = _ref;\n  // seeded pseudo random number generator\n  var rng = createRng(config.randomSeed);\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n\n  /**\n   * Return a random integer number larger or equal to `min` and smaller than `max`\n   * using a uniform distribution.\n   *\n   * Syntax:\n   *\n   *     math.randomInt()                // generate a random integer between 0 and 1\n   *     math.randomInt(max)             // generate a random integer between 0 and max\n   *     math.randomInt(min, max)        // generate a random integer between min and max\n   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1\n   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max\n   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max\n   *\n   * Examples:\n   *\n   *     math.randomInt(100)    // returns a random integer between 0 and 100\n   *     math.randomInt(30, 40) // returns a random integer between 30 and 40\n   *     math.randomInt([2, 3]) // returns a 2x3 matrix with random integers between 0 and 1\n   *\n   * See also:\n   *\n   *     random, pickRandom\n   *\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n   *                                size and filled with random values is returned\n   * @param {number} [min]  Minimum boundary for the random value, included\n   * @param {number} [max]  Maximum boundary for the random value, excluded\n   * @return {number | Array | Matrix} A random integer value\n   */\n  return typed(name, {\n    '': () => _randomInt(0, 1),\n    number: max => _randomInt(0, max),\n    'number, number': (min, max) => _randomInt(min, max),\n    'Array | Matrix': size => _randomIntMatrix(size, 0, 1),\n    'Array | Matrix, number': (size, max) => _randomIntMatrix(size, 0, max),\n    'Array | Matrix, number, number': (size, min, max) => _randomIntMatrix(size, min, max)\n  });\n  function _randomIntMatrix(size, min, max) {\n    var res = randomMatrix(size.valueOf(), () => _randomInt(min, max));\n    return isMatrix(size) ? size.create(res, 'number') : res;\n  }\n  function _randomInt(min, max) {\n    return Math.floor(min + rng() * (max - min));\n  }\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAU;CAAM;AACtC,IAAI,kBAAkB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACtE,IAAI,EACF,KAAK,EACL,MAAM,EACN,EAAE,EACH,GAAG;IACJ,wCAAwC;IACxC,IAAI,MAAM,CAAA,GAAA,oLAAA,CAAA,YAAS,AAAD,EAAE,OAAO,UAAU;IACrC,IAAI,IAAI;QACN,GAAG,UAAU,SAAU,IAAI,EAAE,IAAI;YAC/B,IAAI,KAAK,UAAU,KAAK,KAAK,UAAU,EAAE;gBACvC,MAAM,CAAA,GAAA,oLAAA,CAAA,YAAS,AAAD,EAAE,KAAK,UAAU;YACjC;QACF;IACF;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BC,GACD,OAAO,MAAM,MAAM;QACjB,IAAI,IAAM,WAAW,GAAG;QACxB,QAAQ,CAAA,MAAO,WAAW,GAAG;QAC7B,kBAAkB,CAAC,KAAK,MAAQ,WAAW,KAAK;QAChD,kBAAkB,CAAA,OAAQ,iBAAiB,MAAM,GAAG;QACpD,0BAA0B,CAAC,MAAM,MAAQ,iBAAiB,MAAM,GAAG;QACnE,kCAAkC,CAAC,MAAM,KAAK,MAAQ,iBAAiB,MAAM,KAAK;IACpF;;IACA,SAAS,iBAAiB,IAAI,EAAE,GAAG,EAAE,GAAG;QACtC,IAAI,MAAM,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,EAAE,KAAK,OAAO,IAAI,IAAM,WAAW,KAAK;QAC7D,OAAO,CAAA,GAAA,mJAAA,CAAA,WAAQ,AAAD,EAAE,QAAQ,KAAK,MAAM,CAAC,KAAK,YAAY;IACvD;IACA,SAAS,WAAW,GAAG,EAAE,GAAG;QAC1B,OAAO,KAAK,KAAK,CAAC,MAAM,QAAQ,CAAC,MAAM,GAAG;IAC5C;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9912, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/combinatorics/stirlingS2.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { isNumber } from '../../utils/is.js';\nvar name = 'stirlingS2';\nvar dependencies = ['typed', 'addScalar', 'subtractScalar', 'multiplyScalar', 'divideScalar', 'pow', 'factorial', 'combinations', 'isNegative', 'isInteger', 'number', '?bignumber', 'larger'];\nexport var createStirlingS2 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    addScalar,\n    subtractScalar,\n    multiplyScalar,\n    divideScalar,\n    pow,\n    factorial,\n    combinations,\n    isNegative,\n    isInteger,\n    number,\n    bignumber,\n    larger\n  } = _ref;\n  var smallCache = [];\n  var bigCache = [];\n  /**\n   * The Stirling numbers of the second kind, counts the number of ways to partition\n   * a set of n labelled objects into k nonempty unlabelled subsets.\n   * stirlingS2 only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   *  If n = k or k = 1 <= n, then s(n,k) = 1\n   *  If k = 0 < n, then s(n,k) = 0\n   *\n   * Note that if either n or k is supplied as a BigNumber, the result will be\n   * as well.\n   *\n   * Syntax:\n   *\n   *   math.stirlingS2(n, k)\n   *\n   * Examples:\n   *\n   *    math.stirlingS2(5, 3) //returns 25\n   *\n   * See also:\n   *\n   *    bellNumbers\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @param {Number | BigNumber} k    Number of objects in the subset\n   * @return {Number | BigNumber}     S(n,k)\n   */\n  return typed(name, {\n    'number | BigNumber, number | BigNumber': function number__BigNumber_number__BigNumber(n, k) {\n      if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {\n        throw new TypeError('Non-negative integer value expected in function stirlingS2');\n      } else if (larger(k, n)) {\n        throw new TypeError('k must be less than or equal to n in function stirlingS2');\n      }\n      var big = !(isNumber(n) && isNumber(k));\n      var cache = big ? bigCache : smallCache;\n      var make = big ? bignumber : number;\n      var nn = number(n);\n      var nk = number(k);\n      /* See if we already have the value: */\n      if (cache[nn] && cache[nn].length > nk) {\n        return cache[nn][nk];\n      }\n      /* Fill the cache */\n      for (var m = 0; m <= nn; ++m) {\n        if (!cache[m]) {\n          cache[m] = [m === 0 ? make(1) : make(0)];\n        }\n        if (m === 0) continue;\n        var row = cache[m];\n        var prev = cache[m - 1];\n        for (var i = row.length; i <= m && i <= nk; ++i) {\n          if (i === m) {\n            row[i] = 1;\n          } else {\n            row[i] = addScalar(multiplyScalar(make(i), prev[i]), prev[i - 1]);\n          }\n        }\n      }\n      return cache[nn][nk];\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAa;IAAkB;IAAkB;IAAgB;IAAO;IAAa;IAAgB;IAAc;IAAa;IAAU;IAAc;CAAS;AACvL,IAAI,mBAAmB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACvE,IAAI,EACF,KAAK,EACL,SAAS,EACT,cAAc,EACd,cAAc,EACd,YAAY,EACZ,GAAG,EACH,SAAS,EACT,YAAY,EACZ,UAAU,EACV,SAAS,EACT,MAAM,EACN,SAAS,EACT,MAAM,EACP,GAAG;IACJ,IAAI,aAAa,EAAE;IACnB,IAAI,WAAW,EAAE;IACjB;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BC,GACD,OAAO,MAAM,MAAM;QACjB,0CAA0C,SAAS,oCAAoC,CAAC,EAAE,CAAC;YACzF,IAAI,CAAC,UAAU,MAAM,WAAW,MAAM,CAAC,UAAU,MAAM,WAAW,IAAI;gBACpE,MAAM,IAAI,UAAU;YACtB,OAAO,IAAI,OAAO,GAAG,IAAI;gBACvB,MAAM,IAAI,UAAU;YACtB;YACA,IAAI,MAAM,CAAC,CAAC,CAAA,GAAA,mJAAA,CAAA,WAAQ,AAAD,EAAE,MAAM,CAAA,GAAA,mJAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;YACtC,IAAI,QAAQ,MAAM,WAAW;YAC7B,IAAI,OAAO,MAAM,YAAY;YAC7B,IAAI,KAAK,OAAO;YAChB,IAAI,KAAK,OAAO;YAChB,qCAAqC,GACrC,IAAI,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,MAAM,GAAG,IAAI;gBACtC,OAAO,KAAK,CAAC,GAAG,CAAC,GAAG;YACtB;YACA,kBAAkB,GAClB,IAAK,IAAI,IAAI,GAAG,KAAK,IAAI,EAAE,EAAG;gBAC5B,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE;oBACb,KAAK,CAAC,EAAE,GAAG;wBAAC,MAAM,IAAI,KAAK,KAAK,KAAK;qBAAG;gBAC1C;gBACA,IAAI,MAAM,GAAG;gBACb,IAAI,MAAM,KAAK,CAAC,EAAE;gBAClB,IAAI,OAAO,KAAK,CAAC,IAAI,EAAE;gBACvB,IAAK,IAAI,IAAI,IAAI,MAAM,EAAE,KAAK,KAAK,KAAK,IAAI,EAAE,EAAG;oBAC/C,IAAI,MAAM,GAAG;wBACX,GAAG,CAAC,EAAE,GAAG;oBACX,OAAO;wBACL,GAAG,CAAC,EAAE,GAAG,UAAU,eAAe,KAAK,IAAI,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,EAAE;oBAClE;gBACF;YACF;YACA,OAAO,KAAK,CAAC,GAAG,CAAC,GAAG;QACtB;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 10008, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/combinatorics/bellNumbers.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'bellNumbers';\nvar dependencies = ['typed', 'addScalar', 'isNegative', 'isInteger', 'stirlingS2'];\nexport var createBellNumbers = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    addScalar,\n    isNegative,\n    isInteger,\n    stirlingS2\n  } = _ref;\n  /**\n   * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.\n   * bellNumbers only takes integer arguments.\n   * The following condition must be enforced: n >= 0\n   *\n   * Syntax:\n   *\n   *   math.bellNumbers(n)\n   *\n   * Examples:\n   *\n   *    math.bellNumbers(3) // returns 5\n   *    math.bellNumbers(8) // returns 4140\n   *\n   * See also:\n   *\n   *    stirlingS2\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @return {Number | BigNumber}     B(n)\n   */\n  return typed(name, {\n    'number | BigNumber': function number__BigNumber(n) {\n      if (!isInteger(n) || isNegative(n)) {\n        throw new TypeError('Non-negative integer value expected in function bellNumbers');\n      }\n\n      // Sum (k=0, n) S(n,k).\n      var result = 0;\n      for (var i = 0; i <= n; i++) {\n        result = addScalar(result, stirlingS2(n, i));\n      }\n      return result;\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAa;IAAc;IAAa;CAAa;AAC3E,IAAI,oBAAoB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACxE,IAAI,EACF,KAAK,EACL,SAAS,EACT,UAAU,EACV,SAAS,EACT,UAAU,EACX,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;GAoBC,GACD,OAAO,MAAM,MAAM;QACjB,sBAAsB,SAAS,kBAAkB,CAAC;YAChD,IAAI,CAAC,UAAU,MAAM,WAAW,IAAI;gBAClC,MAAM,IAAI,UAAU;YACtB;YAEA,uBAAuB;YACvB,IAAI,SAAS;YACb,IAAK,IAAI,IAAI,GAAG,KAAK,GAAG,IAAK;gBAC3B,SAAS,UAAU,QAAQ,WAAW,GAAG;YAC3C;YACA,OAAO;QACT;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 10063, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/combinatorics/catalan.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'catalan';\nvar dependencies = ['typed', 'addScalar', 'divideScalar', 'multiplyScalar', 'combinations', 'isNegative', 'isInteger'];\nexport var createCatalan = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    addScalar,\n    divideScalar,\n    multiplyScalar,\n    combinations,\n    isNegative,\n    isInteger\n  } = _ref;\n  /**\n   * The Catalan Numbers enumerate combinatorial structures of many different types.\n   * catalan only takes integer arguments.\n   * The following condition must be enforced: n >= 0\n   *\n   * Syntax:\n   *\n   *   math.catalan(n)\n   *\n   * Examples:\n   *\n   *    math.catalan(3) // returns 5\n   *    math.catalan(8) // returns 1430\n   *\n   * See also:\n   *\n   *    bellNumbers\n   *\n   * @param {Number | BigNumber} n    nth Catalan number\n   * @return {Number | BigNumber}     Cn(n)\n   */\n  return typed(name, {\n    'number | BigNumber': function number__BigNumber(n) {\n      if (!isInteger(n) || isNegative(n)) {\n        throw new TypeError('Non-negative integer value expected in function catalan');\n      }\n      return divideScalar(combinations(multiplyScalar(n, 2), n), addScalar(n, 1));\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAa;IAAgB;IAAkB;IAAgB;IAAc;CAAY;AAC/G,IAAI,gBAAgB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACpE,IAAI,EACF,KAAK,EACL,SAAS,EACT,YAAY,EACZ,cAAc,EACd,YAAY,EACZ,UAAU,EACV,SAAS,EACV,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;GAoBC,GACD,OAAO,MAAM,MAAM;QACjB,sBAAsB,SAAS,kBAAkB,CAAC;YAChD,IAAI,CAAC,UAAU,MAAM,WAAW,IAAI;gBAClC,MAAM,IAAI,UAAU;YACtB;YACA,OAAO,aAAa,aAAa,eAAe,GAAG,IAAI,IAAI,UAAU,GAAG;QAC1E;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 10115, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/combinatorics/composition.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'composition';\nvar dependencies = ['typed', 'addScalar', 'combinations', 'isNegative', 'isPositive', 'isInteger', 'larger'];\nexport var createComposition = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    addScalar,\n    combinations,\n    isPositive,\n    isNegative,\n    isInteger,\n    larger\n  } = _ref;\n  /**\n   * The composition counts of n into k parts.\n   *\n   * composition only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *   math.composition(n, k)\n   *\n   * Examples:\n   *\n   *    math.composition(5, 3) // returns 6\n   *\n   * See also:\n   *\n   *    combinations\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @param {Number | BigNumber} k    Number of objects in the subset\n   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.\n   */\n  return typed(name, {\n    'number | BigNumber, number | BigNumber': function number__BigNumber_number__BigNumber(n, k) {\n      if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {\n        throw new TypeError('Positive integer value expected in function composition');\n      } else if (larger(k, n)) {\n        throw new TypeError('k must be less than or equal to n in function composition');\n      }\n      return combinations(addScalar(n, -1), addScalar(k, -1));\n    }\n  });\n});"],"names":[],"mappings":";;;AAAA;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAa;IAAgB;IAAc;IAAc;IAAa;CAAS;AACrG,IAAI,oBAAoB,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACxE,IAAI,EACF,KAAK,EACL,SAAS,EACT,YAAY,EACZ,UAAU,EACV,UAAU,EACV,SAAS,EACT,MAAM,EACP,GAAG;IACJ;;;;;;;;;;;;;;;;;;;;;GAqBC,GACD,OAAO,MAAM,MAAM;QACjB,0CAA0C,SAAS,oCAAoC,CAAC,EAAE,CAAC;YACzF,IAAI,CAAC,UAAU,MAAM,CAAC,WAAW,MAAM,CAAC,UAAU,MAAM,CAAC,WAAW,IAAI;gBACtE,MAAM,IAAI,UAAU;YACtB,OAAO,IAAI,OAAO,GAAG,IAAI;gBACvB,MAAM,IAAI,UAAU;YACtB;YACA,OAAO,aAAa,UAAU,GAAG,CAAC,IAAI,UAAU,GAAG,CAAC;QACtD;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 10170, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/signal/zpk2tf.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'zpk2tf';\nvar dependencies = ['typed', 'add', 'multiply', 'Complex', 'number'];\nexport var createZpk2tf = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    multiply,\n    Complex,\n    number\n  } = _ref;\n  /**\n     * Compute the transfer function of a zero-pole-gain model.\n     *\n     * Syntax:\n     *      math.zpk2tf(z, p, k)\n     *\n     * Examples:\n     *    math.zpk2tf([1, 2], [-1, -2], 1)    // returns [[1, -3, 2], [1, 3, 2]]\n     *\n     * See also:\n     *   freqz\n     *\n     * @param {Array} z Array of zeros values\n     * @param {Array} p Array of poles values\n     * @param {number} k Gain value\n     * @return {Array} Two dimensional array containing the numerator (first row) and denominator (second row) polynomials\n     *\n     */\n  return typed(name, {\n    'Array,Array,number': function ArrayArrayNumber(z, p, k) {\n      return _zpk2tf(z, p, k);\n    },\n    'Array,Array': function ArrayArray(z, p) {\n      return _zpk2tf(z, p, 1);\n    },\n    'Matrix,Matrix,number': function MatrixMatrixNumber(z, p, k) {\n      return _zpk2tf(z.valueOf(), p.valueOf(), k);\n    },\n    'Matrix,Matrix': function MatrixMatrix(z, p) {\n      return _zpk2tf(z.valueOf(), p.valueOf(), 1);\n    }\n  });\n  function _zpk2tf(z, p, k) {\n    // if z is bignumber, convert it to number\n    if (z.some(el => el.type === 'BigNumber')) {\n      z = z.map(el => number(el));\n    }\n    // if p is bignumber, convert it to number\n    if (p.some(el => el.type === 'BigNumber')) {\n      p = p.map(el => number(el));\n    }\n    var num = [Complex(1, 0)];\n    var den = [Complex(1, 0)];\n    for (var i = 0; i < z.length; i++) {\n      var zero = z[i];\n      if (typeof zero === 'number') zero = Complex(zero, 0);\n      num = _multiply(num, [Complex(1, 0), Complex(-zero.re, -zero.im)]);\n    }\n    for (var _i = 0; _i < p.length; _i++) {\n      var pole = p[_i];\n      if (typeof pole === 'number') pole = Complex(pole, 0);\n      den = _multiply(den, [Complex(1, 0), Complex(-pole.re, -pole.im)]);\n    }\n    for (var _i2 = 0; _i2 < num.length; _i2++) {\n      num[_i2] = multiply(num[_i2], k);\n    }\n    return [num, den];\n  }\n  function _multiply(a, b) {\n    var c = [];\n    for (var i = 0; i < a.length + b.length - 1; i++) {\n      c[i] = Complex(0, 0);\n      for (var j = 0; j < a.length; j++) {\n        if (i - j >= 0 && i - j < b.length) {\n          c[i] = add(c[i], multiply(a[j], b[i - j]));\n        }\n      }\n    }\n    return c;\n  }\n});"],"names":[],"mappings":";;;AAAA;;AACA,IAAI,OAAO;AACX,IAAI,eAAe;IAAC;IAAS;IAAO;IAAY;IAAW;CAAS;AAC7D,IAAI,eAAe,aAAa,GAAE,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE,MAAM,cAAc,CAAA;IACnE,IAAI,EACF,KAAK,EACL,GAAG,EACH,QAAQ,EACR,OAAO,EACP,MAAM,EACP,GAAG;IACJ;;;;;;;;;;;;;;;;;KAiBG,GACH,OAAO,MAAM,MAAM;QACjB,sBAAsB,SAAS,iBAAiB,CAAC,EAAE,CAAC,EAAE,CAAC;YACrD,OAAO,QAAQ,GAAG,GAAG;QACvB;QACA,eAAe,SAAS,WAAW,CAAC,EAAE,CAAC;YACrC,OAAO,QAAQ,GAAG,GAAG;QACvB;QACA,wBAAwB,SAAS,mBAAmB,CAAC,EAAE,CAAC,EAAE,CAAC;YACzD,OAAO,QAAQ,EAAE,OAAO,IAAI,EAAE,OAAO,IAAI;QAC3C;QACA,iBAAiB,SAAS,aAAa,CAAC,EAAE,CAAC;YACzC,OAAO,QAAQ,EAAE,OAAO,IAAI,EAAE,OAAO,IAAI;QAC3C;IACF;;IACA,SAAS,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC;QACtB,0CAA0C;QAC1C,IAAI,EAAE,IAAI,CAAC,CAAA,KAAM,GAAG,IAAI,KAAK,cAAc;YACzC,IAAI,EAAE,GAAG,CAAC,CAAA,KAAM,OAAO;QACzB;QACA,0CAA0C;QAC1C,IAAI,EAAE,IAAI,CAAC,CAAA,KAAM,GAAG,IAAI,KAAK,cAAc;YACzC,IAAI,EAAE,GAAG,CAAC,CAAA,KAAM,OAAO;QACzB;QACA,IAAI,MAAM;YAAC,QAAQ,GAAG;SAAG;QACzB,IAAI,MAAM;YAAC,QAAQ,GAAG;SAAG;QACzB,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,MAAM,EAAE,IAAK;YACjC,IAAI,OAAO,CAAC,CAAC,EAAE;YACf,IAAI,OAAO,SAAS,UAAU,OAAO,QAAQ,MAAM;YACnD,MAAM,UAAU,KAAK;gBAAC,QAAQ,GAAG;gBAAI,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,EAAE;aAAE;QACnE;QACA,IAAK,IAAI,KAAK,GAAG,KAAK,EAAE,MAAM,EAAE,KAAM;YACpC,IAAI,OAAO,CAAC,CAAC,GAAG;YAChB,IAAI,OAAO,SAAS,UAAU,OAAO,QAAQ,MAAM;YACnD,MAAM,UAAU,KAAK;gBAAC,QAAQ,GAAG;gBAAI,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,EAAE;aAAE;QACnE;QACA,IAAK,IAAI,MAAM,GAAG,MAAM,IAAI,MAAM,EAAE,MAAO;YACzC,GAAG,CAAC,IAAI,GAAG,SAAS,GAAG,CAAC,IAAI,EAAE;QAChC;QACA,OAAO;YAAC;YAAK;SAAI;IACnB;IACA,SAAS,UAAU,CAAC,EAAE,CAAC;QACrB,IAAI,IAAI,EAAE;QACV,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,MAAM,GAAG,EAAE,MAAM,GAAG,GAAG,IAAK;YAChD,CAAC,CAAC,EAAE,GAAG,QAAQ,GAAG;YAClB,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,MAAM,EAAE,IAAK;gBACjC,IAAI,IAAI,KAAK,KAAK,IAAI,IAAI,EAAE,MAAM,EAAE;oBAClC,CAAC,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE;gBAC1C;YACF;QACF;QACA,OAAO;IACT;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 10275, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Projects/Offline%20Excel/node_modules/mathjs/lib/esm/function/signal/freqz.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'freqz';\nvar dependencies = ['typed', 'add', 'multiply', 'Complex', 'divide', 'matrix'];\nexport var createFreqz = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    multiply,\n    Complex,\n    divide,\n    matrix\n  } = _ref;\n  /**\n     * Calculates the frequency response of a filter given its numerator and denominator coefficients.\n     *\n     * Syntax:\n     *    math.freqz(b, a)\n     *    math.freqz(b, a, w)\n     *\n     * Examples:\n     *   math.freqz([1, 2], [1, 2, 3], 4) // returns { h: [0.5 + 0i, 0.4768589245763655 + 0.2861153547458193i, 0.25000000000000006 + 0.75i, -0.770976571635189 + 0.4625859429811135i], w: [0, 0.7853981633974483, 1.5707963267948966, 2.356194490192345 ] }\n     *   math.freqz([1, 2], [1, 2, 3], [0, 1]) // returns { h: [0.5 + 0i, 0.45436781 + 0.38598051i], w: [0, 1] }\n     *\n     * See also:\n     *  zpk2tf\n     *\n     * @param {Array.<number>} b The numerator coefficients of the filter.\n     * @param {Array.<number>} a The denominator coefficients of the filter.\n     * @param {Array.<number>} [w] A vector of frequencies (in radians/sample) at which the frequency response is to be computed or the number of points to compute (if a number is not provided, the default is 512 points)\n     * @returns {Object} An object with two properties: h, a vector containing the complex frequency response, and w, a vector containing the normalized frequencies (in radians/sample) at which the response was computed.\n     *\n     *\n     */\n  return typed(name, {\n    'Array, Array': function Array_Array(b, a) {\n      var w = createBins(512);\n      return _freqz(b, a, w);\n    },\n    'Array, Array, Array': function Array_Array_Array(b, a, w) {\n      return _freqz(b, a, w);\n    },\n    'Array, Array, number': function Array_Array_number(b, a, w) {\n      if (w < 0) {\n        throw new Error('w must be a positive number');\n      }\n      var w2 = createBins(w);\n      return _freqz(b, a, w2);\n    },\n    'Matrix, Matrix': function Matrix_Matrix(b, a) {\n      // console.log('here')\n      var _w = createBins(512);\n      var {\n        w,\n        h\n      } = _freqz(b.valueOf(), a.valueOf(), _w);\n      return {\n        w: matrix(w),\n        h: matrix(h)\n      };\n    },\n    'Matrix, Matrix, Matrix': function Matrix_Matrix_Matrix(b, a, w) {\n      var {\n        h\n      } = _freqz(b.valueOf(), a.valueOf(), w.valueOf());\n      return {\n        h: matrix(h),\n        w: matrix(w)\n      };\n    },\n    'Matrix, Matrix, number': function Matrix_Matrix_number(b, a, w) {\n      if (w < 0) {\n        throw new Error('w must be a positive number');\n      }\n      var _w = createBins(w);\n      var {\n        h\n      } = _freqz(b.valueOf(), a.valueOf(), _w);\n      return {\n        h: matrix(h),\n        w: matrix(_w)\n      };\n    }\n  });\n  function _freqz(b, a, w) {\n    var num = [];\n    var den = [];\n    for (var i = 0; i < w.length; i++) {\n      var sumNum = Complex(0, 0);\n      var sumDen = Complex(0, 0);\n      for (var j = 0; j < b.length; j++) {\n        sumNum = add(sumNum, multiply(b[j], Complex(Math.cos(-j * w[i]), Math.sin(-j * w[i]))));\n      }\n      for (var _j = 0; _j < a.length; _j++) {\n        sumDen = add(sumDen, multiply(a[_j], Complex(Math.cos(-_j * w[i]), Math.sin(-_j * w[i]))));\n      }\n      num.push(sumNum);\n      den.push(sumDen);\n    }\n    var h = [];\n    for (var _i = 0; _i < num.length; _i++) {\n      h.push(divide(num[_i], den[_i]));\n    }\n    return {\n      h,\n      w\n    };\n  }\n  function createBins(n) {\n    var bins = [];\n    for (var i = 0; i < n; i++) {\n      bins.push(i / n * Math.PI);\n    }\n    return bins;\n  }\n});"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}